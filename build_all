#!/bin/bash
#
# Build everything in the right order
#
# The args are passed to cmake
set -e
set -o pipefail
################################################################################
# Configuration
################################################################################
echo '*============================================================================*'
echo '| Configuration								   |'
echo '+----------------------------------------------------------------------------+'
echo '|                                                                            |'

if [ $# -lt 1 ]
then
	echo 'No build directory is specified, it is set to the default: '$HOME'/2dx'
       	BUILD=~/2dx
else
	BUILD=$1
fi
if [ $# -lt 2 ]
then
	echo 'No install directory is specified, therefore it is set to the build directory: '$BUILD''
	echo 'This means you install in-place'
       	PREFIX=$BUILD
else
	PREFIX=$2	
fi
# this is just a hiden argument for building the mac bundle
if [ $# -eq 3 ];
then
	APPLE_BUNDLE=$3
else
	APPLE_BUNDLE=OFF
fi

# Quick fix to enforce gnu-compilers on Macs
export CC=gcc
export CXX=g++


# And create build dirs here
SRC=$(pwd)
echo "The project structure is set as follows"
echo "The source dir is:"
echo $SRC 
echo "The build dir is:"
echo $BUILD 
echo "The install dir is:"
echo $PREFIX

# check if the build dir exists
if [ ! -e $BUILD ]; then
	echo 'The build dir does not exist, therefore it will be created.' 
	mkdir -p $BUILD
fi
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''

################################################################################
# Fortran
################################################################################
#APP=kernel/mrc
#echo '*============================================================================*'
#echo '| ' ${APP}
#echo '+----------------------------------------------------------------------------+'
#echo '| prepare                                                                    |'
#echo cd ${SRC}/${APP} || { echo "failed to change to"  ${SRC}/${APP} ; exit 1; }
#cd ${SRC}/${APP} || { echo "failed to change to"  ${SRC}/${APP} ; exit 1; }
#echo 'workinkg directory: '
#pwd
#echo '+----------------------------------------------------------------------------+'
#echo '| autoconf                                                                   |'
#echo autoconf || { echo "autoconf failed for" $APP ; exit 2; }
#autoconf || { echo "autoconf failed for" $APP ; exit 2; }
#echo '+----------------------------------------------------------------------------+'
#echo '| configure                                                                  |'
#echo ./configure || { echo "Configure failed for" $APP ; exit 3; } 
#./configure || { echo "Configure failed for" $APP ; exit 3; } 
#echo ''
#echo '+----------------------------------------------------------------------------+'
#echo '| make                                                                       |'
#make VERBOSE=1 -j1 || { echo "Build failed for $APP"; exit 4; } 
#echo ''
#echo '+----------------------------------------------------------------------------+'
#echo '| make install                                                               |'
#make VERBOSE=1 -j1 install || { echo "Install failed for $APP"; read)
#echo '*============================================================================*'
#echo ''
#echo ''
#echo ''
#echo ''


#################################################################################
# 2DX 
################################################################################

APP=2dx
echo '*============================================================================*'
echo '| ' ${APP}
echo '+----------------------------------------------------------------------------+'
echo '| prepare                                                                    |'
cd ${BUILD}
echo 'workinkg directory: '
pwd
echo '+----------------------------------------------------------------------------+'
echo '| configure                                                                  |'
echo cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} -DAPPLE_BUNDLE=${APPLE_BUNDLE} ${SRC} || { echo "Configure failed for" $APP ; exit 5; }  
cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} -DAPPLE_BUNDLE=${APPLE_BUNDLE} ${SRC} || { echo "Configure failed for" $APP ; exit 5; }
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make                                                                       |'
make -j1 || { echo "Build failed for $APP"; exit 6; }
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make install                                                               |'
make -j1 install || { echo "Install failed for $APP"; exit 7; }
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''


################################################################################
# Replacing local "kernel" in installation site with link to svn-repository copy
################################################################################

S2='henning'
S3='sthennin'
if [ "$USER" == "$S2" ] || [ "$USER" == "$S3" ];
then
  echo User = $USER
  cd $BUILD 
  ls -ld kernel
  if [ -h kernel ];
  then
    echo "kernel link already existing."
  else
    echo "Moving executables into kernel/mrc/bin"
    \cp -rf kernel/mrc/bin/* ${SRC}/kernel/mrc/bin
    echo "Removing kernel directory in local ~/2dx"
    \rm -rf kernel
  fi
  if [ ! -h kernel ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/kernel .
    ls -ld kernel
  fi
  #
  cd scripts
  ls -ld image
  if [ -h image ];
  then
    echo "scripts/image link already existing."
  else
    echo "Removing image directory in local ~/2dx/scripts"
    \rm -rf image
  fi
  if [ ! -h image ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/scripts/image .
    ls -ld image
  fi
  #
  ls -ld merge
  if [ -h merge ];
  then
    echo "scripts/merge link already existing."
  else
    echo "Removing merge directory in local ~/2dx/scripts"
    \rm -rf merge
  fi
  if [ ! -h merge ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/scripts/merge .
    ls -ld merge
  fi
  #
  ls -ld singleparticle
  if [ -h singleparticle ];
  then
    echo "scripts/singleparticle link already existing."
  else
    echo "Removing singleparticle directory in local ~/2dx/scripts"
    \rm -rf singleparticle
  fi
  if [ ! -h singleparticle ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/scripts/singleparticle .
    ls -ld singleparticle
  fi
  #
  ls -ld proc 
  if [ -h proc  ];
  then
    echo "scripts/proc  link already existing."
  else
    echo "Removing proc  directory in local ~/2dx/scripts"
    \rm -rf proc 
  fi
  if [ ! -h proc  ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/scripts/proc  .
    ls -ld proc 
  fi
  #
  ls -ld project
  if [ -h project ];
  then
    echo "scripts/project link already existing."
  else
    echo "Removing project directory in local ~/2dx/scripts"
    \rm -rf project
  fi
  if [ ! -h project ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ${SRC}/scripts/project .
    ls -ld project
  fi
  #
  echo "done."
fi

exit 0
