#!/bin/bash
#
# Build everything in the right order
#
# The args are passed to cmake

################################################################################
# Configuration
################################################################################

# Set the default gravis prefix
PREFIX=$1

echo '*============================================================================*'
echo '| Configuration								   |'
echo '+----------------------------------------------------------------------------+'
echo '|                                                                            |'

if [ $# -lt 1 ]
then
	echo 'No prefix is specified, the default prefix PREFIX='$HOME'/2dx is met'
       	PREFIX=~/2dx	
fi

if [ $# -eq 2 ];
then
	APPLE_BUNDLE=$2
else
	APPLE_BUNDLE=OFF
fi


# And create build dirs here
BUILD=$PREFIX
SRC=$(pwd)
BUILD_LIST="
lib/src/conf 
lib/src/extentions 
lib/src/mrcImage 
lib/src/widgets
"

echo 'The build dir is' ${BUILD}
# check if the build dir exists
if [ ! -e $BUILD ]; then
	echo 'The build dir does not exist, therefore it will be created.' 
	mkdir -p $BUILD
fi

echo 'The source dir is' ${SRC}
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''

################################################################################
# Fortran
################################################################################
APP=kernel/mrc
echo '*============================================================================*'
echo '| ' ${APP}
echo '+----------------------------------------------------------------------------+'
echo '| prepare                                                                    |'
cd ${SRC}/${APP}
echo 'workinkg directory: '
pwd
echo '+----------------------------------------------------------------------------+'
echo '| autoconf                                                                   |'
echo autoconf || (echo "autoconf failed for" $APP ; read)
autoconf || (echo "autoconf failed for" $APP ; read)
echo '+----------------------------------------------------------------------------+'
echo '| configure                                                                  |'
echo ./configure || (echo "Configure failed for" $APP ; read)
./configure || (echo "Configure failed for" $APP ; read)
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make                                                                       |'
make VERBOSE=1 -j1 || (echo "Build failed for $APP"; read)
#echo ''
#echo '+----------------------------------------------------------------------------+'
#echo '| make install                                                               |'
#make VERBOSE=1 -j1 install || (echo "Install failed for $APP"; read)
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''


################################################################################
# CMake Tools
################################################################################

APP=cmake
echo '*============================================================================*'
echo '| ' ${APP}
echo '+----------------------------------------------------------------------------+'
echo '| prepare                                                                    |'
cd ${SRC}/tools/cmake
echo 'workinkg directory: '
pwd
echo '+----------------------------------------------------------------------------+'
echo '| configure                                                                  |'
echo cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} . || (echo "Configure failed for" $APP ; read)
cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} . || (echo "Configure failed for" $APP ; read)
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make                                                                       |'
make VERBOSE=1 -j1 || (echo "Build failed for $APP"; read)
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make install                                                               |'
make VERBOSE=1 -j1 install || (echo "Install failed for $APP"; read)
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''

################################################################################
# Libs
################################################################################


for TARGET in $BUILD_LIST
do
	  APP=$(echo $TARGET | awk -F/ '{print $NF}')
          echo '*============================================================================*'
          echo '| ' ${APP}
          echo '+----------------------------------------------------------------------------+'
          echo '| prepare                                                                    |'
          cd ${SRC}/${TARGET} || (echo "Build failed for $APP, it seems the sources are not in ${SRC}/${APP}."; read)
          mkdir -p ${BUILD}/${APP}
          cd ${BUILD}/${APP}
          echo ''
          echo '+----------------------------------------------------------------------------+'
          echo '| configure                                                                  |'
          echo cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_MODULE_PATH=${PREFIX}/cmake ${*} ${SRC}/${TARGET} || (echo "Configure failed for $APP"; read)
          cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_MODULE_PATH=${PREFIX}/cmake ${*} ${SRC}/${TARGET} || (echo "Configure failed for $APP"; read)
          echo ''
          echo '+----------------------------------------------------------------------------+'
          echo '| make                                                                       |'
          make VERBOSE=1 -j1 || (echo "Build failed for $APP"; read)
          echo ''
          echo '+----------------------------------------------------------------------------+'
          echo '| make install                                                               |'
          make VERBOSE=1 -j1 install || (echo "Install failed for $APP"; read)
          echo '*============================================================================*'
          echo ''
          echo ''
          echo ''
          echo ''
 
done

#################################################################################
# 2DX 
################################################################################

APP=2dx
echo '*============================================================================*'
echo '| ' ${APP}
echo '+----------------------------------------------------------------------------+'
echo '| prepare                                                                    |'
cd ${SRC}
echo 'workinkg directory: '
pwd
echo '+----------------------------------------------------------------------------+'
echo '| configure                                                                  |'
echo cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} . || (echo "Configure failed for" $APP ; read)
cmake -DCMAKE_INSTALL_PREFIX=${PREFIX} -DAPPLE_BUNDLE=${APPLE_BUNDLE} . || (echo "Configure failed for" $APP ; read)
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make                                                                       |'
make VERBOSE=1 -j1 || (echo "Build failed for $APP"; read)
echo ''
echo '+----------------------------------------------------------------------------+'
echo '| make install                                                               |'
make VERBOSE=1 -j1 install || (echo "Install failed for $APP"; read)
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''
 
cd ${BUILD}

###############################################################################
# Postflight 
################################################################################

echo '*============================================================================*'
echo '| Postflight								   |'
echo '+----------------------------------------------------------------------------+'
echo '| prepare                                                                    |'
cd ${PREFIX}
echo 'workinkg directory: '
pwd
echo '+----------------------------------------------------------------------------+'
echo '| creating symbolic links                                                    |'
ln -sFhv kernel/config config
ln -sFhv kernel/proc proc
ln -sFhv ../kernel/2dx_image/scripts-standard 2dx_image/scripts-standard
ln -sFhv ../kernel/2dx_image/scripts-custom 2dx_image/scripts-custom
ln -sFhv ../kernel/2dx_merge/scripts-standard 2dx_merge/scripts-standard
ln -sFhv ../kernel/2dx_merge/scripts-custom 2dx_merge/scripts-custom
ln -sFhv ../kernel/mrc/bin 2dx_image/bin
ln -sFhv ../kernel/mrc/bin 2dx_merge/bin
echo '+----------------------------------------------------------------------------+'
echo '*============================================================================*'
echo ''
echo ''
echo ''
echo ''

cd ${BUILD}

################################################################################
# Replacing local "kernel" in installation site with link to svn-repository copy
################################################################################

S2='henning'
S3='sthennin'
if [ "$USER" == "$S2" ] || [ "$USER" == "$S3" ];
then
  echo User = $USER
  cd ~/2dx
  ls -ld kernel
  if [ -h kernel ];
  then
    echo "Link already existing."
  else
    echo "Removing kernel directory in local ~/2dx"
    \rm -rf kernel
  fi
  if [ ! -h kernel ];
  then
    echo "Replacing with link to svn-repository"
    \ln -s ~/Projects/repos/2dx/trunk/kernel .
  fi
  ls -ld kernel
  echo "done."
fi


cd ${BUILD}


