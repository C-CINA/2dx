#!/bin/csh -ef
#############################################################################
#                                                                           #
# Title: ML-3D (experimental)                                               #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 05/19/2007                                             #
# Last Modification: 05/19/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 10
#
# MANUAL: This script will run a maximum likelihood processing on all selected images.
#
# GLOBAL: ML_doMLorCC
# GLOBAL: RESMIN
# GLOBAL: RESMAX
# GLOBAL: SYM
# GLOBAL: ALAT
# GLOBAL: tempfac
# GLOBAL: tempkeep
# GLOBAL: ctfrev
# GLOBAL: realang
# GLOBAL: realcell
# GLOBAL: ML_realcellxy_outer
# GLOBAL: ML_realcellxy_inner
# GLOBAL: ML_mask_radius
# GLOBAL: ML_iteration
# GLOBAL: ML_threshold_method
# GLOBAL: ML_absolute_threshold
# GLOBAL: ML_relative_threshold
# GLOBAL: ML_ref_ind
# GLOBAL: ML_do_whiten
# GLOBAL: ML_correct_CTF
# GLOBAL: ML_rotational_symmetry
# GLOBAL: ML_MinMaxStep_angle
# GLOBAL: ML_terminate_ML
# GLOBAL: ML_lp_method
# GLOBAL: ML_lp_radius
# GLOBAL: ML_B_factor
# GLOBAL: ML_A_factor
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set imagename = ""
set imagenumber = ""
set defocus = ""
set imagenumber = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set phacon = ""
set CS = ""
set KV = ""
set ALAT = ""
set lattice = ""
set realang = ""
set realcell = ""
set ctfrev = ""
set phaori = ""
set lattice = ""
set ML_doMLorCC = ""
set ML_realcellxy_outer = ""
set ML_realcellxy_inner=""
set ML_mask_radius = ""
set ML_iteration = ""
set ML_threshold_method = ""
set ML_absolute_threshold = ""
set ML_relative_threshold = ""
set ML_ref_ind = ""
set ML_do_whiten = ""
set ML_correct_CTF = ""
set ML_rotational_symmetry = ""
set ML_MinMaxStep_angle = ""
set ML_terminate_ML = ""
set ML_lp_method = ""
set ML_lp_radius = ""
set ML_B_factor = ""
set ML_A_factor = ""
set rot180 = ""
set revhk = ""
set rot90 = ""
set beamtilt = ""
set zstarwin = ""
set tempfac = ""
set TLTAXIS = ""
set TLTANG = ""
set TLTAXA = ""
set TAXA = ""
set TANGL = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
#
#$end_vars
#
echo "<<@progress: 1>>"
#
set scriptname = 2dx_MaximumLikelihood
\rm -f LOGS/${scriptname}.results
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
${proc_2dx}/2dx_makedirs 
#
#echo ML_whitefirst = ${ML_whitefirst}
echo ML_doMLorCC = ${ML_doMLorCC}
#
set defocus_nokomma = `echo ${defocus} | sed 's/,/ /g'`
#set ML_oversizexy_nokomma = `echo ${ML_oversizexy} | sed 's/,/ /g'`
#set ML_realcellxy_inner_nokomma = `echo ${ML_realcellxy_inner} | sed 's/,/ /g'`
set ML_realcellxy_outer_nokomma = `echo ${ML_realcellxy_outer} | sed 's/,/ /g'`
set ML_MinMaxStep_angle_nokomma = `echo ${ML_MinMaxStep_angle} | sed 's/,/ /g'`
set lattice_nokomma = `echo ${lattice} | sed 's/,/ /g'`
set phaori_nokomma = `echo ${phaori} | sed 's/,/ /g'`
#
if ( ${ML_do_whiten} == 'y' ) then
  set ML_do_whiten_val = "1"
else
  set ML_do_whiten_val = "0"
endif
#
if ( ${ML_correct_CTF} == 'y' ) then
  set ML_correct_CTF_val = "1"
else
  set ML_correct_CTF_val = "0"
endif
#
if ( ${ctfrev} == "y" ) then
  set contrast_val = "-1"
else
  set contrast_val = "1"
endif
#
if ( ${ML_rotational_symmetry} == "0" ) then
  set ML_rotational_symmetry_val = 1
else if ( ${ML_rotational_symmetry} == "1" ) then
  set ML_rotational_symmetry_val = 2
else if( ${ML_rotational_symmetry} == "2" ) then
  set ML_rotational_symmetry_val = 3
else if( ${ML_rotational_symmetry} == "3" ) then
  set ML_rotational_symmetry_val = 4
else if( ${ML_rotational_symmetry} == "4" ) then
  set ML_rotational_symmetry_val = 6
endif
#
set date = `date`
echo date = ${date}
#
#############################################################################
echo ":: "
${proc_2dx}/linblock "Uncompressing all profiles"
echo ":: "
#############################################################################
#
\rm -f SCRATCH/2dx_merge_dirfile_oneline.dat
#
cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
#
# echo ":: dirlist = " ${dirlist}
#
foreach dirfile ( ${dirlist} ) 
  echo "::Working on ${dirfile}"
  echo dummy > ${dirfile}/dummy.dat.gz
  ls -1 ${dirfile}/*.dat.gz > tmp.tmp
  set isthere = `wc -l tmp.tmp | cut -f1 | awk '{ if ( $1 > 1 ) { s = 1 } else { s = 2 }} END { print s }'`
  \rm -f ${dirfile}/dummy.dat.gz tmp.tmp
  if ( ${isthere} == '1' ) then
    \mkdir -p ${dirfile}/temp/
    \cp -f ${dirfile}/*.dat.gz ${dirfile}/temp/
    gunzip -f ${dirfile}/temp/*.dat.gz
    \cp -f ${dirfile}/temp/*.dat ${dirfile}
    \rm -rf ${dirfile}/temp   
  endif
  \rm -f stack_ctf.binary
  \rm -f stack_whit.binary
end
#
#############################################################################
echo ":: "
${proc_2dx}/linblock "Creating image stacks"
echo ":: "
#############################################################################
#
set dirfile = "2dx_merge_dirfile.dat"
#
if ( ! -e ${dirfile} ) then
  ${proc_2dx}/protest "ERROR: 2dx_merge did not provide the directory list."
endif
#
if ( -z ${dirfile} ) then
  ${proc_2dx}/linblock "ERROR: Directory list is empty."
  ${proc_2dx}/protest "ERROR: Did you select directories?"
endif
#
pwd
#
${bin_2dx}/2dx_ML_stack.exe << eot
${proc_2dx}
${bin_2dx}
eot
#
echo "<<@progress: 20>"
#
#############################################################################
echo ":: "
${proc_2dx}/linblock "Running ML processing with all stacks"
echo ":: "
#############################################################################
#
set dirfile = "2dx_merge_dirfile.dat"
#
if ( ! -e ${dirfile} ) then
  ${proc_2dx}/protest "ERROR: 2dx_merge did not provide the directory list."
endif
#
if ( -z ${dirfile} ) then
  ${proc_2dx}/linblock "ERROR: Directory list is empty."
  ${proc_2dx}/protest "ERROR: Did you select directories?"
endif
#
#
echo "# IMAGE-IMPORTANT: APH/${imagename}.cor.aph <APH: Unbending Amp&Phase File>" >> LOGS/${scriptname}.results
echo "# IMAGE-IMPORTANT: PS/${imagename}MAP-p1.ps <PS: Unbending MAP in p1>" >> LOGS/${scriptname}.results
echo "# IMAGE-IMPORTANT: ${imagename}-p1.mrc <Unbending MAP in p1>" >> LOGS/${scriptname}.results
#
#
echo dummy > SCRATCH/ML_reference_1.mrc
\rm -f ML_result_noEnvelope.mrc
\rm -f ML_result_withEnvelope.mrc
\rm -f ML_result_ref_even.mrc
\rm -f ML_result_ref_odd.mrc
\rm -f SCRATCH/ML_reference_*.mrc
#
#
${bin_2dx}/2dx_ML_merge.exe << eot
LOGS/${scriptname}.results
eot
#
#
set aphfile = "APH/ML_result.aph"
if ( ! -e ${aphfile} ) then
  ${proc_2dx}/protest "ERROR: ${aphfile} does not exist. Problem in ML."
endif
#
#
echo "<<@progress: 90>>"
#
#############################################################################
${proc_2dx}/linblock "Cleaning up some files"
##############################################################################
#
foreach dirfile ( ${dirlist} ) 
  echo ":Working on ${dirfile}"
  echo dummy > ${dirfile}/dummy-profile.dat
  \rm -f ${dirfile}/*-profile.dat
  \rm -f stack_ctf.binary
  \rm -f stack_whit.binary
end
#
\rm -f 2dx_merge_dirfile_temp.dat
\rm -f SCRATCH/2dx_merge_dirfile_oneline.dat
#
echo "set ML_done = y" >> LOGS/${scriptname}.results
#
############################################################################# 
${proc_2dx}/linblock "${scriptname} finished correctly."
##############################################################################
#
echo "<<@progress: 100>>"
#
