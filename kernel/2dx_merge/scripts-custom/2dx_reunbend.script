#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: (Re)Process all images                                             #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 20/09/2007                                             #
# Last Modification: 20/09/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 2
#
# MANUAL: This script allows to reunbend all images, using the merged dataset as synthetical reference
#
# MANUAL: <B>BEWARE: Using a 3D structure as reference for iterative unbending introduces massive reference bias. The IQ statistics may look better, but the results might actually be non-interpretable and therefore worse. A clean FOM weighting of conventionally unbent images (using the Fourier filtered image as reference) may give more reliable data in the end.  Use this script at your own risk, and make sure you backup all data before, so that you can get back to the earlier state.</B>
#
#
# MANUAL: Before you can use this script, you should have all available images merged into a reliable 2D or 3D data set. You should then backup the current state of the project (Custom Script "Backup Project"). Then switch all selected images to "Use Synthetic Reference", by running the custom script "Refresh Databases", in which you can for all images set the variable SYN_Unbending to "1". 
#
# MANUAL: To do so, uncomment the line <BR><I>echo "set SYN_Unbending = 1" >> LOGS/${scriptname}.results</I><BR>, and run that custom script. 
#
# MANUAL: Now you can run this standard script "Re-Unbend", to re-unbend all selected images with the merged dataset as reference.  This should give better values than the Fourier filtered unbending. Otherwise, there is something wrong with either the merged reference, or the tilt geometry, or the phase origin, or still something else.
#
# DISPLAY: ReUnbend_All
# DISPLAY: ReUnbend_MP
# DISPLAY: automatic_target_dir
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set app_2dx_image = ""
#
set ReUnbend_All = ""
set ReUnbend_MP = ""
set automatic_target_dir = ""
#
#$end_vars
#
#
set scriptname = 2dx_reunbend
\rm -f LOGS/${scriptname}.results
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
echo "<<@progress: 1>>"
#
if ( ${ReUnbend_All} == "0" ) then
  ${proc_2dx}/protest "Nothing done here."
endif
#
set olddir = ${PWD}
cd ..
set rootdir = ${PWD}
#
if ( ${ReUnbend_All} == "1" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Setting all images to Fourier Filtration Reference processing"
  ############################################################################# 
  #
  cd ${olddir} 
  #
  cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
  set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
  #
  foreach dirfile ( ${dirlist} ) 
    cd ..
    cd ${dirfile}
    set newdir = $PWD
    cd ${olddir}
    echo "::Working on ${newdir}"
    # This tells the 2dx_merge GUI that the following variable output concerns the image "newdir":
    echo "<IMAGEDIR="\"${newdir}\"">" >> LOGS/${scriptname}.results
    echo "set dummy = 1" >> LOGS/${scriptname}.results
    echo "set -force SYN_Unbending = 0" >> LOGS/${scriptname}.results
    echo "set tempkeep = n" >> LOGS/${scriptname}.results
    echo "</IMAGEDIR>" >> LOGS/${scriptname}.results
  end
endif
#
if ( ${ReUnbend_All} == "2" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Setting all images to Synthetic Reference processing, and Refine_Lattice to NO"
  ############################################################################# 
  #
  cd ${olddir} 
  #
  cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
  set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
  #
  foreach dirfile ( ${dirlist} ) 
    cd ..
    cd ${dirfile}
    set newdir = $PWD
    cd ${olddir}
    echo "::Working on ${newdir}"
    echo "<IMAGEDIR="\"${newdir}\"">" >> LOGS/${scriptname}.results
    echo "set dummy = 1" >> LOGS/${scriptname}.results
    echo "set -force SYN_Unbending = 1" >> LOGS/${scriptname}.results
    echo "set -force Refine_Lattice = 0" >> LOGS/${scriptname}.results
    echo "set tempkeep = n" >> LOGS/${scriptname}.results
    echo "</IMAGEDIR>" >> LOGS/${scriptname}.results
  end
endif
#
if ( ${ReUnbend_All} == "3" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Processing in all selected directories"
  ############################################################################# 
  #
  cd ${olddir} 
  #
  cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
  set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
  #
  foreach dirfile ( ${dirlist} ) 
    cd ${olddir}
    cd ..
    cd ${dirfile}
    if ( -e 2dx_image.cfg ) then
      echo ":: "
      ${proc_2dx}/linblock "Working on ${dirfile}"
      set curdir = ${PWD}
      echo ":: ${app_2dx_image} ${curdir} "'"*"'
      ${app_2dx_image} ${curdir} '"*"'
      echo ":: Done."
    else
      echo "::ERROR for ${dirfile}: No 2dx_image.cfg found."
    endif
    # 
    cd ${olddir}
  end
endif
#
if ( ${ReUnbend_All} == "4" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Processing custom scripts in all selected directories in ${ReUnbend_MP} jobs"
  ############################################################################# 
  #
  cd ${olddir} 
  #
  echo ${ReUnbend_MP} > TMP.ReUnbend_MP.tmp
  echo ":: "
  echo ":: "
  echo ":: Saving Target Load (${ReUnbend_MP}) into file TMP.ReUnbend_MP.tmp"
  echo ":: "
  echo ":: "
  set loadaverage = `uptime | cut -d\: -f4 | cut -d\  -f2`
  set loadaverage = `ps -af | grep ${scriptname}.com | wc -l`
  #
  set dirnum = `cat 2dx_merge_dirfile.dat | wc -l`
  echo ": Will work on ${dirnum} image directories."
  #
  \cp -f 2dx_merge_dirfile.dat SCRATCH/2dx_merge_dirfile_runfile.dat
  #
  set dircounter = 1
  while ( ${dircounter} <= ${dirnum} )
    #
    set prog_num = `echo ${dircounter} ${dirnum} | awk '{ s = 5 + int( 90 * $1 / $2 ) } END { print s }'` 
    echo "<<@progress: ${prog_num}>>"
    #
    cd ${olddir}
    ${bin_2dx}/2dx_getline.exe << eot > TMP.tmp
SCRATCH/2dx_merge_dirfile_runfile.dat
${dircounter}
eot
    #
    set dirfile = `cat TMP.tmp`
    \rm TMP.tmp
    #
    cd ..
    cd ${dirfile}
    if ( -e 2dx_image.cfg ) then
      echo ": "
      set curdir = ${PWD}
      set QVALMA_local = `cat 2dx_image.cfg | grep "set QVALMA =" | cut -d\" -f2`
      set QVALMB_local = `cat 2dx_image.cfg | grep "set QVALMB =" | cut -d\" -f2`
      # echo ":: QVALMA_local = ${QVALMA_local}" 
      if ( ${QVALMA_local}x == "x"  || ${QVALMA_local}x == ".x" ||  ${QVALMA_local}x == "0.00x" ||  ${QVALMB_local}x == "x"  || ${QVALMB_local}x == ".x" ||  ${QVALMB_local}x == "0.00x" ) then
        echo "Working on " ${curdir}

        ${proc_2dx}/linblock "At load ${loadaverage}/${ReUnbend_MP}, launching job ${dircounter} of ${dirnum} on ${dirfile}"

        nohup ${app_2dx_image} ${curdir} "2dx_initialize"; ${app_2dx_image} ${curdir} "2dx_fftrans"; ${app_2dx_image} ${curdir} "2dx_getSampleTilt"; ${app_2dx_image} ${curdir} "2dx_getspots1"; ${app_2dx_image} ${curdir} "2dx_ctfcor"; ${app_2dx_image} ${curdir} "2dx_unbend1"; ${app_2dx_image} ${curdir} "2dx_getspots"; ${app_2dx_image} ${curdir} "2dx_unbend2"; ${app_2dx_image} ${curdir} "2dx_unbend_movie1a"; ${app_2dx_image} ${curdir} "2dx_unbend_movie1b"; ${app_2dx_image} ${curdir} "2dx_unbend_movie2"; ${app_2dx_image} ${curdir} "2dx_applyCTF"; ${app_2dx_image} ${curdir} "2dx_generateMAP" ;  echo ":: Background process finished with ${dirfile}" &

        cd ${olddir}
        set load_too_high = 1
        while ( ${load_too_high} == 1 ) 
          sleep 20
          # set loadaverage = `uptime | cut -d\: -f4 | cut -d\  -f2`
          set loadaverage = `ps -af | grep ${scriptname}.com | wc -l`
          set ReUnbend_MP = `cat TMP.ReUnbend_MP.tmp`
          set load_too_high = `echo ${loadaverage} ${ReUnbend_MP} | awk '{ if ( $1 > $2 ) { s = 1 } else { s = 0 } } END { print s }'`
        end

      else
        echo ": Skipping ${dirfile}: QVALMA = ${QVALMA_local},  QVALMB = ${QVALMB_local}"
      endif
    else
      echo "::ERROR for ${dirfile}: No 2dx_image.cfg found."
    endif
    # 
    # 
    @ dircounter++
    cd ${olddir}
  end
endif
#
if ( ${ReUnbend_All} == "5" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Processing all standard scripts in directories ${automatic_target_dir} in ${ReUnbend_MP} jobs"
  ############################################################################# 
  #
  cd ${olddir} 
  if ( ! -d ${automatic_target_dir} ) then
    ${proc_2dx}/protest "ERROR: Directory not found: ${automatic_target_dir}"
  endif
  #
  cd ${automatic_target_dir}
  find . -name 2dx_image.cfg -print | sed 's/\/2dx_image.cfg//' > ${olddir}/2dx_merge_special.dat
  cd ${olddir}
  #
  set dirnum = `cat 2dx_merge_special.dat | wc -l`
  echo ": Will work on ${dirnum} image directories."
  #
  set irun = 1
  set sleeptime = 10
  #
  set dircounter = 1
  while ( ${dircounter} <= ${dirnum} )
    #
    set prog_num = `echo ${dircounter} ${dirnum} | awk '{ s = 5 + int( 90 * $1 / $2 ) } END { print s }'` 
    echo "<<@progress: ${prog_num}>>"
    #
    set ReUnbend_old = ${ReUnbend_MP}
    set ReUnbend_tmp = `cat 2dx_merge.cfg | grep "set ReUnbend_MP" | cut -d\" -f2`
    set ReUnbend_MP = `echo ${ReUnbend_tmp} | awk '{ if ( $1 < 1 ) { s = 1 } else { if ( $1 > 12 ) { s = 12 } else { s = $1 } } } END { print s }'`
    if ( ${ReUnbend_old} != ${ReUnbend_MP} ) then
      echo ":: "
      echo ":: Changing number of parallel processes to ${ReUnbend_MP}."
      echo ":: "
    endif
    #
    ${bin_2dx}/2dx_getline.exe << eot > TMP.tmp
${olddir}/2dx_merge_special.dat
${dircounter}
eot
    #
    set dirfile = `cat TMP.tmp`
    \rm TMP.tmp
    #
    cd ${automatic_target_dir}
    cd ${dirfile}
    if ( -e 2dx_image.cfg ) then
      echo ": "
      set curdir = ${PWD}
      set QVALS_local = `cat 2dx_image.cfg | grep "set QVALS =" | cut -d\" -f2`
      # echo ":: QVALS_local = ${QVALS_local}" 
      if ( ${QVALS_local} == "." ) then
        echo ": ${app_2dx_image} ${curdir} "'"*"'
        if( ${irun} < ${ReUnbend_MP} ) then
          ${proc_2dx}/linblock "${irun} of ${ReUnbend_MP} into background: Working on ${dirfile}"
          nohup sleep ${sleeptime} ; ${app_2dx_image} ${curdir} '"*"' &
          @ sleeptime += ${ReUnbend_MP} 
          @ irun++
        else
          ${proc_2dx}/linblock "${irun} of ${ReUnbend_MP} into foreground: Working on ${dirfile}"
          ${app_2dx_image} ${curdir} '"*"'
          set irun = 1
          set sleeptime = 10
        endif
        echo ": Done with ${dirfile}"
      else
        echo ": Skipping ${dirfile}"
      endif
    else
      echo "::ERROR for ${dirfile}: No 2dx_image.cfg found."
    endif
    # 
    @ dircounter += 1
    cd ${olddir}
  end
endif
#
if ( ${ReUnbend_All} == "6" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Refining defocus in all selected directories"
  ############################################################################# 
  #
  cd ${olddir} 
  #
  cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
  set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
  #
  foreach dirfile ( ${dirlist} ) 
    cd ${olddir}
    cd ..
    cd ${dirfile}
    if ( -e 2dx_image.cfg ) then
      echo ":: "
      ${proc_2dx}/linblock "Working on ${dirfile}"
      set curdir = ${PWD}
      ${app_2dx_image} ${curdir} "2dx_initialize"
      ${app_2dx_image} ${curdir} "2dx_initialize_files"
      ${app_2dx_image} ${curdir} "2dx_fftrans"
      ${app_2dx_image} ${curdir} "+2dx_refinedefocus"
      ${app_2dx_image} ${curdir} '"*"'
      echo ":: Done."
    else
      echo "::ERROR for ${dirfile}: No 2dx_image.cfg found."
    endif
    # 
    cd ${olddir}
  end
endif
#
if ( ${ReUnbend_All} == "7" ) then
  #
  ############################################################################# 
  ${proc_2dx}/linblock "Processing specific scripts in directories ${automatic_target_dir}"
  ${proc_2dx}/linblock "Running ${ReUnbend_MP} jobs in parallel."
  ############################################################################# 
  #
  cd ${olddir} 
  if ( ! -d ${automatic_target_dir} ) then
    ${proc_2dx}/protest "ERROR: Directory not found: ${automatic_target_dir}"
  endif
  #
  cd ${automatic_target_dir}
  find . -name 2dx_image.cfg -print | grep -v frames | sed 's/\/2dx_image.cfg//' > ${olddir}/2dx_merge_special.dat
  cd ${olddir}
  #
  set dirnum = `cat 2dx_merge_special.dat | wc -l`
  echo ": Will work on ${dirnum} image directories."
  #
  set irun = 1
  set sleeptime = 10
  #
  set dircounter = 1
  while ( ${dircounter} <= ${dirnum} )
    #
    set prog_num = `echo ${dircounter} ${dirnum} | awk '{ s = 5 + int( 90 * $1 / $2 ) } END { print s }'` 
    echo "<<@progress: ${prog_num}>>"
    #
    # set ReUnbend_old = ${ReUnbend_MP}
    # set ReUnbend_tmp = `cat 2dx_merge.cfg | grep "set ReUnbend_MP" | cut -d\" -f2`
    # echo "ReUnbend_tmp =" ${ReUnbend_tmp}
    # set ReUnbend_MP = `echo ${ReUnbend_tmp} | awk '{ if ( $1 < 1 ) { s = 1 } else { if ( $1 > 12 ) { s = 12 } else { s = $1 } } } END { print s }'`
    # if ( ${ReUnbend_old} != ${ReUnbend_MP} ) then
    #   echo ":: "
    #   echo ":: Changing number of parallel processes to ${ReUnbend_MP}."
    #   echo ":: "
    # endif
    #
    ${bin_2dx}/2dx_getline.exe << eot > TMP.tmp
${olddir}/2dx_merge_special.dat
${dircounter}
eot
    #
    set dirfile = `cat TMP.tmp`
    \rm TMP.tmp
    #
    cd ${automatic_target_dir}
    cd ${dirfile}
    if ( -e 2dx_image.cfg ) then
      echo ": "
      set curdir = ${PWD}
      set QVALMA_local = `cat 2dx_image.cfg | grep "set QVALMA =" | cut -d\" -f2`
      set QVALMB_local = `cat 2dx_image.cfg | grep "set QVALMB =" | cut -d\" -f2`
      # echo ":: QVALMA_local = ${QVALMA_local}" 
      if ( ${QVALMA_local}x == "x"  || ${QVALMA_local}x == ".x" ||  ${QVALMA_local}x == "0.00x" ||  ${QVALMB_local}x == "x"  || ${QVALMB_local}x == ".x" ||  ${QVALMB_local}x == "0.00x" ) then
        echo "Working on " ${curdir}
        if( ${irun} < ${ReUnbend_MP} ) then
          ${proc_2dx}/linblock "${irun} of ${ReUnbend_MP} into background: Working on ${dirfile}"

          nohup sleep ${sleeptime}; ${app_2dx_image} ${curdir} "2dx_initialize"; ${app_2dx_image} ${curdir} "2dx_fftrans";  ${app_2dx_image} ${curdir} "2dx_getSampleTilt"; ${app_2dx_image} ${curdir} "2dx_getspots1"; ${app_2dx_image} ${curdir} "2dx_ctfcor"; ${app_2dx_image} ${curdir} "2dx_unbend1"; ${app_2dx_image} ${curdir} "2dx_getspots"; ${app_2dx_image} ${curdir} "2dx_unbend2"; ${app_2dx_image} ${curdir} "2dx_unbend_movie1a"; ${app_2dx_image} ${curdir} "2dx_unbend_movie1b"; ${app_2dx_image} ${curdir} "2dx_unbend_movie2"; ${app_2dx_image} ${curdir} "2dx_applyCTF"; ${app_2dx_image} ${curdir} "2dx_generateMAP" ;  echo ":: Background process finished with ${dirfile}" &

          @ sleeptime += 20 
          @ irun++
        else
          ${proc_2dx}/linblock "${irun} of ${ReUnbend_MP} into foreground: Working on ${dirfile}"

          ${app_2dx_image} ${curdir} "2dx_initialize"
          ${app_2dx_image} ${curdir} "2dx_fftrans"
          ${app_2dx_image} ${curdir} "2dx_getSampleTilt"
          ${app_2dx_image} ${curdir} "2dx_getspots1"
          ${app_2dx_image} ${curdir} "2dx_ctfcor"
          ${app_2dx_image} ${curdir} "2dx_unbend1"
          ${app_2dx_image} ${curdir} "2dx_getspots"
          ${app_2dx_image} ${curdir} "2dx_unbend2"

          ${app_2dx_image} ${curdir} "2dx_unbend_movie1a"
          ${app_2dx_image} ${curdir} "2dx_unbend_movie1b"
          ${app_2dx_image} ${curdir} "2dx_unbend_movie2"

          ${app_2dx_image} ${curdir} "2dx_applyCTF"
          ${app_2dx_image} ${curdir} "2dx_generateMAP"
          echo ":: Foreground process finished with ${dirfile}"
          set irun = 1
          set sleeptime = 10
        endif
      else
        echo ": Skipping ${dirfile}: QVALMA = ${QVALMA_local},  QVALMB = ${QVALMB_local}"
      endif
    else
      echo "::ERROR for ${dirfile}: No 2dx_image.cfg found."
    endif
    # 
    @ dircounter += 1
    cd ${olddir}
  end
endif
#
#
echo "<<@progress: 100>>"
#
############################################################################# 
${proc_2dx}/linblock "Done. Script finished correctly."
#############################################################################
#
#
#
