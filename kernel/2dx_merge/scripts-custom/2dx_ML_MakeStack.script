#!/bin/csh -ef
#############################################################################
#                                                                           #
# Title: ML 3D Create Stack (not yet implemented)                           #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 11/19/2011                                             #
# Last Modification: 11/19/2011                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 08
#
# MANUAL: This script will create single particle stacks from all selected images.
#
# DISPLAY: ML_doMLorCC
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: SYM
# DISPLAY: ALAT
# DISPLAY: tempfac
# DISPLAY: tempkeep
# DISPLAY: ctfrev
# DISPLAY: realang
# DISPLAY: realcell
# DISPLAY: ML_realcellxy_outer
# DISPLAY: ML_realcellxy_inner
# DISPLAY: ML_mask_radius
# DISPLAY: ML_iteration
# DISPLAY: ML_threshold_method
# DISPLAY: ML_absolute_threshold
# DISPLAY: ML_relative_threshold
# DISPLAY: ML_ref_ind
# DISPLAY: ML_do_whiten
# DISPLAY: ML_correct_CTF
# DISPLAY: ML_rotational_symmetry
# DISPLAY: ML_MinMaxStep_angle
# DISPLAY: ML_terminate_ML
# DISPLAY: ML_lp_method
# DISPLAY: ML_lp_radius
# DISPLAY: ML_B_factor
# DISPLAY: ML_A_factor
# DISPLAY: SCRATCH_DISK
# DISPLAY: FFTIR_DISK
# DISPLAY: Thread_Number
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set app_2dx_image = ""
set SCRATCH_DISK = ""
set FFTIR_DISK = ""
set Thread_Number = ""
#
set imagename = ""
set imagenumber = ""
set defocus = ""
set imagenumber = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set phacon = ""
set CS = ""
set KV = ""
set ALAT = ""
set lattice = ""
set realang = ""
set realcell = ""
set ctfrev = ""
set phaori = ""
set lattice = ""
set ML_doMLorCC = ""
set ML_realcellxy_outer = ""
set ML_realcellxy_inner=""
set ML_mask_radius = ""
set ML_iteration = ""
set ML_threshold_method = ""
set ML_absolute_threshold = ""
set ML_relative_threshold = ""
set ML_ref_ind = ""
set ML_do_whiten = ""
set ML_correct_CTF = ""
set ML_rotational_symmetry = ""
set ML_MinMaxStep_angle = ""
set ML_terminate_ML = ""
set ML_lp_method = ""
set ML_lp_radius = ""
set ML_B_factor = ""
set ML_A_factor = ""
set rot180 = ""
set revhk = ""
set rot90 = ""
set beamtilt = ""
set zstarwin = ""
set tempfac = ""
set TLTAXIS = ""
set TLTANG = ""
set TLTAXA = ""
set TAXA = ""
set TANGL = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
#
#$end_vars
#
echo "<<@progress: 1>>"
#
set scriptname = 2dx_ML_MakeStack
\rm -f LOGS/${scriptname}.results
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
source ${proc_2dx}/2dx_makedirs 
#
#echo ML_whitefirst = ${ML_whitefirst}
echo ML_doMLorCC = ${ML_doMLorCC}
#
set defocus_nokomma = `echo ${defocus} | sed 's/,/ /g'`
#set ML_oversizexy_nokomma = `echo ${ML_oversizexy} | sed 's/,/ /g'`
#set ML_realcellxy_inner_nokomma = `echo ${ML_realcellxy_inner} | sed 's/,/ /g'`
set ML_realcellxy_outer_nokomma = `echo ${ML_realcellxy_outer} | sed 's/,/ /g'`
set ML_MinMaxStep_angle_nokomma = `echo ${ML_MinMaxStep_angle} | sed 's/,/ /g'`
set lattice_nokomma = `echo ${lattice} | sed 's/,/ /g'`
set phaori_nokomma = `echo ${phaori} | sed 's/,/ /g'`
#
if ( ${ML_do_whiten} == 'y' ) then
  set ML_do_whiten_val = "1"
else
  set ML_do_whiten_val = "0"
endif
#
if ( ${ML_correct_CTF} == 'y' ) then
  set ML_correct_CTF_val = "1"
else
  set ML_correct_CTF_val = "0"
endif
#
if ( ${ctfrev} == "y" ) then
  set contrast_val = "-1"
else
  set contrast_val = "1"
endif
#
if ( ${ML_rotational_symmetry} == "0" ) then
  set ML_rotational_symmetry_val = 1
else if ( ${ML_rotational_symmetry} == "1" ) then
  set ML_rotational_symmetry_val = 2
else if( ${ML_rotational_symmetry} == "2" ) then
  set ML_rotational_symmetry_val = 3
else if( ${ML_rotational_symmetry} == "3" ) then
  set ML_rotational_symmetry_val = 4
else if( ${ML_rotational_symmetry} == "4" ) then
  set ML_rotational_symmetry_val = 6
endif
#
set date = `date`
echo date = ${date}
#
# set system = `uname`
# if ( ${system} == "Darwin" ) then
#   say -v Alex "Sorry, I must reformat your harddrive." 
# endif
#
set user = `whoami`
if ( ${user} != 'sthennin' && ${user} != 'henning' ) then
  ${proc_2dx}/linblock "Not yet implemented. Use 2dx_image for ML processing in 2d."
  ${proc_2dx}/protest "Then merge conventionally in 2dx_merge."
endif
#
set oldir = `pwd`
#
#############################################################################
echo ":: "
${proc_2dx}/linblock "Uncompressing all profiles"
echo ":: "
#############################################################################
#
\rm -f SCRATCH/2dx_merge_dirfile_oneline.dat
#
cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
#
# echo ":: dirlist = " ${dirlist}
#
foreach dirfile ( ${dirlist} ) 
  echo ":: "
  echo "::Working on ${dirfile}"
  
  # Make sure the *.mrc file is existing:
  ${app_2dx_image} ${dirfile} "2dx_initialize_files.script"
  # cd ${dirfile}
  # \ls -l *.mrc
  # cd ${oldir}

  echo dummy > ${dirfile}/dummy.dat.gz
  ls -1 ${dirfile}/*.dat.gz > tmp.tmp
  set isthere = `wc -l tmp.tmp | cut -f1 | awk '{ if ( $1 > 1 ) { s = 1 } else { s = 2 }} END { print s }'`
  \rm -f ${dirfile}/dummy.dat.gz tmp.tmp
  if ( ${isthere} == '1' ) then
    \mkdir -p ${dirfile}/temp/
    \cp -f ${dirfile}/*.dat.gz ${dirfile}/temp/
    gunzip -f ${dirfile}/temp/*.dat.gz
    \cp -f ${dirfile}/temp/*.dat ${dirfile}
    \ls -l ${dirfile}/*profile.dat
    echo " "
    \rm -rf ${dirfile}/temp   

  endif
  \rm -f stack_ctf.binary
  \rm -f stack_whit.binary
end
#
#############################################################################
echo ":: "
${proc_2dx}/linblock "Creating image stacks"
echo ":: "
#############################################################################
#
set dirfile = "2dx_merge_dirfile.dat"
#
if ( ! -e ${dirfile} ) then
  ${proc_2dx}/protest "ERROR: 2dx_merge did not provide the directory list."
endif
#
if ( -z ${dirfile} ) then
  ${proc_2dx}/linblock "ERROR: Directory list is empty."
  ${proc_2dx}/protest "ERROR: Did you select directories?"
endif
#
echo "<<@progress: 30>"
#
pwd
#
${bin_2dx}/2dx_ML_stack_threads.exe << eot
${proc_2dx}
${bin_2dx}
eot
#
############################################################################# 
${proc_2dx}/linblock "${scriptname} finished correctly."
##############################################################################
#
echo "<<@progress: 100>>"
#
