#!/bin/csh -ef
#############################################################################
#                                                                           #
# Title: Custom Script 1                                                    #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 10/01/2007                                             #
# Last Modification: 10/01/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 40
#
# MANUAL: Adapt this script to do some task on all selected image directories.
#
# MANUAL: To do so, double-click on the script name in the "Customs Script" panel. Edit the script, save it, and use it for your purposes.
#
#$end_local_vars
#
# This defines some variables that we might need:
set proc_2dx = ""
set bin_2dx = ""
set app_2dx_image = ""
#
#$end_vars
#
# This sets the scriptname variable:
set scriptname = Custom-1
#
# This removes the old logfile, so that a new fresh one can be created:
\rm -f LOGS/${scriptname}.results
#
# This initializes the ccp4 environment, and other variables.
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
# This advances the progress bar to the 1% position:
echo "<<@progress: 1>>"
#
# This creates all needed subdirectories in the current merge directory, in case they are missing:
${proc_2dx}/2dx_makedirs 
#
# This translates the list of directories to work on into one single long line:
cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
#
# This memorizes the current merge directory under the variable "olddir":
set olddir = $PWD
#
# This initiates a big "foreach" loop that sets the variable "dirfile" to each of the items in the "dirlist" and runs the contents of the loop with this value:
foreach dirfile ( ${dirlist} ) 
  echo "::Working on ${dirfile}"
  # This tells the 2dx_merge GUI that the following variable output concerns the image "dirfile":
  echo "<IMAGEDIR="\"${dirfile}\"">" >> LOGS/${scriptname}.results
  echo "set dummy = 1" >> LOGS/${scriptname}.results
  #
  ################################################################################
  ######### Modify only the section below ########################################
  ################################################################################
  #
  # Use the following to invert the CTF in all directories, so that cryo setting is valid:
  # echo "set ctfrev = y" >> LOGS/${scriptname}.results

  # Use the following to activate the synthetic unbending in all directories:
  # echo "set SYN_Unbending = 0" >> LOGS/${scriptname}.results
  
  # Use the following to set have the resolution of the Nyquist frequency automatically determined:
  # echo "set ctfplotresmax = 0.0" >> LOGS/${scriptname}.results

  # Use the following to set all tilt angle and phase origin values to zero:
  # echo "set TAXA = 0.0" >> LOGS/${scriptname}.results
  # echo "set TANGL = 0.0" >> LOGS/${scriptname}.results
  # echo "set phaori = 0.0,0.0" >> LOGS/${scriptname}.results
  # echo "set phaoriFouFilter = 0.0,0.0" >> LOGS/${scriptname}.results

  # Use the following to run all standard 2dx_image scripts on the selected images:
  # ${app_2dx_image} ${dirfile} '"*"'

  # Use the following to apply the CTF to all selected images:
  # ${app_2dx_image} ${dirfile} "2dx_fftrans,2dx_refineLattice,+2dx_evaluateLattice,+2dx_fourierSpots"
  
  # Use the following to recalculate the TAXA and TANGL values for all selected images:
  # ${app_2dx_image} ${dirfile} "2dx_getSampleTilt"
 
  # Use the following to calculate the local real-space lattice for each selected image:
  # ${app_2dx_image} ${dirfile} "+2dx_evaluateLattice"
  
  # Use the following to lock certain variables, for example to lock the phase origin for the selected images:
  # This can be used to protect these phase origin settings, if you are happy with them and want to perform 
  # a coarse search for some other not yet correctly centered projection maps.
  #
  # echo "#lock phaori" >> LOGS/${scriptname}.results
  # echo "#lock phaoriFouFilter" >> LOGS/${scriptname}.results
 
  # Use the following to unlock these variables avain:
  # echo "#unlock phaori" >> LOGS/${scriptname}.results
  # echo "#unlock phaoriFouFilter" >> LOGS/${scriptname}.results
  #
  ################################################################################
  ######### Modify only the section above ########################################
  ################################################################################
  #
  # This tells 2dx_merge that the output for the image is done:
  echo "</IMAGEDIR>" >> LOGS/${scriptname}.results
end
#
# Move the progress bar to 100%:
echo "<<@progress: 100>>"
#
# Leave a message on the logfile that the script finished:
${proc_2dx}/linblock "${scriptname} finished correctly."
#
