#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Generate Merged Map                                                #
#                                                                           #
# 2dx.org, GNU Plublic License.                                             #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 09/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 90
#
# MANUAL: This script makes use of MRC and CCP4 commands to generate the final projection map.
#
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: SYM
# DISPLAY: ALAT
# DISPLAY: tempfac
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: realang
# DISPLAY: realcell
# DISPLAY: merge_modus
# DISPLAY: merge_modus
# DISPLAY: diffmap_doit
# DISPLAY: diffmap_source
# DISPLAY: diffmap_weight
# DISPLAY: produceSpiderMap
# DISPLAY: mapscale
# DISPLAY: unitcellnumber
# DISPLAY: npo_line1
# DISPLAY: npo_line2
# DISPLAY: calculate_subvolume
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set SCRATCH_DISK = ""
set FFTIR_DISK = ""
#
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set CS = ""
set KV = ""
set ALAT = ""
set realang = ""
set realcell = ""
set rot180 = ""
set revhk = ""
set rot90 = ""
set beamtilt = ""
set tempfac = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set merge_modus = ""
set det_tilt = ""
set merge_modus = ""
set diffmap_doit = ""
set diffmap_source = ""
set diffmap_weight = ""
set merge_ref_num = ""
set merge_comment_1 = ""
set merge_comment_2 = ""
set merge_comment_3 = ""
set merge_comment_4 = ""
set merge_comment_5 = ""
set merge_comment_6 = ""
set merge_comment_7 = ""
set merge_comment_8 = ""
set merge_comment_9 = ""
set merge_register_date_1 = ""
set merge_register_date_2 = ""
set merge_register_date_3 = ""
set merge_register_date_4 = ""
set merge_register_date_5 = ""
set merge_register_date_6 = ""
set merge_register_date_7 = ""
set merge_register_date_8 = ""
set merge_register_date_9 = ""
set produceSpiderMap = ""
set mapscale = ""
set unitcellnumber = ""
set npo_line1 = ""
set npo_line2 = ""
set calculate_subvolume = ""
#
#$end_vars
#
echo "<<@progress: 1>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set imagenumber = 1001
set imagename = "merge"
#
echo imagename = ${imagename}
echo imagenumber = ${imagenumber}
echo tempkeep = ${tempkeep}
echo RESMIN = ${RESMIN}
echo RESMAX = ${RESMAX}
echo CS = ${CS}
echo KV = ${KV}
echo ALAT = ${ALAT}
echo realang = ${realang}
echo realcell = ${realcell}
echo rot180 = ${rot180}
echo rot90 = ${rot90}
echo beamtilt = ${beamtilt}
echo tempfac = ${tempfac}
echo SYM = ${SYM}
echo avrgamphsNUMBER = ${avrgamphsNUMBER}
echo avrgamphsRESOL = ${avrgamphsRESOL}
echo diffmap_doit = ${diffmap_doit}
echo diffmap_source = ${diffmap_source}
echo diffmap_weight = ${diffmap_weight}
echo npo_line1 = ${npo_line1}
echo npo_line2 = ${npo_line2}
#
set scriptname = 2dx_generateMergeMap
#
source ${proc_2dx}/2dx_merge_makedirs 
#
\rm -f LOGS/${scriptname}.results
#
#
set date = `date`
echo date = ${date}
#
set IAQP2 = 0
set IVERBOSE = 1
set phastepnum = 1
set phastep = 0.1
#
if ( ${ALAT} == "0" || ${ALAT} == "0.0" ) then
  ${proc_2dx}/protest "ALAT is not defined."
endif
set ALATnew = `echo ${ALAT} | awk '{ if ( $1 < 0 ) { s = -$1 } else { s = $1 }} END { print s }'`
if ( ${ALAT} != ${ALATnew} ) then
  set ALAT = ${ALATnew}
  echo "set ALAT = ${ALAT}" >> LOGS/${scriptname}.results
endif
#
#???? Check this ???
set SCL = 1
echo "SCL = ${SCL}"
#
# contrast for grey plot
set scale = 1
echo "scale = ${scale}"
#
${proc_2dx}/linblock "Using the most recent merged dataset (from register 0)."
#
#############################################################################
${proc_2dx}/linblock "sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
set ABANG = `echo $realang | awk '{s=180-$1} END {print s}'`
echo ABANG = ${ABANG}
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
echo "<<@progress: +10>>"
#
# contrast for grey plot
set scale = 1
echo "scale = ${scale}"
#
\rm -f SCRATCH/scratch1.map
#
if ( ${merge_modus} == "3D" ) then
  #############################################################################
  #############################################################################
  #############################################################################
  # Here for 3D volume generation:
  #############################################################################
  #############################################################################
  #############################################################################
  #
  set infile = merge3Dref.mtz
  #
  echo "# IMAGE: PS/latline.ps <PS: Lattice lines (from last merging)>" >> LOGS/${scriptname}.results
  echo "# IMAGE: ${infile} <MTZ: input data for 3D (from last merging)>"  >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "sftools - to set amps to 1 and phases to 0 for PSF"
  #############################################################################  
  #
  \rm -f SCRATCH/merge3D_phase_zero.mtz
  #
  ${bin_ccp4}/sftools << eof
read merge3Dref.mtz
sort h k l 
set spacegroup
${CCP4_SYM}
select phaerr
select invert
purge
y
expand 1
calc COL F = FOM
calc COL PHI = 0
write SCRATCH/merge3D_phase_zero.mtz
quit
eof
  #
  echo "# IMAGE: SCRATCH/merge3D_phase_zero.mtz <MTZ: Phase Zero volume>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "fft - to transform SCRATCH/merge3D_phase_zero.mtz into SCRATCH/scratch1_phase_zero.map for PSF"
  #############################################################################  
  #
  ${proc_2dx}/lin "rotate_to_Z = ${rotate_to_Z}" 
  if (  ${rotate_to_Z} == "yes" ) then
    set AXIS = "Z,X,Y"
  else
    set AXIS = "X,Y,Z"
  endif
  #
  \rm -f SCRATCH/scratch1_phase_zero.map
  ${bin_ccp4}/fft hklin SCRATCH/merge3D_phase_zero.mtz mapout SCRATCH/scratch1_phase_zero.map  << eot
LABIN F1=F  PHI=PHI ##
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
SYMMETRY P1
RESOLUTION ${RESMIN} ${RESMAX}
TITLE PSF ${imagename}, ${SYM}, res=${RESMAX}, T=${tempfac}, ${date}
GRID 200 200 200
XYZLIM 0 199 0 199 0 199
RHOLIM 250.0
HKLMAX 50 50 50
END
eot
  #
  # echo "# IMAGE: SCRATCH/scratch1_phase_zero.map <MAP: PSF scratch1>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "fft - to transform ${infile} into SCRATCH/scratch1.map for Volume"
  #############################################################################  
  #
  \rm -f SCRATCH/scratch1.map
  ${bin_ccp4}/fft hklin ${infile} mapout SCRATCH/scratch1.map  << eot
LABIN F1=F  PHI=PHI ##
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
SYMMETRY ${CCP4_SYM}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE ${imagename}, ${SYM}, res=${RESMAX}, T=${tempfac}, ${date}
GRID 200 200 200
XYZLIM 0 199 0 199 0 199
RHOLIM 250.0
HKLMAX 50 50 50
END
eot
  #
  echo "<<@progress: +10>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "fft - to transform ${infile} into volume_crude.map"
  #############################################################################  
  #
  \rm -f SCRATCH/scratch1b.map
  ${bin_ccp4}/fft hklin ${infile} mapout SCRATCH/scratch1b.map  << eot
LABIN F1=F  PHI=PHI ##
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
SYMMETRY ${CCP4_SYM}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE ${imagename}, ${SYM}, res=${RESMAX}, T=${tempfac}, ${date}
GRID 126 126 126
XYZLIM 0 125 0 125 0 125
RHOLIM 250.0
HKLMAX 50 50 50
END
eot
  #
  \rm -f volume_crude.map
  ${bin_ccp4}/mapmask mapin SCRATCH/scratch1b.map mapout volume_crude.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim 0.0 0.999 0.0 0.999 -0.5 0.499
END
eof
  #
  echo "# IMAGE: volume_crude.map <MAP: crude volume (126x126x126 grid points)>" >> LOGS/${scriptname}.results
  echo "<<@progress: +10>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "maprot - to rescale map into correct dimensions for PSF"
  #############################################################################
  #
  set cellx = `echo ${realcell} | cut -d\, -f1`
  set cellxm1 = `echo ${cellx} | awk '{ s = $1 - 1 } END {print s}'`
  echo ":cellx = ${cellx},    cellxm1 = ${cellxm1}"
  #
  set celly = `echo ${realcell} | cut -d\, -f2`
  set cellym1 = `echo ${celly} | awk '{ s = $1 - 1 } END {print s}'`
  echo ":celly = ${celly},    cellym1 = ${cellym1}"
  #
  set ALATm1 = `echo ${ALAT} | awk '{ s = $1 - 1 } END {print s}'`
  echo ":ALAT = ${ALAT},      ALATm1 = ${ALATm1}"
  #
  ${proc_2dx}/linblock "WARNING: Correct handedness is now achieved, but MTZ data are inverted."
  #
  \rm -f SCRATCH/scratch2_phase_zero.map
  ${bin_ccp4}/maprot mapin SCRATCH/scratch1_phase_zero.map wrkout SCRATCH/scratch2_phase_zero.map << eot
MODE FROM
CELL WORK ${realcell} ${ALAT} 90.0 90.0 ${realang}
GRID WORK ${cellx} ${celly} ${ALAT}
XYZLIM 0 ${cellxm1} 0 ${cellym1} 0 ${ALATm1}
SYMM WORK 1
AVER
ROTA MATRIX   1.000 0.000 0.000      0.000 1.000 0.000    0.000 0.000 -1.000
TRANS  0.000 0.000 0.000
eot
  #
  #############################################################################
  ${proc_2dx}/linblock "maprot - to rescale map into correct dimensions for Volume"
  #############################################################################
  #
  \rm -f SCRATCH/scratch2.map
  ${bin_ccp4}/maprot mapin SCRATCH/scratch1.map wrkout SCRATCH/scratch2.map << eot
MODE FROM
CELL WORK ${realcell} ${ALAT} 90.0 90.0 ${realang}
GRID WORK ${cellx} ${celly} ${ALAT}
XYZLIM 0 ${cellxm1} 0 ${cellym1} 0 ${ALATm1}
SYMM WORK 1
AVER
ROTA MATRIX   1.000 0.000 0.000      0.000 1.000 0.000    0.000 0.000 -1.000
TRANS  0.000 0.000 0.000
eot
  #
  # echo "# IMAGE: SCRATCH/scratch2_phase_zero.map <MAP: PSF scratch2>" >> LOGS/${scriptname}.results
  #
  echo "<<@progress: +10>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "mapmask - to set units to 1x1x1 for PSF"
  #############################################################################
  #
  \rm -f volume-PSF.map
  ${bin_ccp4}/mapmask mapin SCRATCH/scratch2_phase_zero.map mapout volume-PSF.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim -0.5 0.5 -0.5 0.5 -0.5 0.5
END
eof
  #
  echo "# IMAGE-IMPORTANT: volume-PSF.map <MAP: Point Spread Function 3D Volume>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "mapmask - to set units to 1x1x1 for 3D Volume"
  #############################################################################
  #
  \rm -f volume.map
  ${bin_ccp4}/mapmask mapin SCRATCH/scratch2.map mapout volume_1unit.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim 0.0 0.999 0.0 0.999 -0.5 0.499
END
eof
  #
  echo "# IMAGE-IMPORTANT: volume_1unit.map <MAP: Final 3D Volume (1 unit cell)>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "mapmask - to set units to 2x2x1 for 3D Volume"
  #############################################################################
  #
  \rm -f volume.map
  ${bin_ccp4}/mapmask mapin SCRATCH/scratch2.map mapout volume.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim -1.0 0.999 -1.0 0.999 -0.5 0.499
END
eof
  #
  echo "# IMAGE-IMPORTANT: volume.map <MAP: Final 3D Volume (2x2 unit cells)>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  #############################################################################
  #############################################################################
  if ( ${calculate_subvolume}x != "0x" ) then  
    source ${proc_2dx}/2dx_generateMergeMap_SubVolume.com
  endif
  #############################################################################
  #############################################################################
  #############################################################################
  #
  #
  #############################################################################
  ${proc_2dx}/linblock "maprot - to calculate 3D volume with inverted hand"
  #############################################################################
  #
  \rm -f SCRATCH/scratch2_inverted.map
  ${bin_ccp4}/maprot mapin SCRATCH/scratch1.map wrkout SCRATCH/scratch2_inverted.map << eot
MODE FROM
CELL WORK ${realcell} ${ALAT} 90.0 90.0 ${realang}
GRID WORK ${cellx} ${celly} ${ALAT}
XYZLIM 0 ${cellxm1} 0 ${cellym1} 0 ${ALATm1}
SYMM WORK 1
AVER
ROTA MATRIX   1.000 0.000 0.000      0.000 1.000 0.000    0.000 0.000 1.000
TRANS  0.000 0.000 0.000
eot
  #
  #############################################################################
  ${proc_2dx}/linblock "mapmask - to set units to 2x2x1 for 3D volume with inverted hand"
  #############################################################################
  #
  \rm -f volume_inverted.map
  ${bin_ccp4}/mapmask mapin SCRATCH/scratch2_inverted.map mapout volume_inverted.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim -1.0 0.999 -1.0 0.999 -0.5 0.499
END
eof
  #
  \rm -f SCRATCH/scratch2_inverted.map
  echo "# IMAGE: volume_inverted.map <MAP: inverted-handedness (wrong) 3D Volume, for checking only>" >> LOGS/${scriptname}.results
  #
endif
#
#############################################################################
#############################################################################
#############################################################################
# Here for 2D work:
#############################################################################
#############################################################################
#############################################################################
#
set infile = merge2D.mtz
#
echo "# IMAGE: ${infile} <MTZ: input data for 2D (from last merging)>"  >> LOGS/${scriptname}.results
#
if ( ${rotate_to_Z} == "yes" ) then
  #
  set AXIS = "Z,X,Y"
  #
  ${bin_ccp4}/fft hklin ${infile} mapout SCRATCH/scratch1.map  << eot
LABIN F1=F  PHI=PHI ##
PROJECTION
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
SYMMETRY ${CCP4_SYM}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE Sym=${SYM}, ${imagename}, ${date}, res=${RESMAX}, T=${tempfac}
GRID 200 1 200
XYZLIM 0 199 0 0 0 199
RHOLIM 250.0
HKLMAX 50 50 50
END
eot
    #
  else
    #
    set AXIS = "X,Y,Z"
    #
    ${bin_ccp4}/fft hklin ${infile} mapout SCRATCH/scratch1.map  << eot
LABIN F1=F  PHI=PHI ##
PROJECTION
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
SYMMETRY ${CCP4_SYM}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE Sym=${SYM}, ${imagename}, ${date}, res=${RESMAX}, T=${tempfac}
GRID 200 200 1
XYZLIM 0 199 0 199 0 0
RHOLIM 250.0
HKLMAX 50 50 50
END
eot
    #
  endif
endif
#
#############################################################################
# The remainder is also for 2D projection maps only:
#############################################################################
#
echo "<<@progress: +10>>"
#
#############################################################################
${proc_2dx}/linblock "mapmask - to extend SCRATCH/scratch1.map into ${imagename}-${SYM}.rec.mrc"
#############################################################################
#
\rm -f SCRATCH/${imagename}-${SYM}.map
#
if (${rotate_to_Z} == "yes" ) then
  #
  \rm -f SCRATCH/TMP001.map
  #
${bin_ccp4}/mapmask mapin SCRATCH/scratch1.map mapout SCRATCH/TMP001.map << eof
XYZLIM 0 399 0 0 0 399
END
eof
  #
  \rm -f SCRATCH/TMP001.mrc
  #
  ${bin_2dx}/labelh.exe << eot
SCRATCH/TMP001.map
13
SCRATCH/${imagename}-${SYM}.map
eot
  #
else
  #
${bin_ccp4}/mapmask mapin SCRATCH/scratch1.map mapout SCRATCH/${imagename}-${SYM}.map << eof
XYZLIM 0 399 0 399 0 0
END
eof
  #
endif
#
# echo "# IMAGE: SCRATCH/${imagename}-${SYM}.map <temporary map>" >> LOGS/${scriptname}.results
#
echo "<<@progress: +10>>"
#
#############################################################################
${proc_2dx}/linblock "npo - to create a line plot ${imagename}-${SYM}.plt"
#############################################################################
#
\rm -f ${imagename}-${SYM}.plt
#
${bin_ccp4}/npo  MAPIN  SCRATCH/${imagename}-${SYM}.map  PLOT  ${imagename}-${SYM}.plt  << eof
TITLE Merged Result, 2x2 UnitCells, each ${realcell}, ang=${realang}
MAP SCALE 0.4
${npo_line1}
${npo_line2}
SECTS 0 0
PLOT
END
eof
#
echo "<<@progress: +10>>"
#
#############################################################################
${proc_2dx}/linblock "laserplot - to create PS/${imagename}MAP-${SYM}.ps"
#############################################################################
#
\rm -f PS/${imagename}MAP-${SYM}.ps
${bin_2dx}/laserplot.exe -outputfile=PS/${imagename}MAP-${SYM}.ps ${imagename}-${SYM}.plt
#
\rm -f ${imagename}-${SYM}.plt
#
echo "# IMAGE: PS/${imagename}MAP-${SYM}.ps <PS: ${SYM}-symmetrized final 2D map plot>" >> LOGS/${scriptname}.results
#
echo "<<@progress: +10>>"
#
#############################################################################
${proc_2dx}/linblock "LABEL - to create a clean MRC file format instead of CCP4"
#############################################################################
#
\rm -f ${imagename}-${SYM}.mrc
#
${bin_2dx}/labelh.exe << eot
SCRATCH/${imagename}-${SYM}.map 
2
${imagename}-${SYM}.mrc
1,0
0
eot
#
echo "# IMAGE-IMPORTANT: ${imagename}-${SYM}.mrc <${SYM}-symmetrized final 2D map>" >> LOGS/${scriptname}.results
#
if ( ${produceSpiderMap} != 'y' ) then
  #
  echo "<<@progress: 100>>"
  ${proc_2dx}/linblock "Done."
  exit
  #
else
  echo "<<@progress: 70>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "Launching SPIDER script - to create a scaled version of the final map"
  #############################################################################
  #
  set realu = `echo ${realcell} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
  set realv = `echo ${realcell} | sed 's/,/ /g' | awk '{ s = $2 } END { print s }'`
  ${proc_2dx}/linblock "Unit cell = ${realu}, ${realv}, ${realang}"
  #
  ${bin_2dx}/labelh.exe << eot
${imagename}-${SYM}.mrc
-3
SCRATCH/${imagename}-${SYM}.mrc
eot
  #
  ${bin_2dx}/mrc2tif.exe << eot
SCRATCH/${imagename}-${SYM}.mrc
SCRATCH/${imagename}-${SYM}.tif
Y
eot
  #
  # echo "# IMAGE: SCRATCH/${imagename}-${SYM}.mrc"  >> LOGS/${scriptname}.results
  #
  ### THIS NEEDS TO BE A VALID PATH TO SPIDER: For example:
  #/usr/local/spider/bin/spider.exe
  #
  /usr/local/spider/bin/spider.exe << eot
spi
;
; X70 is the size of the unit cell in the MRC output file from above.
X70=200.0
;
; This attempts to get the CCP4 or MRC file into spider. There is an issue with MRC2000, which now
; can deal with X,Y and Z dimensions. Spider may not yet be able to read that.
; You can either go through TIFF, by skipping a certain header size:
; The second last parameter is the size of the tiff header. That might be platform dependent.
; On OSX Intel it is 198 bytes.
; The file SCRATCH/${imagename}-${SYM}.tif is 400x400 pixels wide, which should be 16,000 pixels.
; If that file has a file size of 16,198, then those 198 byte are the header. If you skip the header,
; you then can read the rest of the TIFF file as RAW. If your TIFF file has a slightly different size, 
; for example 17,024, then adjust that number from "198" to "1024":
;
;cp from raw
;SCRATCH/${imagename}-${SYM}.tif
;8
;400,400,1
;198
;TMP001
;
; or you can go through CCP4 directly, if that works better:
;
cp from ccp4
SCRATCH/${imagename}-${SYM}.map
TMP001
n
;
WI
TMP001
TMP002
X70,X70,1
1,1,1
;
X41=${unitcellnumber} * X70
BL
TMP003
X41,X41,1
N
0.0
;
X42=1.0
X43=1.0
DO LB5 X51=1,${unitcellnumber}
  DO LB4 X52=1,${unitcellnumber}
    PA
TMP002
TMP003
X42,X43,1
    X42=X42+X70
  LB4
  X42=1.0
  X43=X43+X70
LB5
;
X31=${realang}
X32=180.0-X31
X36=1.0/${mapscale}
; X36 is how many pixels are in one Angstroem
X34=${unitcellnumber}*X36*${realu}/cos(${realang}-90.0)
X34=${unitcellnumber}*X36*${realu}
X35=${unitcellnumber}*X36*${realv}
;
IP
TMP003
TMP004
X34,X35
;
if(X32.lt.90.0)then
SZ
TMP004
X32
TMP005
else
cp
TMP004
TMP005
endif
;
cp to mrc
TMP005
${imagename}-${SYM}-scaled.mrc
-9999
;
;  the usual origin top-left / bottom-left issue:
MR
TMP005
TMP006
X
;
cp to tiff
TMP006
${imagename}-${SYM}-scaled.tif
;
; cp to ccp4
; TMP005
; ${imagename}-${SYM}-scaled.map
; 8
; 
; 1
; 
;
de a
TMP001
;
; if you want to keep the SPIDER results logfile, finish with "en". 
; if you don't want to keep the SPIDER results logfile, finish with "en d". 
;
en d
eot
  #
  \rm -f LOG.spi
  \rm -f fort.1
  #
  echo "# IMAGE-IMPORTANT: ${imagename}-${SYM}-scaled.mrc <MAP: ${SYM}-symmetrized MultiUnitCell Map>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "2dx_byteswap - to transform spider output into local endianness"
  #############################################################################
  #
  ${bin_2dx}/2dx_byteSwap.exe ${imagename}-${SYM}-scaled.mrc
  #
  #############################################################################
  ${proc_2dx}/linblock "image_convert - to transform spider output into Image2000 MRC file format"
  #############################################################################
  #
  ${bin_2dx}/image_convert.exe <<eot
${imagename}-${SYM}-scaled.mrc
temp.mrc
y
eot
  \mv temp.mrc ${imagename}-${SYM}-scaled.mrc
  #
  # echo "# IMAGE: ${imagename}-${SYM}-scaled.tif <TIFF: ${SYM}-symmetrized MultiUnitCell Map>" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "TIFF file created: ${imagename}-${SYM}-scaled.tif"
  #
endif
#
echo "<<@progress: 100>>"
#
#
#############################################################################
#                                                                           #
${proc_2dx}/linblock "Done."
#                                                                           #
#############################################################################
#
