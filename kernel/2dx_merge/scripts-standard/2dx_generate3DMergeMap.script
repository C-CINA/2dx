#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Generate 3D Merged Map                                                #
#                                                                           #
# 2dx.org, GNU Plublic License.                                             #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 09/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 85
#
# MANUAL: This script makes use of MRC and CCP4 commands to generate the final projection map.
#
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: SYM
# DISPLAY: ALAT
# DISPLAY: tempfac
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: realang
# DISPLAY: realcell
# DISPLAY: diffmap_doit
# DISPLAY: diffmap_source
# DISPLAY: diffmap_weight
# DISPLAY: produceSpiderMap
# DISPLAY: mapscale
# DISPLAY: unitcellnumber
# DISPLAY: npo_line1
# DISPLAY: npo_line2
# DISPLAY: calculate_subvolume
# DISPLAY: mask_subvolume_PDB
# DISPLAY: mask_subvolume_PDB_file
# DISPLAY: mask_subvolume_PDB_radius
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set SCRATCH_DISK = ""
#
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set CS = ""
set KV = ""
set ALAT = ""
set realang = ""
set realcell = ""
set rot180 = ""
set revhk = ""
set rot90 = ""
set beamtilt = ""
set tempfac = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set merge_modus = ""
set det_tilt = ""
set merge_modus = ""
set diffmap_doit = ""
set diffmap_source = ""
set diffmap_weight = ""
set merge_ref_num = ""
set merge_comment_1 = ""
set merge_comment_2 = ""
set merge_comment_3 = ""
set merge_comment_4 = ""
set merge_comment_5 = ""
set merge_comment_6 = ""
set merge_comment_7 = ""
set merge_comment_8 = ""
set merge_comment_9 = ""
set merge_register_date_1 = ""
set merge_register_date_2 = ""
set merge_register_date_3 = ""
set merge_register_date_4 = ""
set merge_register_date_5 = ""
set merge_register_date_6 = ""
set merge_register_date_7 = ""
set merge_register_date_8 = ""
set merge_register_date_9 = ""
set produceSpiderMap = ""
set mapscale = ""
set unitcellnumber = ""
set npo_line1 = ""
set npo_line2 = ""
set calculate_subvolume = ""
set mask_subvolume_PDB = ""
set mask_subvolume_PDB_file = ""
set mask_subvolume_PDB_radius = ""
#
#$end_vars
#
echo "<<@progress: 1>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set imagenumber = 1001
set imagename = "merge"
#
echo imagename = ${imagename}
echo imagenumber = ${imagenumber}
echo tempkeep = ${tempkeep}
echo RESMIN = ${RESMIN}
echo RESMAX = ${RESMAX}
echo CS = ${CS}
echo KV = ${KV}
echo ALAT = ${ALAT}
echo realang = ${realang}
echo realcell = ${realcell}
echo rot180 = ${rot180}
echo rot90 = ${rot90}
echo beamtilt = ${beamtilt}
echo tempfac = ${tempfac}
echo SYM = ${SYM}
echo avrgamphsNUMBER = ${avrgamphsNUMBER}
echo avrgamphsRESOL = ${avrgamphsRESOL}
echo diffmap_doit = ${diffmap_doit}
echo diffmap_source = ${diffmap_source}
echo diffmap_weight = ${diffmap_weight}
echo npo_line1 = ${npo_line1}
echo npo_line2 = ${npo_line2}
#
set scriptname = 2dx_generate3DMergeMap
#
source ${proc_2dx}/2dx_merge_makedirs 
#
\rm -f LOGS/${scriptname}.results
#
set date = `date`
echo date = ${date}
#
set IAQP2 = 0
set IVERBOSE = 1
set phastepnum = 1
set phastep = 0.1
#
# The following is to make sure that for the next "Import Images", the default is correctly initialized.
set initialization_reset = "y"
set initialization_executable = "y"
echo "set initialization_reset = ${initialization_reset}" >> LOGS/${scriptname}.results
echo "set initialization_executable = ${initialization_executable}" >> LOGS/${scriptname}.results
#
if ( ${ALAT} == "0" || ${ALAT} == "0.0" ) then
  ${proc_2dx}/protest "ALAT is not defined."
endif
set ALATnew = `echo ${ALAT} | awk '{ if ( $1 < 0 ) { s = -$1 } else { s = $1 }} END { print s }'`
if ( ${ALAT} != ${ALATnew} ) then
  set ALAT = ${ALATnew}
  echo "set ALAT = ${ALAT}" >> LOGS/${scriptname}.results
endif
#
#???? Check this ???
set SCL = 1
echo "SCL = ${SCL}"
#
# contrast for grey plot
set scale = 1
echo "scale = ${scale}"
#
${proc_2dx}/linblock "Using the most recent merged dataset (from register 0)."
#
#############################################################################
${proc_2dx}/linblock "sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
set ABANG = `echo $realang | awk '{s=180-$1} END {print s}'`
echo ABANG = ${ABANG}
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
echo "<<@progress: +10>>"
#
# contrast for grey plot
set scale = 1
echo "scale = ${scale}"
#
set voldim = 250
set voldim_m1 = `echo ${voldim} | awk '{ s = $1 - 1 } END { print s }'`
set voldim_t142 = `echo ${voldim} | awk '{ s = $1 * 1.42 } END { print s }'`
set voldim_t2 = `echo ${voldim} | awk '{ s = $1 * 2 } END { print s }'`
set voldim_t2m1 = `echo ${voldim} | awk '{ s = $1 * 2 - 1 } END { print s }'`
#
set cellx = `echo ${realcell} | cut -d\, -f1`
set cellxm1 = `echo ${cellx} | awk '{ s = $1 - 1 } END {print s}'`
echo ":cellx = ${cellx},    cellxm1 = ${cellxm1}"
#
set celly = `echo ${realcell} | cut -d\, -f2`
set cellym1 = `echo ${celly} | awk '{ s = $1 - 1 } END {print s}'`
echo ":celly = ${celly},    cellym1 = ${cellym1}"
#
set ALATm1 = `echo ${ALAT} | awk '{ s = $1 - 1 } END {print s}'`
echo ":ALAT = ${ALAT},      ALATm1 = ${ALATm1}"
#
if ( ${merge_modus} == "2D" ) then
  ${proc_2dx}/protest "Skipping: This script works only in 3D mode."
endif
#
\rm -f SCRATCH/scratch1.map
#
#############################################################################
#############################################################################
#############################################################################
# Here for 3D volume generation:
#############################################################################
#############################################################################
#############################################################################
#
set infile = merge3D.mtz
#
echo "# IMAGE: PS/latline.ps <PS: Lattice lines (from last merging)>" >> LOGS/${scriptname}.results
echo "# IMAGE: ${infile} <MTZ: input data for 3D (from last merging)>"  >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "mtz2various - to translate MTZ file into HKL file"
#############################################################################  
#
${bin_ccp4}/mtz2various hklin merge3D.mtz hklout merge3D.hkl << eof
LABIN FP=F SIGFP=PHI W=FOM
OUTPUT USER '(3I8,4G16.8)'
end
eof
#
set hkl_infile = merge3D.hkl
#
echo "# IMAGE: merge3D.hkl <HKL: input data for 3D (from last merging)>"  >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "volume_processor.exe - to transform HKL file into volume"
#############################################################################  
#
${bin_2dx}/volume_processor.exe --hklin merge3D.hkl --mrcout volume.map -X ${cellx} -Y ${celly} -Z ${ALAT} --gamma ${realang} --res ${RESMAX} -s ${SYM_NAME}
#
echo "# IMAGE: volume.map <MAP: final map 3D>"  >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "extend the map to 2x2x1 unit cells"
#############################################################################  
#
source ${proc_2dx}/2dx_extend_map.com volume.map extended.map
#
echo "# IMAGE: extended.map <MAP: final map 3D, 2x2 unit cells>"  >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "hkl_to_PSFmrc.exe - to transform HKL file into volume for PSF"
#############################################################################  
#
${bin_2dx}/volume_processor.exe --hklin merge3D.hkl --mrcout PSF.map -X ${cellx} -Y ${celly} -Z ${ALAT} --gamma ${realang} --res ${RESMAX} -s ${SYM_NAME} --psf
#
echo "# IMAGE: PSF.map <MAP: PSF>"  >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "cad - to set spacegroup info to p1 for PSF"
#############################################################################  
#
\rm -f SCRATCH/merge3D-p1.mtz
#
${bin_ccp4}/cad hklin1 merge3D.mtz hklout SCRATCH/merge3D-p1.mtz << eof
symmetry p1
labin file 1 all
end
eof
#
#
#############################################################################
#############################################################################
#############################################################################
${proc_2dx}/linblock "Now for 2D processing:"
#############################################################################
#############################################################################
#############################################################################
#
#
${bin_2dx}/project2D.exe --mrcin extended.map --mrcout ${imagename}-${SYM}.mrc --axis z
#
echo "# IMAGE-IMPORTANT: ${imagename}-${SYM}.mrc <${SYM}-symmetrized final 2D map>" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "labelh - to transform the map into BYTE format with automatic scaling"
#############################################################################
#
${bin_2dx}/labelh.exe << eot
${imagename}-${SYM}.mrc
-3
SCRATCH/${imagename}-${SYM}.mrc
eot
#
#############################################################################
${proc_2dx}/linblock "mrc2tif - to create a TIFF file from the map that can be read by SPIDER"
#############################################################################
#
if ( ! -d RESULTS-TIFF ) then
  \mkdir RESULTS-TIFF
endif
#
${bin_2dx}/mrc2tif.exe << eot
SCRATCH/${imagename}-${SYM}.mrc
RESULTS-TIFF/${imagename}-${SYM}.tif
Y
eot
#
echo "# IMAGE: RESULTS-TIFF/${imagename}-${SYM}.tif"  >> LOGS/${scriptname}.results
${proc_2dx}/linblock "TIFF file created: RESULTS-TIFF/${imagename}-${SYM}.tif"
#
if ( ${produceSpiderMap} != 'y' ) then
  #
  echo "<<@progress: 100>>"
  ${proc_2dx}/linblock "Done."
  exit
  #
else
  echo "<<@progress: 70>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "Launching SPIDER script - to create a scaled version of the final map"
  #############################################################################
  #
  set realu = `echo ${realcell} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
  set realv = `echo ${realcell} | sed 's/,/ /g' | awk '{ s = $2 } END { print s }'`
  ${proc_2dx}/linblock "Unit cell = ${realu}, ${realv}, ${realang}"
  #
  ### THIS NEEDS TO BE A VALID PATH TO SPIDER: For example:
  #/usr/local/spider/bin/spider.exe
  #
  /usr/local/spider/bin/spider.exe << eot
spi
;
; X70 is the size of the unit cell in the MRC output file from above.
X70=${voldim}
;
; This attempts to get the CCP4 or MRC file into spider. There is an issue with MRC2000, which now
; can deal with X,Y and Z dimensions. Spider may not yet be able to read that.
; You can either go through TIFF, by skipping a certain header size:
; The second last parameter is the size of the tiff header. That might be platform dependent.
; On OSX Intel it is 198 bytes.
; The file SCRATCH/${imagename}-${SYM}.tif is 400x400 pixels wide, which should be 16,000 pixels.
; If that file has a file size of 16,198, then those 198 byte are the header. If you skip the header,
; you then can read the rest of the TIFF file as RAW. If your TIFF file has a slightly different size, 
; for example 17,024, then adjust that number from "198" to "1024":
;
; or you can go through CCP4 directly, if that works better:
;
cp from ccp4
SCRATCH/${imagename}-${SYM}.map
TMP001
n
;
WI
TMP001
TMP002
X70,X70,1
1,1,1
;
X41=${unitcellnumber} * X70
BL
TMP003
X41,X41,1
N
0.0
;
X42=1.0
X43=1.0
DO LB5 X51=1,${unitcellnumber}
  DO LB4 X52=1,${unitcellnumber}
    PA
TMP002
TMP003
X42,X43,1
    X42=X42+X70
  LB4
  X42=1.0
  X43=X43+X70
LB5
;
X31=${realang}
X32=180.0-X31
X36=1.0/${mapscale}
; X36 is how many pixels are in one Angstroem
X34=${unitcellnumber}*X36*${realu}
X35=${unitcellnumber}*X36*${realv}/cos(X31 - 90.0)
;
IP
TMP003
TMP004
X34,X35
;
if(X32.lt.90.0)then
SZ
TMP004
X32
TMP005
else
cp
TMP004
TMP005
endif
;
cp to mrc
TMP005
${imagename}-${SYM}-scaled.mrc
-9999
;
;  the usual origin top-left / bottom-left issue:
MR
TMP005
TMP006
X
;
cp to tiff
TMP006
RESULTS-TIFF/${imagename}-${SYM}-scaled.tif
;
; cp to ccp4
; TMP005
; ${imagename}-${SYM}-scaled.map
; 8
; 
; 1
; 
;
de a
TMP001
;
; if you want to keep the SPIDER results logfile, finish with "en". 
; if you don't want to keep the SPIDER results logfile, finish with "en d". 
;
en d
eot
  #
  \rm -f LOG.spi
  \rm -f fort.1
  #
  echo "# IMAGE-IMPORTANT: ${imagename}-${SYM}-scaled.mrc <MAP: ${SYM}-symmetrized MultiUnitCell Map>" >> LOGS/${scriptname}.results
  #
  #############################################################################
  ${proc_2dx}/linblock "2dx_byteswap - to transform spider output into local endianness"
  #############################################################################
  #
  ${bin_2dx}/2dx_byteSwap.exe ${imagename}-${SYM}-scaled.mrc
  #
  #############################################################################
  ${proc_2dx}/linblock "image_convert - to transform spider output into Image2000 MRC file format"
  #############################################################################
  #
  ${bin_2dx}/image_convert.exe <<eot
${imagename}-${SYM}-scaled.mrc
temp.mrc
y
eot
  \mv temp.mrc ${imagename}-${SYM}-scaled.mrc
  #
  # echo "# IMAGE: RESULTS-TIFF/${imagename}-${SYM}-scaled.tif <TIFF: ${SYM}-symmetrized MultiUnitCell Map>" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "TIFF file created: RESULTS-TIFF/${imagename}-${SYM}-scaled.tif"
  #
endif
#
echo "<<@progress: 100>>"
#
#
#############################################################################
#                                                                           #
${proc_2dx}/linblock "Done."
#                                                                           #
#############################################################################
#
