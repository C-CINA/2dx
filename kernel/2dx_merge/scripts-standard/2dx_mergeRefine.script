#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Merge & Refine (Iterative)                                         #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 01/03/2007                                             #
# Last Modification: 01/03/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# ITERATIONCOUNTER: MAX=100;DEFAULT=3
#
# SORTORDER: 40
#
# MANUAL: This script allows refining the data of the selected images.
#
# MANUAL: All selected images are merged together, and subsequently aligned against the merged average. This can be done iteratively a preset number of times. Double-click onto the iteration counter after the script name, to adjust that number, if needed.
# 
# DISPLAY: create_merged_dataset
# DISPLAY: MergeResolution
# DISPLAY: merge_modus
# DISPLAY: zstarwin
# DISPLAY: zstarrange
# DISPLAY: Calc_from_zstarrange
# DISPLAY: zstarrange_real
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: merge_res_limit
# DISPLAY: tempkeep
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: MergeStepSize
# DISPLAY: IBOXPHS
# DISPLAY: SYM
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: MergeIQMAX
# DISPLAY: Merge_Reference_IQMAX
# DISPLAY: MergeHKMAX
# DISPLAY: Merge_Reference_HKMAX
# DISPLAY: MergeLatLine_REDUCAC
# DISPLAY: MergeLatLine_RFOMSCALE
# DISPLAY: AMP_Scale_Factor
# DISPLAY: ILIST
# DISPLAY: MergeIPAT
# DISPLAY: MergeDELPLT
# DISPLAY: MergeDELPRO
# DISPLAY: MergeRminRmax
# DISPLAY: MergeRCUT
# DISPLAY: MergePFACT
# DISPLAY: MergeBINSIZ
# DISPLAY: MergeNCYCLS
# DISPLAY: MergeMPRINT
# DISPLAY: refbeamtilt
# DISPLAY: reftiltgeo
# DISPLAY: ITAXASTEP
# DISPLAY: RTAXASIZE
# DISPLAY: ITANGLSTEP
# DISPLAY: RTANGLSIZE
# DISPLAY: merge_reference
# DISPLAY: MergeAK
# DISPLAY: MergeIWF
# DISPLAY: MergeIWP
# DISPLAY: MergeLatLine_MaxAmpFactor
# DISPLAY: merge_ref_num
# DISPLAY: merge_comment_1
# DISPLAY: merge_comment_2
# DISPLAY: merge_comment_3
# DISPLAY: merge_comment_4
# DISPLAY: merge_comment_5
# DISPLAY: merge_comment_6
# DISPLAY: merge_comment_7
# DISPLAY: merge_comment_8
# DISPLAY: merge_comment_9
# DISPLAY: max_amp_correction
# DISPLAY: MergePray
# DISPLAY: make_reference
# DISPLAY: merge_ML_data
# DISPLAY: plotres_rings
# DISPLAY: scalimamp3d_rref
# DISPLAY: scalimamp3d_BXYMINMAX
# DISPLAY: scalimamp3d_BZMINMAX
# DISPLAY: scalimamp3d_BEXTRA
# DISPLAY: latline_pdf
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set create_merged_dataset = ""
set MergeResolution = ""
set merge_modus = ""
set zstarwin = ""
set zstarrange = ""
set Calc_from_zstarrange = ""
set zstarrange_real = ""
set RESMIN = ""
set RESMAX = ""
set merge_res_limit = ""
set tempkeep = ""
set realcell = ""
set realang = ""
set ALAT = ""
set MergeStepSize = ""
set IBOXPHS = ""
set AMP_Scale_Factor = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set ILIST = ""
set MergeIQMAX = ""
set Merge_Reference_IQMAX = ""
set MergeHKMAX = ""
set Merge_Reference_HKMAX = ""
set MergeIPAT = ""
set MergeDELPLT = ""
set MergeDELPRO = ""
set MergeRminRmax = ""
set MergeRCUT = ""
set MergePFACT = ""
set MergeBINSIZ = ""
set MergeNCYCLS = ""
set MergeMPRINT = ""
set MergeLatLine_MaxAmpFactor = ""
set MergeLatLine_REDUCAC = ""
set MergeLatLine_RFOMSCALE = ""
set refbeamtilt = ""
set reftiltgeo = ""
set ITAXASTEP = ""
set RTAXASIZE = ""
set ITANGLSTEP = ""
set RTANGLSIZE = ""
set merge_reference = ""
set MergeAK = ""
set MergeIWF = ""
set MergeIWP = ""
set merge_ref_num = ""
set max_amp_correction = ""
set merge_ML_data = ""
set plotres_rings = ""
set lattice = ""
set scalimamp3d_rref = ""
set scalimamp3d_BXYMINMAX = ""
set scalimamp3d_BZMINMAX = ""
set scalimamp3d_BEXTRA = ""
set num_reflections_fitted = ""
set num_reflections_FOM50 = ""
set latline_pdf = ""
#
#$end_vars
#
setenv OMP_NUM_THREADS 8
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set dirfile = "2dx_merge_dirfile.dat"
#
set number = 1
if ( ${ILIST} == "n" ) then
  set IVERBOSE = 1
else
  set IVERBOSE = 6
endif
set RFACAMP = 1.0
#
set scriptname = 2dx_mergeRefine
\rm -f LOGS/${scriptname}.results
#
if ( ${merge_ref_num} != "0" ) then
  ${proc_2dx}/linblock "ERROR: Iterative refinement does not make sense with"
  ${proc_2dx}/linblock "a saved static reference."
  ${proc_2dx}/linblock "Use last merge result as reference (register 0),"
  ${proc_2dx}/linblock "or use the REFINE script instead."
  ${proc_2dx}/protest "Aborting."
endif
#
if ( ${Calc_from_zstarrange} == "y" ) then
  set zstarrange_real = `echo ${zstarrange} ${ALAT} | awk '{ s = 1.0 / ( $1 ) } END { print s }'`
  echo "set zstarrange_real = ${zstarrange_real}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "Calculating vertical resolution as ${zstarrange_real} Angstroems."
else
  set zstarrange = `echo ${zstarrange_real} ${ALAT} | awk '{ s = 1.0 / ( $1 ) } END { print s }'`
  echo "set zstarrange = ${zstarrange}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "Calculating zstarrange as ${zstarrange} (with 0.5 = Nyquist resolution)."
endif
#
set zmin = `echo ${zstarrange} | awk '{s = -$1} END {print s}'`
set zminmax = `echo ${zmin},${zstarrange}`
echo zminmax = ${zminmax}
echo MergeAK = ${MergeAK}
echo MergeIWF = ${MergeIWF}
echo MergeIWP = ${MergeIWP}
# 
set zstarwintmp = `echo ${ALAT} | awk '{ s = 1.0 / ( 2.0 * $1 ) } END { print s }'`
set zstarwinbad = `echo ${zstarwin} ${zstarwintmp} | awk '{ if ( abs ( $1 - $2 ) > 0.001 ) { s = 1 } else { s = 0 } } END { print s }'`
if ( ( ${zstarwinbad} == 1 ) && ( ${merge_modus} == '3D' ) ) then
  echo "#WARNING: Warning: zstarwin is ${zstarwin}, but reasonable would be ${zstarwintmp}" >> LOGS/${scriptname}.results
  echo "::WARNING: zstarwin is ${zstarwin}, but reasonable would be ${zstarwintmp}"
endif
#
echo "<<@progress: 1>>"
#
#################################################################################
${proc_2dx}/linblock "Verifying some parameters"
#################################################################################
#
if ( ${MergeHKMAX}x == 'x' ) then
  set MergeHKMAX = '20'
  ${proc_2dx}/linblock "ERROR: correcting MergeHKMAX to ${MergeHKMAX}"
  echo "set MergeHKMAX = ${MergeHKMAX}" >> LOGS/${scriptname}.results
endif
#
if ( `echo ${RESMIN} ${RESMAX} | awk '{ if ( $1 < $2 ) { s = 1 } else { s = 0 }} END { print s }'` == 1 ) then
  set oldval = ${RESMIN}
  set RESMIN = ${RESMAX}
  set RESMAX = ${oldval}
  ${proc_2dx}/linblock "ERROR: exchanging RESMIN and RESMAX, to RESMIN=${RESMIN}, and RESMAX=${RESMAX}"
  echo "set RESMIN = ${RESMIN}" >> LOGS/${scriptname}.results
  echo "set RESMAX = ${RESMAX}" >> LOGS/${scriptname}.results
endif
#
if ( ${AMP_Scale_Factor}x == ‘x’ ) then
  set AMP_Scale_Factor = 0.001
  echo "set AMP_Scale_Factor = ${AMP_Scale_Factor}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: AMP_Scale_Factor corrected to ${AMP_Scale_Factor}"
endif
# 
if ( ${MergeAK}x == 'x' ) then
  set MergeAK = "10"
  echo "set MergeAK = ${MergeAK}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeAK corrected to ${MergeAK}"
endif
#
if ( ${MergeIWF}x == 'x' ) then
  set MergeIWF = "0"
  echo "set MergeIWF = ${MergeIWF}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeIWF corrected to ${MergeIWF}"
endif
#
if ( ${MergeIWP}x == 'x' ) then
  set MergeIWP = "1"
  echo "set MergeIWP = ${MergeIWP}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeIWP corrected to ${MergeIWP}"
endif
#
if ( ${ILIST}x == 'x' ) then
  set ILIST = "n"
  echo "set ILIST = ${ILIST}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: ILIST corrected to ${ILIST}"
endif
#
if ( ${ILIST} == "n" ) then
  set ILIST_VAL = 0
else
  set ILIST_VAL = 1
endif
#
if(${MergeIWF} == "0")then
  set MergeIWF_VAL = -1
endif
if(${MergeIWF} == "1")then
  set MergeIWF_VAL = 0
endif
if(${MergeIWF} == "2")then
  set MergeIWF_VAL = 1
endif
if(${MergeIWP} == "0")then
  set MergeIWP_VAL = -2
endif
if(${MergeIWP} == "1")then
  set MergeIWP_VAL = -1
endif
if(${MergeIWP} == "2")then
  set MergeIWP_VAL = 0
endif
if(${MergeIWP} == "3")then
  set MergeIWP_VAL = 1
endif
echo MergeAK = ${MergeAK}
echo MergeIWF_VAL = ${MergeIWF_VAL}
echo MergeIWP_VAL = ${MergeIWP_VAL}
#
echo "<<@progress: 5>>"
#
#############################################################################
${proc_2dx}/linblock "Sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
############################################################################# 
${proc_2dx}/lin "2dx_merge_makedirs - to create all required subdirectories"
#############################################################################
#
source ${proc_2dx}/2dx_merge_makedirs
#
echo "<<@progress: 10>"
#
if ( ${merge_modus} == '2D' ) then
  if ( ! -e APH/merge.aph ) then
    set create_merged_dataset = "y"
  endif
  set NPRG = 1
endif
if ( ${merge_modus} == '3D' ) then
  if ( ( ! -e  merge3D.mtz ) || ( ! -e merge3Dref.mtz ) ) then
    set create_merged_dataset = "y"
  endif
  if ( ${merge_reference} == '0' ) then
    # Use merge.aph files
    set NPRG = 1
  else
    # User interpolated lattice lines latlinesref.mtz
    set NPRG = 3
  endif
endif
#
if ( ${merge_ref_num} == "0" && ${create_merged_dataset} == "y" ) then
  #
  #############################################################################
  ${proc_2dx}/linblock "Overwriting old merged dataset"
  #############################################################################  
  #############################################################################
  ${proc_2dx}/linblock "Sourcing 2dx_merge_merge_sub.com"
  #############################################################################  
  #
  #
  source ${proc_2dx}/2dx_merge_merge_sub.com
  #
  if ( ${merge_modus} == "3D" ) then
    #
    #############################################################################
    ${proc_2dx}/linblock "Sourcing 2dx_merge_latline.sub"
    #############################################################################
    #
    source ${proc_2dx}/2dx_merge_latline_sub.com
    #
  endif
  #
endif
#
#############################################################################
${proc_2dx}/linblock "Compile refinement script"
#############################################################################
#
set scriptBfile = "SCRATCH/2dx_merge_scriptB.com"
\rm -f ${scriptBfile}
set postprocessingfile = "SCRATCH/2dx_merge_postprocessing.com"
\rm -f ${postprocessingfile}
#
set genref = "0"
#
\rm -f LOGS/${scriptname}-tmp.results
#
if ( ${refbeamtilt} == 'y' ) then
  if ( ${merge_modus} == '3D' ) then
    set NBM = T
    ${proc_2dx}/linblock "NBM=T, doing beam tilt refinement."
  else
    ${proc_2dx}/linblock "ERROR: Beamtilt Refinement only in 3D modus possible."
    set NBM = F
    ${proc_2dx}/linblock "NBM=F, no beam tilt refinement."
  endif
else
  set NBM = F
  ${proc_2dx}/linblock "NBM=F, no beam tilt refinement."
endif
#
if ( ${reftiltgeo} == 'y' ) then
  if ( ${merge_modus} == '3D' ) then
    set NTL = T
    ${proc_2dx}/linblock "NTL=T, doing crystal tiltangle and tiltaxis refinement."
  else
    ${proc_2dx}/linblock "ERROR: Tilt Geometry Refinement only in 3D modus possible."
    set NTL = F
    ${proc_2dx}/linblock "NTL=F, no crystal tiltangle or tiltaxis refinement."
  endif
else
  set NTL = F
  ${proc_2dx}/linblock "NTL=F, no crystal tiltangle or tiltaxis refinement."
endif
#
${bin_2dx}/2dx_merge_compileB.exe << eot
LOGS/${scriptname}-tmp.results
${proc_2dx}
${bin_2dx}
${dirfile}
${scriptBfile}
${postprocessingfile}
${genref}
${spcgrp}
${realcell}
${realang}
${zstarwin}
${ALAT}
${IVERBOSE}
${MergeStepSize}
${RFACAMP}
${IBOXPHS}
${NPRG}
${NBM}
${NTL}
${ITAXASTEP}
${RTAXASIZE}
${ITANGLSTEP}
${RTANGLSIZE}
${Merge_Reference_IQMAX}
${Merge_Reference_HKMAX}
${merge_res_limit}
${RESMIN}
${RESMAX}
${merge_ML_data}
${ILIST_VAL}
0
eot
#
echo "<<@progress: +5>>"
#
#############################################################################
${proc_2dx}/linblock "Launch refinement script"
#############################################################################
#
echo "# IMAGE: ${scriptBfile} <CSH: refinement script>" >> LOGS/${scriptname}.results
echo "# IMAGE: ${postprocessingfile} <CSH: refinement postprocessing script>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/2dx_merge_scriptB.log <LOG: origtilt B output>" >> LOGS/${scriptname}.results
chmod +x ${scriptBfile}
${scriptBfile} > SCRATCH/2dx_merge_scriptB.log
# cat SCRATCH/2dx_merge_scriptB.out
#
#
echo "################################################"
echo "################################################"
echo "output in file LOGS/2dx_merge_scriptB.log"
echo "################################################"
echo "################################################"
#
cat 2dx_origtiltk-console.log
#\rm -f 2dx_origtiltk-console.log
#
cat LOGS/${scriptname}-tmp.results >> LOGS/${scriptname}.results
# \rm -f LOGS/${scriptname}-tmp.results
#
#
# Issue evaluate here to reload the Ph-Ori-Change column
echo "<<@evaluate>>"
#
#############################################################################
${proc_2dx}/linblock "2dx_refine normal end."
#############################################################################
#
echo "<<@progress: 100>>"
#
