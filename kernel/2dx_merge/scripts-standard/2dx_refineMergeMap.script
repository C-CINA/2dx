#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Refine Merged Map (3D only)                                        #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 21/01/2015                                             #
# Last Modification: 21/01/2015                                             #
# Author...........: Nikhil Biyani                                          #
#                                                                           #
#############################################################################
#
# SORTORDER: 89
#
# MANUAL: This script takes the unevenly spaced hkz file and generates a 3D reference map using backprojection.
#
# DISPLAY: SYM
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: sample_pixel
# DISPLAY: number_of_beads
# DISPLAY: density_threshold_bead
# DISPLAY: noise_level_bead
# DISPLAY: number_sf_hist_iterations
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: calculate_subvolume
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set SYM = ""
set realcell = ""
set realang = ""
set ALAT = ""
set sample_pixel = ""
set RESMIN = ""
set RESMAX = ""
set calculate_subvolume = ""
set number_of_beads = ""
set density_threshold_bead = ""
set noise_level_bead = ""
set number_sf_hist_iterations = ""
set merge_modus = ""
#
#$end_vars
#
set scriptname = 2dx_refineMergeMap
#
set split = ($realcell:as/,/ /)
set cellx = $split[1]
set celly = $split[2]
#
echo "cellx = ${cellx}"
echo "celly = ${celly}"
echo "cellz = ${ALAT}"
#
set cellxm1 = `echo ${cellx} | awk '{ s = $1 - 1 } END {print s}'`
set cellym1 = `echo ${celly} | awk '{ s = $1 - 1 } END {print s}'`
set ALATm1 = `echo ${ALAT} | awk '{ s = $1 - 1 } END {print s}'`
#
set date = `date`
echo date = ${date}
#
\rm -f LOGS/${scriptname}.results
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
if ( ${merge_modus} != "3D" ) then
  ${proc_2dx}/protest "Skipping: Only in 3D mode."
endif
#
echo "<<@progress: 5>"
#
#############################################################################
#
set hkzFile = "APH/latlines.dat"
#
if ( ! -e ${hkzFile} ) then
   ${proc_2dx}/protest "ERROR: ${hkzFile} not found." 
endif
#
########################################################################
${proc_2dx}/linblock "Processing HKZ file from ${hkzFile}"
########################################################################
${bin_2dx}/2dx_process_hkz.exe ${hkzFile} ${SYM} ${cellx} ${celly} ${ALAT} ${realang} ${sample_pixel} ${RESMAX}
#
mv output.hkl APH/processed.hkl
#
echo "<<@progress: +40>>"
#
#############################################################################
${proc_2dx}/linblock "Done."
#############################################################################
#
#
echo "# IMAGE: APH/processed.hkl <HKL: Generated HKL >" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "f2mtz - Program to convert hkl data into MTZ format"
#############################################################################
#
set infile = APH/processed.hkl
\rm -f SCRATCH/processed_f2mtz.mtz
#
${bin_ccp4}/f2mtz hklin ${infile} hklout SCRATCH/processed_f2mtz.mtz << eof
TITLE  P1 map, ${date}
CELL ${realcell} ${ALAT} 90.0 90.0 ${realang}
SYMMETRY 1
LABOUT H K L F PHI FOM
CTYPOUT H H H F P W
FILE ${infile}
SKIP 0
END
eof
#
#
#############################################################################
${proc_2dx}/linblock "cad - to create MTZ file for volume"
#############################################################################  
#
\rm -f processed3D.mtz
#
${bin_ccp4}/cad hklin1 SCRATCH/processed_f2mtz.mtz hklout processed3D.mtz << eof
sort h k l
resolution overall ${RESMAX} ${RESMIN}
outlim spacegroup 1
labin file 1 all
valm NaN NOOUTPUT
end
eof
#
echo "<<@progress: +5>>"
#
echo "# IMAGE: processed3D.mtz <MTZ: Generated MTZ >" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "fft - to calculate map with X,Y,Z orientation"
#############################################################################
#
\rm -f SCRATCH/processed_fft.map
${bin_ccp4}/fft hklin processed3D.mtz mapout SCRATCH/processed_fft.map  << eot
LABIN F1=F  PHI=PHI W=FOM ##
AXIS X,Y,Z
SCALE F1 1 0
SYMMETRY 1
RESOLUTION ${RESMIN} ${RESMAX}
TITLE Sym=${SYM}, res=${RESMAX}, T=0
GRID 400 400 400
XYZLIM 0 399 0 399 0 399
RHOLIM 250.0
HKLMAX 199 199 199
END
eot
#
#
echo "<<@progress: +5>>"
#
#
#############################################################################
${proc_2dx}/linblock "maprot - to invert the handedness"
#############################################################################
#
\rm -f SCRATCH/processed_maprot.map
${bin_ccp4}/maprot mapin SCRATCH/processed_fft.map wrkout SCRATCH/processed_maprot.map << eot
MODE FROM
CELL WORK ${realcell} ${ALAT} 90.0 90.0 ${realang}
GRID WORK ${cellx} ${celly} ${ALAT}
XYZLIM 0 ${cellxm1} 0 ${cellym1} 0 ${ALATm1}
SYMM WORK 1
AVER
ROTA MATRIX   1.000 0.000 0.000      0.000 1.000 0.000    0.000 0.000 -1.000
TRANS  0.000 0.000 0.000
eot
#
echo "<<@progress: +5>>"
#
#############################################################################
${proc_2dx}/linblock "mapmask - to bring the protein to center"
#############################################################################
#
\rm -f processed3D.map
${bin_ccp4}/mapmask mapin SCRATCH/processed_maprot.map mapout processed3D.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim -0.5 0.5 -0.5 0.5 -0.5 0.5
END
eof
#
echo "# IMAGE: processed3D.map <MAP: processed map with correct handedness >" >> LOGS/${scriptname}.results
#
#
#############################################################################
${proc_2dx}/linblock "mapmask - to extend the map"
#############################################################################
#
\rm -f processed3D_extended.map
${bin_ccp4}/mapmask mapin processed3D.map mapout processed3D_extended.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim -1.0 0.999 -1.0 0.999 -0.5 0.5
END
eof
#
echo "# IMAGE-IMPORTANT: processed3D_extended.map <MAP: Extended MAP >" >> LOGS/${scriptname}.results
#
echo "<<@progress: +5>>"
#
#############################################################################
# Create a subvolume if asked for!
############################################################################
if ( ${calculate_subvolume}x != "0x" ) then  
  #############################################################################
  ${proc_2dx}/linblock "maprot - to rotate volume for sub-volume preparation"
  #############################################################################
  #
  set ALAT2 = `echo ${ALAT} | awk '{ s = $1 / 2.0 } END { print s }'`
  #
  \rm -f SCRATCH/processed_rot_volume.map
  ${bin_ccp4}/maprot mapin SCRATCH/processed_maprot.map wrkout SCRATCH/processed_rot_volume.map << eot
MODE FROM
CELL WORK ${realcell} ${ALAT} 90.0 90.0 ${realang}
GRID WORK ${cellx} ${celly} ${ALAT}
XYZLIM 0 ${cellxm1} 0 ${cellym1} 0 ${ALATm1}
SYMM WORK 1
AVER
ROTA POLAR 0.0 0.0 45.0
TRANS  0.0 -20.0 ${ALAT2}
eot
  #
  #echo "# IMAGE: SCRATCH/processed_rot_volume.map <MAP: rotated 3D Volume>" >> LOGS/${scriptname}.results
  #

  #############################################################################
  ${proc_2dx}/linblock "mapmask - to cut sub-volume"
  #############################################################################
  #   
  # 0.7071 = 1/sqrt(2)
  set middlex = "0.45"
  set middley = "0.45"
  set diam = "0.82"
  #
  set limxmin = `echo ${middlex} ${diam} | awk '{ s = $1 - ( $2 / 2.0 ) } END { print s }'`
  set limxmax = `echo ${middlex} ${diam} | awk '{ s = $1 + ( $2 / 2.0 ) } END { print s }'`
  set limymin = `echo ${middley} ${diam} | awk '{ s = $1 - ( $2 / 2.0 ) } END { print s }'`
  set limymax = `echo ${middley} ${diam} | awk '{ s = $1 + ( $2 / 2.0 ) } END { print s }'`
  #
  echo ":Limits are ${limxmin} to ${limxmax}, ${limymin} to ${limymax}"
  #
  \rm -f processed_sub.map
  ${bin_ccp4}/mapmask mapin SCRATCH/processed_rot_volume.map mapout processed_sub.map << eof
AXIS X,Y,Z
scale factor 1
xyzlim ${limxmin} ${limxmax} ${limymin} ${limymax} 0.0 1.0
pad -100
SYMM 1
END
eof
  #
  echo "# IMAGE-IMPORTANT: processed_sub.map <MAP: Final 3D Volume (Sub Volume)>" >> LOGS/${scriptname}.results
  #

endif
#############################################################################
#
set final_map = "processed_sub"
#
##############################################################################
${proc_2dx}/linblock "Generating the bead model"
##############################################################################
#
\rm -f SCRATCH/bead_model.pdb
#
${bin_2dx}/beadgen_comp.exe ${final_map}.map SCRATCH/bead_model.pdb ${number_of_beads} ${density_threshold_bead} ${noise_level_bead} 7243
#
#
#
#############################################################################
${proc_2dx}/linblock "Converting bead model pdb to mrc"
#############################################################################
#
\rm -f SCRATCH/bead_model_e2pdb2mrc.marc
#
e2pdb2mrc.py -R ${RESMAX} -A 1.0 -B ${ALAT} SCRATCH/bead_model.pdb SCRATCH/bead_model_e2pdb2mrc.mrc
#
#
#############################################################################
${proc_2dx}/linblock "Setting the correct size for bead model map"
#############################################################################
#
\rm -f bead_model.map
\rm -f bead_model.mrc
#
set input_size = `${bin_2dx}/map_size.exe ${final_map}.map`
#set cellx_int = `printf "%.0f" ${cellx}`
#set celly_int = `printf "%.0f" ${celly}`
#set cellz_int = `printf "%.0f" ${ALAT}`
#
# Add 1 to the z dimetions for correct matching
#set cellz_int_p1 = `echo ${cellz_int} | awk '{ s = $1 + 1 } END {print s}'`
#
echo "Chopping bead model to size: ${input_size}"
e2proc3d.py --clip ${input_size} SCRATCH/bead_model_e2pdb2mrc.mrc bead_model.mrc
#
cp -f bead_model.mrc bead_model.map
#
echo "# IMAGE: bead_model.map <MAP: Density map of Bead Model>" >> LOGS/${scriptname}.results
#

############# START SF-HIST ITERATIONS ######################################
#
\rm -f SCRATCH/sf_bead_model.dat
#
e2proc3d.py bead_model.mrc SCRATCH/junk.mrc --calcsf=SCRATCH/sf_bead_model.dat
#
\rm -f SCRATCH/junk.mrc
#
set sf_in_map = "${final_map}"
echo "# IMAGE: ${sf_in_map}.map <MAP: ${sf_in_map}>" >> LOGS/${scriptname}.results
#
set i = 1
while ($i <= ${number_sf_hist_iterations})
    #############################################################################
    ${proc_2dx}/linblock "Setting the structure factors for iteration ${i}"
    #############################################################################
    #
    \rm -f ${sf_in_map}_sf.mrc
    #
    e2proc3d.py ${sf_in_map}.map ${sf_in_map}_sf.mrc --setsf=SCRATCH/sf_bead_model.dat
    #
    \mv -f ${sf_in_map}_sf.mrc ${sf_in_map}_sf.map
    echo "# IMAGE: ${sf_in_map}_sf.map <MAP: ${sf_in_map}_sf>" >> LOGS/${scriptname}.results
    #
    #############################################################################
    ${proc_2dx}/linblock "Matching real space histogram for iteration ${i}"
    #############################################################################
    #
    \rm -f ${sf_in_map}_sf_hist.map
    #
    ${bin_2dx}/maphist.exe ${sf_in_map}_sf.map bead_model.mrc ${sf_in_map}_sf_hist.map
    #
    echo "# IMAGE: ${sf_in_map}_sf_hist.map <MAP: ${sf_in_map}_sf_hist>" >> LOGS/${scriptname}.results
    #
    set sf_in_map = "${sf_in_map}_sf_hist"
    @ i = $i + 1
    #
end
############################################################################
#
#############################################################################
${proc_2dx}/linblock "Setting the structure factors for iteration ${i}"
#############################################################################
#
\rm -f ${sf_in_map}_sf.mrc
#
e2proc3d.py ${sf_in_map}.map ${sf_in_map}_sf.mrc --setsf=SCRATCH/sf_bead_model.dat
#
@ i = $i - 1
\mv -f  ${sf_in_map}_sf.mrc ${sf_in_map}_sf.map
#
echo "# IMAGE-IMPORTANT: ${sf_in_map}_sf.map <MAP: ${sf_in_map}_sf - Final processed map>" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "${scriptname} normal end."
#############################################################################
#
echo "<<@progress: 100>>"
#
#
