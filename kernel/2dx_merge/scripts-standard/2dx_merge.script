#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Merge Once                                                         #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 01/03/2007                                             #
# Last Modification: 01/03/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 20
#
# MANUAL: This script allows merging the selected image data into one merge dataset.
#
# MANUAL: Select only the one best non-tilted image and run this script with that one image.
#
# MANUAL: Then align the other images to it (using Refine Once), starting with non-tilted images, and slowly add more and more tilted images. After each call of "Refine Once" you should run "Merge Once" again, to merge those aligned images into a new reference. 
#
# DISPLAY: MergeResolution
# DISPLAY: merge_modus
# DISPLAY: zstarrange
# DISPLAY: Calc_from_zstarrange
# DISPLAY: zstarrange_real
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: merge_res_limit
# DISPLAY: merge_ML_data
# DISPLAY: tempkeep
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: MergeIQMAX
# DISPLAY: SYM
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: ILIST
# DISPLAY: MergeIPAT
# DISPLAY: MergeDELPLT
# DISPLAY: MergeDELPRO
# DISPLAY: MergeRminRmax
# DISPLAY: MergeRCUT
# DISPLAY: MergePFACT
# DISPLAY: MergeBINSIZ
# DISPLAY: MergeNCYCLS
# DISPLAY: MergeMPRINT
# DISPLAY: MergeHKMAX
# DISPLAY: MergeAK
# DISPLAY: MergeIWF
# DISPLAY: MergeIWP
# DISPLAY: max_amp_correction
# DISPLAY: plotres_rings
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set MergeResolution = ""
set merge_modus = ""
set zstarwin  = ""
set zstarrange  = ""
set Calc_from_zstarrange = ""
set zstarrange_real = ""
set RESMIN = ""
set RESMAX = ""
set merge_res_limit = ""
set merge_ML_data = ""
set tempkeep = ""
set realcell = ""
set realang = ""
set ALAT = ""
set SYM = ""
set merge_ref_num = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set ILIST = ""
set MergeIPAT = ""
set MergeDELPLT = ""
set MergeDELPRO = ""
set MergeRminRmax = ""
set MergeIQMAX = ""
set MergeRCUT = ""
set MergePFACT = ""
set MergeBINSIZ = ""
set MergeNCYCLS = ""
set MergeMPRINT = ""
set MergeHKMAX = ""
set MergeAK = ""
set MergeIWF = ""
set MergeIWP = ""
set max_amp_correction = ""
set plotres_rings = ""
set lattice = ""
#
#$end_vars
#
set scriptname = 2dx_merge
\rm -f LOGS/${scriptname}.results
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
if ( ${Calc_from_zstarrange} == "y" ) then
  set zstarrange_real = `echo ${zstarrange} ${ALAT} | awk '{ s = 1.0 / ( $1 ) } END { print s }'`
  echo "set zstarrange_real = ${zstarrange_real}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "Calculating vertical resolution as ${zstarrange_real} Angstroems."
else
  set zstarrange = `echo ${zstarrange_real} ${ALAT} | awk '{ s = 1.0 / ( $1 ) } END { print s }'`
  echo "set zstarrange = ${zstarrange}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "Calculating zstarrange as ${zstarrange} (with 0.5 = Nyquist resolution)."
endif
#
set zmin = `echo ${zstarrange} | awk '{s = -$1} END {print s}'`
set zminmax = `echo ${zmin},${zstarrange}`
echo zminmax = ${zminmax}
#
echo "<<@progress: 1>>"
#
#################################################################################
${proc_2dx}/linblock "Verifying some parameters"
#################################################################################
#
if ( ${MergeHKMAX}x == 'x' ) then
  set MergeHKMAX = '20'
  ${proc_2dx}/linblock "ERROR: correcting MergeHKMAX to ${MergeHKMAX}"
  echo "set MergeHKMAX = ${MergeHKMAX}" >> LOGS/${scriptname}.results
endif
#
if ( `echo ${RESMIN} ${RESMAX} | awk '{ if ( $1 < $2 ) { s = 1 } else { s = 0 }} END { print s }'` == 1 ) then
  set oldval = ${RESMIN}
  set RESMIN = ${RESMAX}
  set RESMAX = ${oldval}
  ${proc_2dx}/linblock "ERROR: exchanging RESMIN and RESMAX, to RESMIN=${RESMIN}, and RESMAX=${RESMAX}"
  echo "set RESMIN = ${RESMIN}" >> LOGS/${scriptname}.results
  echo "set RESMAX = ${RESMAX}" >> LOGS/${scriptname}.results
endif
#
echo "<<@progress: 5>>"
#
if ( ${MergeAK}x == 'x' ) then
  set MergeAK = "10"
  echo "set MergeAK = ${MergeAK}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeAK corrected to ${MergeAK}"
endif
#
if ( ${merge_res_limit}x == 'x' ) then
  set merge_res_limit = "0"
  echo "set merge_res_limit = ${merge_res_limit}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: merge_res_limit corrected to ${merge_res_limit}"
endif
#
if ( ${MergeIWF}x == 'x' ) then
  set MergeIWF = "0"
  echo "set MergeIWF = ${MergeIWF}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeIWF corrected to ${MergeIWF}"
endif
#
if ( ${MergeIWP}x == 'x' ) then
  set MergeIWP = "1"
  echo "set MergeIWP = ${MergeIWP}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: MergeIWP corrected to ${MergeIWP}"
endif
#
if ( ${merge_ML_data}x == 'x' ) then
  set merge_ML_data = "0"
  echo "set merge_ML_data = ${merge_ML_data}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: merge_ML_data corrected to ${merge_ML_data}"
endif
#
if ( ${ILIST}x == 'x' ) then
  set ILIST = "n"
  echo "set ILIST = ${ILIST}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: ILIST corrected to ${ILIST}"
endif
#
if ( ${ILIST} == "n" ) then
  set ILIST_VAL = 0
else
  set ILIST_VAL = 1
endif
#
if(${MergeIWF} == "0")then
  set MergeIWF_VAL = -1
endif
if(${MergeIWF} == "1")then
  set MergeIWF_VAL = 0
endif
if(${MergeIWF} == "2")then
  set MergeIWF_VAL = 1
endif
if(${MergeIWP} == "0")then
  set MergeIWP_VAL = -2
endif
if(${MergeIWP} == "1")then
  set MergeIWP_VAL = -1
endif
if(${MergeIWP} == "2")then
  set MergeIWP_VAL = 0
endif
if(${MergeIWP} == "3")then
  set MergeIWP_VAL = 1
endif
echo MergeAK = ${MergeAK}
echo MergeIWF_VAL = ${MergeIWF_VAL}
echo MergeIWP_VAL = ${MergeIWP_VAL}
#
#############################################################################
${proc_2dx}/linblock "sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
############################################################################# 
${proc_2dx}/lin "2dx_merge_makedirs - to create all required subdirectories"
#############################################################################
#
${proc_2dx}/2dx_merge_makedirs
#
echo "<<@progress: 10>"
#
#############################################################################
${proc_2dx}/linblock "Sourcing 2dx_merge.sub"
#############################################################################
#
source ${proc_2dx}/2dx_merge_merge_sub.com
#
if ( ${merge_modus} == "3D" ) then
  #
  echo "<<@progress: 70>>"
  #
  #############################################################################
  ${proc_2dx}/linblock "Sourcing 2dx_merge_latline.sub"
  #############################################################################
  #
  source ${proc_2dx}/2dx_merge_latline_sub.com
  #
endif
#
#############################################################################
${proc_2dx}/linblock "2dx_merge normal end."
#############################################################################
#
echo "<<@progress: 100>>"
#
