#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Refine Once                                                        #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 01/03/2007                                             #
# Last Modification: 01/03/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 38
#
# MANUAL: This script allows refining the phase origins of the selected images.
# 
# MANUAL: This does one single alignment step of the selected images against the available reference.
#
# DISPLAY: MergeResolution
# DISPLAY: merge_modus
# DISPLAY: zstarwin
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: merge_res_limit
# DISPLAY: merge_reference
# DISPLAY: tempkeep
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: MergeStepSize
# DISPLAY: IBOXPHS
# DISPLAY: SYM
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: MergeIQMAX
# DISPLAY: Merge_Reference_IQMAX
# DISPLAY: MergeHKMAX
# DISPLAY: Merge_Reference_HKMAX
# DISPLAY: ILIST
# DISPLAY: refbeamtilt
# DISPLAY: reftiltgeo
# DISPLAY: ITAXASTEP
# DISPLAY: RTAXASIZE
# DISPLAY: ITANGLSTEP
# DISPLAY: RTANGLSIZE
# DISPLAY: merge_reference
# DISPLAY: merge_ref_num
# DISPLAY: merge_comment_1
# DISPLAY: merge_comment_2
# DISPLAY: merge_comment_3
# DISPLAY: merge_comment_4
# DISPLAY: merge_comment_5
# DISPLAY: merge_comment_6
# DISPLAY: merge_comment_7
# DISPLAY: merge_comment_8
# DISPLAY: merge_comment_9
# DISPLAY: max_amp_correction
# DISPLAY: merge_data_type
# DISPLAY: refine_data_type
# DiSPLAY: RFACAMP
# DISPLAY: Thread_Number
#
#$end_local_vars
#
set app_2dx_image = ""
set bin_2dx = ""
set proc_2dx = ""
#
set create_merged_dataset = ""
set MergeResolution = ""
set merge_modus = ""
set zstarwin = ""
set RESMIN = ""
set RESMAX = ""
set merge_res_limit = ""
set tempkeep = ""
set realcell = ""
set realang = ""
set ALAT = ""
set MergeStepSize = ""
set IBOXPHS = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set ILIST = ""
set MergeIQMAX = ""
set Merge_Reference_IQMAX = ""
set MergeHKMAX = ""
set Merge_Reference_HKMAX = ""
set refbeamtilt = ""
set reftiltgeo = ""
set merge_reference = ""
set merge_ref_num = ""
set max_amp_correction = ""
set merge_data_type = ""
set refine_data_type = ""
set ITAXASTEP = ""
set RTAXASIZE = ""
set ITANGLSTEP = ""
set RTANGLSIZE = ""
set Reflections_Unique = ""
set num_amplitudes_observed = ""
set num_phases_observed = ""
set num_reflections_fitted = ""
set num_reflections_FOM50 = ""
set overall_R_factor = ""
set overall_phase_residual = ""
set overall_weighted_R_factor = ""
set overall_weighted_phase_residual = ""
set RFACAMP = ""
set Thread_Number = ""
#
#$end_vars
#
setenv OMP_NUM_THREADS 8
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set dirfile = "2dx_merge_dirfile.dat"
set dirnum = `cat ${dirfile} | wc -l`
set maxthread = `echo ${Thread_Number} ${dirnum} | awk '{if ($1<$2/2) { s = $1 } else { s = int($2 / 2) }} END { print s }'`
if ( ${maxthread} == "0" ) then
  set maxthread = 1
endif
#
set number = 1
if ( ${ILIST} == "n" ) then
  set IVERBOSE = 1
else
  set IVERBOSE = 6
endif
#
set date = `date`
echo date = ${date}
#
set scriptname = 2dx_refine
\rm -f LOGS/${scriptname}.results
#
if ( ${ILIST}x == 'x' ) then
  set ILIST = "n"
  echo "set ILIST = ${ILIST}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: ILIST corrected to ${ILIST}"
endif
#
if ( ${ILIST} == "n" ) then
  set ILIST_VAL = 0
else
  set ILIST_VAL = 1
endif
#
# The following is to make sure that for the next "Import Images", the default is correctly initialized.
set initialization_reset = "y"
set initialization_executable = "y"
echo "set initialization_reset = ${initialization_reset}" >> LOGS/${scriptname}.results
echo "set initialization_executable = ${initialization_executable}" >> LOGS/${scriptname}.results
#
echo "<<@progress: 1>>"
#
#################################################################################
${proc_2dx}/linblock "Verifying some parameters"
#################################################################################
#
if ( ${refine_data_type}x == 'x' ) then
  set refine_data_type = "0"
  echo "set refine_data_type = ${refine_data_type}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: refine_data_type corrected to ${refine_data_type}"
endif
#
if ( ${merge_res_limit}x == 'x' ) then
  echo ":: "
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/linblock "#"
  echo ":: "
  echo ":: "
  ${proc_2dx}/linblock "ERROR: Parameter Database in 2dx_merge is outdated."
  ${proc_2dx}/linblock "Use in 2dx_image the menu function 'Save As Project Default' to update."
  echo ":: "
  echo ":: "
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/protest "Aborting."
endif
#
if ( ${MergeHKMAX}x == 'x' ) then
  set MergeHKMAX = '20'
  ${proc_2dx}/linblock "ERROR: correcting MergeHKMAX to ${MergeHKMAX}"
  echo "set MergeHKMAX = ${MergeHKMAX}" >> LOGS/${scriptname}.results
endif
#
if ( `echo ${RESMIN} ${RESMAX} | awk '{ if ( $1 < $2 ) { s = 1 } else { s = 0 }} END { print s }'` == 1 ) then
  set oldval = ${RESMIN}
  set RESMIN = ${RESMAX}
  set RESMAX = ${oldval}
  ${proc_2dx}/linblock "ERROR: exchanging RESMIN and RESMAX, to RESMIN=${RESMIN}, and RESMAX=${RESMAX}"
  echo "set RESMIN = ${RESMIN}" >> LOGS/${scriptname}.results
  echo "set RESMAX = ${RESMAX}" >> LOGS/${scriptname}.results
endif
#
echo "<<@progress: 5>>"
#
#############################################################################
${proc_2dx}/linblock "Sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
############################################################################# 
${proc_2dx}/lin "2dx_merge_makedirs - to create all required subdirectories"
#############################################################################
#
source ${proc_2dx}/2dx_merge_makedirs
#
echo "<<@progress: 10>"
#
set NPRG = 1
if ( ${merge_modus} == '2D' ) then
  if ( ! -e APH/merge.aph ) then
    ${proc_2dx}/linblock "ERROR: APH/merge.aph not found. No reference for refinement available."
    ${proc_2dx}/protest "Run Merging script first."
  endif
  if ( ${reftiltgeo} == "y" ) then
    # tilt geometry refinement only in 3D.
    ${proc_2dx}/protest "ERROR: tilt geometry refinement only possible in 3D mode."
  endif
endif
if ( ${merge_modus} == '3D' ) then
  if ( ${merge_reference} == '0' ) then
    # Use merge.aph files
    if ( ! -e APH/merge.aph ) then
      ${proc_2dx}/linblock "ERROR: APH/merge.aph not found. No reference for refinement available."
      ${proc_2dx}/protest "Run Merging script first."
    endif
    if ( ${reftiltgeo} == "y" ) then
      # tilt geometry refinement only possible with refined lattice lines in MTZ data, not with APH data.
      ${proc_2dx}/linblock "ERROR: tilt geometry refinement only possible with refined lattice lines in MTZ file."
      ${proc_2dx}/linblock "ERROR: Conflict between parameter USE MERGED DATA... and REFINE TILTGEOMETRY..."
      ${proc_2dx}/protest "If you want to refine the tilt geometry, switch to MTZ data first."
    endif
  else
    # User interpolated lattice lines latlinesref_MRClefthanded.mtz
    if ( ! -e merge3D_MRClefthanded.mtz ) then
      ${proc_2dx}/linblock "ERROR: merge_MRClefthanded.mtz not found. No reference for refinement available."
      ${proc_2dx}/protest "Run Merging script first."
    endif
    set NPRG = 3
  endif
endif
#
if ( ${merge_ref_num} != "0" ) then
  if ( -d REGISTERS/Reg_${merge_ref_num} ) then
     #############################################################################
     ${proc_2dx}/linblock "Using merged dataset from register ${merge_ref_num}."
     #############################################################################  
     echo "::" `cat REGISTERS/Reg_${merge_ref_num}/COMMENT.txt | head -1`
     echo "::" `cat REGISTERS/Reg_${merge_ref_num}/COMMENT.txt | head -2 | tail -1`
     echo " "
    if ( ${NPRG} == "3" ) then
      # Use MTZ file
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge3D_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz ."
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz .
      endif
      #
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge3Dref_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz ."
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz .
      endif
    else
      # Use APH file
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge2D_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz ." 
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz .
      endif
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge.aph ) then
        ${proc_2dx}/protest "ERROR: merge.aph not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge.aph APH/merge.aph"
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge.aph APH/merge.aph
      endif
    endif
  else
    ${proc_2dx}/protest "ERROR: Register ${merge_ref_num} does not contain data."
  endif
  #
endif
#
#############################################################################
${proc_2dx}/linblock "Setting APH file types to use"
#############################################################################
#
# This translates the list of directories to work on into one single long line:
cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
set olddir = $PWD
#
if ( ${scriptname} == "2dx_refine" ) then
 foreach imagefile ( ${dirlist} ) 
  cd ..
  cd ${imagefile}
  if ( ! -e 2dx_image.cfg ) then
    ${proc_2dx}/protest "ERROR: 2dx_image.cfg not found in ${imagefile}"
  endif
  set imagename_local = `cat 2dx_image.cfg | grep 'set imagename =' | cut -d\" -f2`
  cd APH
  set APH_file = ${imagename_local}_fou_ctf.aph
  # Already set:
  # if ( ${refine_data_type} == '0' ) then
  #   set APH_file = ${imagename_local}_fou_ctf.aph
  # endif
  if ( ${refine_data_type} == '1' ) then
    if ( ! -e ${imagename_local}_ctf.aph ) then
      set APH_file = ${imagename_local}_syn_ctf.aph
    else
      echo ":${imagename_local}_syn_ctf.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '2' ) then
    if ( -e ${imagename_local}_movie_fou_ctf.aph ) then
      set APH_file = ${imagename_local}_movie_fou_ctf.aph
    else
      echo ":${imagename_local}_movie_fou_ctf.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '3' ) then
    if ( -e ${imagename_local}_movie_syn_ctf.aph ) then
      set APH_file = ${imagename_local}_movie_syn_ctf.aph
    else
      echo ":${imagename_local}_movie_syn_ctf.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '4' ) then 
    if ( -e ${imagename_local}_movieB_fou_ctf.aph ) then
      set APH_file = ${imagename_local}_movieB_fou_ctf.aph
    else
      echo ":${imagename_local}_movieB_fou_ctf.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '5' ) then 
    if ( -e ${imagename_local}_movieB_syn_ctf.aph ) then
      set APH_file = ${imagename_local}_movieB_syn_ctf.aph
    else
      echo ":${imagename_local}_movieB_syn_ctf.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '6' ) then
    if ( -e ML_result.aph ) then
      set APH_file = ML_result.aph
    else
      echo ":ML_result.aph not found."
    endif
  endif
  if ( ${refine_data_type} == '7' ) then
    set QVAL2_local =  `cat ../2dx_image.cfg | grep 'set QVAL2 =' | cut -d\" -f2`
    set QVALS_local =  `cat ../2dx_image.cfg | grep 'set QVALS =' | cut -d\" -f2`
    if ( ${QVALS_local} == '.' ) then
      set QVALS_local = 0
    endif 
    set QVALMA_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALMA =' | cut -d\" -f2`
    if ( ${QVALMA_loctmp} == '.' ) then
      set QVALMA_loctmp = 0
    endif 
    set QVALAS_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALAS =' | cut -d\" -f2`
    if ( ${QVALAS_loctmp} == '.' ) then
      set QVALAS_loctmp = 0
    endif 
    set QVALMB_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALMB =' | cut -d\" -f2`
    if ( ${QVALMB_loctmp} == '.' ) then
      set QVALMB_loctmp = 0
    endif 
    set QVALBS_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALBS =' | cut -d\" -f2`
    if ( ${QVALBS_loctmp} == '.' ) then
      set QVALBS_loctmp = 0
    endif 
    set QVALMA_local  = `echo ${QVALMA_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    set QVALAS_local  = `echo ${QVALAS_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    set QVALMB_local  = `echo ${QVALMB_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    set QVALBS_local  = `echo ${QVALBS_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    echo ${QVAL2_local} > awk.dat
    echo ${QVALS_local} >> awk.dat
    echo ${QVALMA_local} >> awk.dat
    echo ${QVALAS_local} >> awk.dat
    echo ${QVALMB_local} >> awk.dat
    echo ${QVALBS_local} >> awk.dat
    #
    # awk script to find max in CR-separated list:
    #  {if(min=="")min=max=$1}; if($1>max) {max=$1}; if($1< min) {min=$1}; total+=$1; count+=1} END {print total/count, min, max}
    #
    set QVAL_max = `awk '{if(max==""){max=$1;best=1;count=1}; if($1>max) {max=$1;best=count}; count += 1} END {print max}' awk.dat`
    set QVAL_best = `awk '{if(max==""){max=$1;best=1;count=1}; if($1>max) {max=$1;best=count}; count += 1} END {print best}' awk.dat`
    \rm -f awk.dat
    if ( ${QVAL_best} == '1' ) then
      set APH_file = ${imagename_local}_fou_ctf.aph
    endif
    if ( ${QVAL_best} == '2' ) then
      set APH_file = ${imagename_local}_syn_ctf.aph
    endif
    if ( ${QVAL_best} == '3' ) then
      set APH_file = ${imagename_local}_movie_fou_ctf.aph
    endif
    if ( ${QVAL_best} == '4' ) then
      set APH_file = ${imagename_local}_movie_syn_ctf.aph
    endif
    if ( ${QVAL_best} == '5' ) then
      set APH_file = ${imagename_local}_movieB_fou_ctf.aph
    endif
    if ( ${QVAL_best} == '6' ) then
      set APH_file = ${imagename_local}_movieB_syn_ctf.aph
    endif
    if ( ! -e ${APH_file} ) then
      set APH_file = ${imagename_local}_fou_ctf.aph
      echo "::${APH_file} should be best, but was not found."
    endif
  endif
  if ( ${refine_data_type} == '8' ) then
    set QVAL2_local =  `cat ../2dx_image.cfg | grep 'set QVAL2 =' | cut -d\" -f2`
    set QVALMA_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALMA =' | cut -d\" -f2`
    if ( ${QVALMA_loctmp} == '.' ) then
      set QVALMA_loctmp = 0
    endif 
    set QVALMB_loctmp =  `cat ../2dx_image.cfg | grep 'set QVALMB =' | cut -d\" -f2`
    if ( ${QVALMB_loctmp} == '.' ) then
      set QVALMB_loctmp = 0
    endif 
    set QVALMA_local  = `echo ${QVALMA_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    set QVALMB_local  = `echo ${QVALMB_loctmp} 1.1 | awk '{ s = $1 * $2 } END { print s }'`
    echo ${QVAL2_local} > awk.dat
    echo ${QVALMA_local} >> awk.dat
    echo ${QVALMB_local} >> awk.dat
    #
    set QVAL_max = `awk '{if(max==""){max=$1;best=1;count=1}; if($1>max) {max=$1;best=count}; count += 1} END {print max}' awk.dat`
    set QVAL_best = `awk '{if(max==""){max=$1;best=1;count=1}; if($1>max) {max=$1;best=count}; count += 1} END {print best}' awk.dat`
    \rm -f awk.dat
    if ( ${QVAL_best} == '1' ) then
      set APH_file = ${imagename_local}_fou_ctf.aph
    endif
    if ( ${QVAL_best} == '2' ) then
      set APH_file = ${imagename_local}_movie_fou_ctf.aph
    endif
    if ( ${QVAL_best} == '3' ) then
      set APH_file = ${imagename_local}_movieB_fou_ctf.aph
    endif
    if ( ! -e ${APH_file} ) then
      set APH_file = ${imagename_local}_fou_ctf.aph
      echo "::${APH_file} should be best, but was not found."
    endif
  endif
  echo ":In directory ${imagename_local}: Using APH file ${APH_file}. "
  \rm -f ${imagename_local}_ctf.aph
  \ln -s ${APH_file} ${imagename_local}_ctf.aph
  cd ${olddir}
 end
endif
#
#############################################################################
${proc_2dx}/linblock "Compile refinement script"
#############################################################################
#
set scriptBfile = "2dx_merge_scriptB.com"
set postprocessingfile = "2dx_merge_postprocessing.com"
#
# reference HKL files are generated directly in the "Generate Image Maps" script, not here:
set genref = "0"
#
if ( ${refbeamtilt} == 'y' ) then
  if ( ${merge_modus} == '3D' ) then
    set NBM = T
    ${proc_2dx}/linblock "NBM=T, doing beam tilt refinement."
  else
    ${proc_2dx}/linblock "ERROR: Beamtilt Refinement only in 3D modus possible."
    set NBM = F
    ${proc_2dx}/linblock "NBM=F, no beam tilt refinement."
  endif
else
  set NBM = F
  ${proc_2dx}/linblock "NBM=F, no beam tilt refinement."
endif
#
if ( ${reftiltgeo} == 'y' ) then
  if ( ${merge_modus} == '3D' ) then
    set NTL = T
    ${proc_2dx}/linblock "NTL=T, doing crystal tiltangle and tiltaxis refinement."
  else
    ${proc_2dx}/linblock "ERROR: Tilt Geometry Refinement only in 3D modus possible."
    set NTL = F
    ${proc_2dx}/linblock "NTL=F, no crystal tiltangle or tiltaxis refinement."
  endif
else
  set NTL = F
  ${proc_2dx}/linblock "NTL=F, no crystal tiltangle or tiltaxis refinement."
endif
#
echo "dummy" > SCRATCH/job_00_${scriptBfile}
\rm -f SCRATCH/job_*_${scriptBfile}
#
${bin_2dx}/2dx_merge_compileB.exe << eot
${scriptname}-tmp.py
${scriptname}-tmp.reflections
${scriptname}-tmp.console
${proc_2dx}
${bin_2dx}
${dirfile}
${scriptBfile}
${postprocessingfile}
${genref}
${spcgrp}
${realcell}
${realang}
${zstarwin}
${ALAT}
${IVERBOSE}
${MergeStepSize}
${RFACAMP}
${IBOXPHS}
${NPRG}
${NBM}
${NTL}
${ITAXASTEP}
${RTAXASIZE}
${ITANGLSTEP}
${RTANGLSIZE}
${Merge_Reference_IQMAX}
${Merge_Reference_HKMAX}
${merge_res_limit}
${RESMIN}
${RESMAX}
${refine_data_type}
${maxthread}
${ILIST_VAL}
0
eot
#
echo "<<@progress: +5>>"
#
#############################################################################
${proc_2dx}/linblock "Launching refinement script. CHECK OUTPUT in LOG: origtilt B output"
#############################################################################
#
echo "# IMAGE: SCRATCH/job_01_${scriptBfile} <CSH: First (01) refinement script>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/job_01_2dx_merge_scriptB.com.log <LOG: First (01) origtilt B output>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/job_01_${postprocessingfile} <CSH: First (01) refinement postprocessing script>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/job_${maxthread}_${scriptBfile} <CSH: Last (${maxthread}) refinement script>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/job_${maxthread}_2dx_merge_scriptB.com.log <LOG: Last (${maxthread}) origtilt B output>" >> LOGS/${scriptname}.results
echo "# IMAGE: SCRATCH/job_${maxthread}_${postprocessingfile} <CSH: Last (${maxthread}) refinement postprocessing script>" >> LOGS/${scriptname}.results
#
#
foreach scriptB ( SCRATCH/job_*_${scriptBfile} ) 
  if ( ${scriptB} != SCRATCH/job_${maxthread}_${scriptBfile} ) then
    echo Background nohup ${scriptB} \> ${scriptB}.log \&
    nohup ${scriptB} > ${scriptB}.log &
  else
    echo Forground ${scriptB} \> ${scriptB}.log
    ${scriptB} > ${scriptB}.log
  endif
end
#
#
echo "################################################"
echo "################################################"
echo "output in file SCRATCH/job_XX_2dx_merge_scriptB.com.log"
echo "################################################"
echo "################################################"
#
echo "Refinement jobs produced the following outpuf files:"
\ls -l SCRATCH/job_*_${scriptname}-tmp.console
\ls -l SCRATCH/job_*_${scriptname}-tmp.py
#
\rm -f SCRATCH/${scriptname}.console
echo "# IMAGE: SCRATCH/${scriptname}.console <LOG: Console output from merging>" >> LOGS/${scriptname}.results
foreach scriptBconsole ( SCRATCH/job_*_${scriptname}-tmp.console ) 
  cat ${scriptBconsole} >> SCRATCH/${scriptname}.console
  \rm -f ${scriptBconsole}
end
#
\rm -f SCRATCH/${scriptname}.py
echo "# IMAGE: SCRATCH/${scriptname}.py <PY: Refinement results update script>" >> LOGS/${scriptname}.results
foreach scriptBresults ( SCRATCH/job_*_${scriptname}-tmp.py ) 
  cat ${scriptBresults} >> SCRATCH/${scriptname}.py
  \rm -f ${scriptBresults}
end
#
python SCRATCH/${scriptname}.py
#
echo "<<@progress: 70>"
#
echo "# IMAGE: SCRATCH/2dx_merge_scriptB_postprocessing.log <LOG: origtilt B postprocessing output>" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "normalize_TANGL.py - to maintain tilt angles at initial values."
#############################################################################
#
python ${proc_2dx}/normalize_TANGL.py 2dx_merge_dirfile.dat
#
echo "<<@progress: 90>"
#
# Issue evaluate here to reload the Ph-Ori-Change column
# echo "<<@evaluate>>"
${proc_2dx}/linblock "Now, presse the REFRESH DISPLAY VIEW button top right to update the central table."
#
#############################################################################
${proc_2dx}/linblock "2dx_refine normal end."
#############################################################################
#
echo "<<@progress: 100>>"
#
