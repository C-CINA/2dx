#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Apply CTF correction (if needed)                                   #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 12/20/2014                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 70
#
# MANUAL: This script applies the CTF correction to the evaluated list of Amplitudes and Phases. 
#
# MANUAL: It uses 2dx_ctfapplyk.for, which applies CTF correction to the phases, but not the amplitudes. The correction value is added as last column to the output file, where the sign of that value shows if the phases have been inverted. The absolute value of that last column's entry shows the amplitude correction that should be applied to the amplitude - but it has not yet been applied.
#
# MANUAL: This makes only sense if the Amplitudes and Phases are not already CTF-corrected by some TTF correction. The script therefore automatically determines whether the data are from a TTF correction run (ttbox), or form a normal evaluation (mmbox).
#
# MANUAL: In order to use the movie-mode unbent APH-files, switch the "Enable movie-mode" option ON!
#
# DISPLAY: SYN_Unbending
# DISPLAY: movie_enable
# DISPLAY: imagesidelength
# DISPLAY: magnification
# DISPLAY: stepdigitizer
# DISPLAY: TLTAXIS
# DISPLAY: TLTANG 
# DISPLAY: TLTAXA 
# DISPLAY: TAXA 
# DISPLAY: TANGL
# DISPLAY: defocus
# DISPLAY: beamtilt
# DISPLAY: RESMAX
# DISPLAY: ctfplotresmax
# DISPLAY: imagename_original
# DISPLAY: CS
# DISPLAY: KV
# DISPLAY: phacon
# DISPLAY: ctf_ttf
# DISPLAY: tempkeep
# DISPLAY: comment
# DISPLAY: plotres_rings
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: lattice
# DISPLAY: ctfcor_imode
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set SCRATCH_DISK = ""
set FFTIR_DISK = ""
#
set SYN_Unbending = ""
set movie_enable = ""
set imagename = ""
set nonmaskimagename = ""
set defocus = ""
set imagenumber = ""
set lattice = ""
set ALAT = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set TAXA = ""
set TANGL = ""
set TLTAXIS = ""
set TLTANG = ""
set refori = ""
set phacon = ""
set ctfplotresmax = ""
set CS = ""
set KV = ""
set TLTANG = ""
set det_tilt = ""
set ctf_ttf = ""
set tempkeep = ""
set plotres_rings = ""
set realcell = ""
set realang = ""
set Thread_Number = ""
set ctfcor_noise = ""
set ctfcor_inner_tile = ""
set ctfcor_outer_tile = ""
set ctfcor_taper = ""
set ctfcor_imode = ""
set ctfcor_debug = ""
set ctfcor_maxamp_factor = ""
set QVAL2 = ""
set QVALS = ""
set QVALMA = ""
set QVALMB = ""
#
#$end_vars
#
set scriptname = 2dx_applyCTF
\rm -f LOGS/${scriptname}.results
#
source ${proc_2dx}/initialize
#
echo "<<@evaluate>>"
#
set date = `date`
echo date = ${date}
#
set iname = ${imagename}
#
set tmp1 = `echo ${refori} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
set refposix = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $1 ) } END { print s }'`
set refposiy = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $2 ) } END { print s }'`
if ( ${tmp1} != ${refposix} ) then
  set refori = ${refposix},${refposiy}
  echo "set refori = ${refori}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "Warning: refori needs to be integer numbers. Now corrected."
  echo "#WARNING: Warning: refori needs to be integer numbers. Now corrected." >> LOGS/${scriptname}.results
endif
echo refposix = ${refposix}
echo refposiy = ${refposiy}
#
if ( ${QVALMA}x == 'x' ) then
  set QVALMA = '.'
  echo "set QVALMA = ${QVALMA}" >> LOGS/${scriptname}.results
endif
#
if ( ${QVALMB}x == 'x' ) then
  set QVALMB = '.'
  echo "set QVALMB = ${QVALMB}" >> LOGS/${scriptname}.results
endif
#
set istilt = `echo $TLTANG | awk '{if ( -15.0 < $1 && $1 < 15.0 ) {s = 0} else {s = 1}} END {print s}'`
#
if ( ${istilt} == '0' ) then
  if ( ${ctf_ttf} != "CTF" ) then
    set ctf_ttf = "CTF"
    echo ":: WARNING: Correcting ctf_ttf to CTF."
    echo "set ctf_ttf = ${ctf_ttf}" >> LOGS/${scriptname}.results
  endif
endif
#
set ctfplotresmax_auto = `echo ${ctfplotresmax} | awk '{ if ( $1 < 0.0001 ) { s = 1 } else { s = 0 } } END { print s }'`
if ( ${ctfplotresmax_auto} == '1' ) then
  set ctfplotresmax = `echo ${RESMAX} | awk '{ if ( $1 > 5.0 ) { s = int($1 * 0.90) } else { s = $1 * 0.90 } }  END { print s }'`
  echo ":Setting max resolution for CTF plot to ${ctfplotresmax}."
endif
# set RESPLOTMAX = 0.3
set RESPLOTMAX = `echo ${ctfplotresmax} | awk '{ if ( $1 > 0.1 ) { s = 1.0 / $1 } else { s = 0.3 } } END { print s }'`
# 0.3 corresponds to 3.33 Angstroem for the border of the plot (Nyquist).
#
echo "<<@progress: 1>>"
source ${proc_2dx}/2dx_makedirs 
#
echo "# IMAGE-IMPORTANT: "FFTIR/${iname}_fft.mrc "<FFT of Image>" >> LOGS/${scriptname}.results
echo "# IMAGE-IMPORTANT: "FFTIR/${iname}_red_fft.mrc "<FFT of Downsampled Image>" >> LOGS/${scriptname}.results
#
if ( ${ctf_ttf} == 'TTF' ) then
  #############################################################################
  ${proc_2dx}/linblock "No CTFAPPLY needed, since TTF correction is already done."
  #############################################################################
  #
  if ( ${SYN_Unbending} == "0" ) then
    # FouFilter Unbending result is used:
    set outfile = ${iname}_fou_ttf.aph
    set final_outfile = ${iname}_fou_ctf.aph
  else
    # Synthetical Unbending result is used:
    set outfile = ${iname}_syn_ttf.aph
    set final_outfile = ${iname}_syn_ctf.aph
  endif
  #
  if ( ! -e APH/${outfile} ) then
    ${proc_2dx}/protest "ERROR: APH/${outfile} does not exist."
  endif
  #
  cd APH
  \rm -f ${final_outfile}
  \ln -s ${outfile} ${final_outfile}
  \rm -f ${iname}_ctf.aph
  \ln -s ${final_outfile} ${iname}_ctf.aph
  cd ..
  echo "# IMAGE-IMPORTANT: APH/${outfile} <APH File after TTF correction [H,K,A,P,IQ,Back,0]>" >> LOGS/${scriptname}.results
  echo "# IMAGE-IMPORTANT: APH/${final_outfile}  <Link to Final APH File [H,K,A,P,IQ,Back,0]>" >> LOGS/${scriptname}.results
  #
else
  #
  #############################################################################
  ${proc_2dx}/linblock "CTFAPPLY - to correct the microscope's CTF"
  #############################################################################
  #
  #
  #
  if ( ! -e APH/${iname}_fou.aph ) then
    if ( -e APH/${iname}.fou.nolimit.aph ) then
      \mv -f APH/${iname}.fou.nolimit.aph  APH/${iname}_fou.aph
    endif
    if ( -e APH/${iname}_fou_nolimit.aph ) then
      \mv -f APH/${iname}_fou_nolimit.aph  APH/${iname}_fou.aph
    endif
    if ( ! -e APH/${iname}_fou.aph ) then
      ${proc_2dx}/protest "ERROR: Neither APH/${iname}_fou.aph, nor APH/${iname}.fou.nolimit.aph, nor APH/${iname}_fou_nolimit.aph exist."
    endif
  endif

  if ( ! -e APH/${iname}_movie_fou.aph ) then
    if ( -e APH/${iname}_movie_fou_nolimit.aph ) then
      \mv -f APH/${iname}_movie_fou_nolimit.aph APH/${iname}_movie_fou.aph
    endif
  endif

  echo "<<@progress: 20>>"

  set CTF_infile = APH/${iname}_fou.aph
  set CTF_outfile = APH/${iname}_fou_ctf.aph
  set unbent_image = unbent
  set unbent_FFT = FFTIR/image_ctfcor_unbent_fft.mrc
  set algo = U2
  #######################################
  # UnbendII
  source ${proc_2dx}/2dx_applyCTF_sub.com
  #######################################
  echo "# IMAGE-IMPORTANT: ${CTF_infile} <APH File before CTF correction [H,K,A,P,IQ,Back]>" >> LOGS/${scriptname}.results
  echo "# IMAGE-IMPORTANT: ${CTF_outfile} <APH File after CTF correction [H,K,A,P(CTF phase flipped),IQ,Back,CTF]>" >> LOGS/${scriptname}.results
  if ( ${ctfcor_imode} == "0" || ${ctfcor_imode} == "1" || ${ctfcor_imode} == "2" || ${ctfcor_imode} == "3" ) then
    \mv -f CTFPLOT.PS PS/${iname}_unbend2_ctf.ps
    echo "# IMAGE-IMPORTANT: PS/${iname}_unbend2_ctf.ps <PS: IQ Plot after CTF correction>" >> LOGS/${scriptname}.results
  endif
  \mv -f PS/2dx_plotreska_canonical.ps PS/2dx_plotreska_unbend2_canonical.ps
  echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_unbend2_canonical.ps <PS: Resolution Circle Plot from canonical lattice>" >> LOGS/${scriptname}.results
  \mv -f PS/2dx_plotreska_measured.ps PS/2dx_plotreska_unbend2_measured.ps
  echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_unbend2_measured.ps <PS: Resolution Circle Plot from measured lattice>" >> LOGS/${scriptname}.results
  \mv SCRATCH/POWERHISTO.txt SCRATCH/POWERHISTO_unbend2.txt
  echo "# IMAGE: SCRATCH/POWERHISTO_unbend2.txt <Histogram of Power in PS>" >> LOGS/${scriptname}.results

  echo "<<@progress: 40>>"

  if ( ${movie_enable} == "y" ) then
    set CTF_infile = APH/${iname}_movie_fou.aph
    if ( -e ${CTF_infile} ) then
      set CTF_outfile = APH/${iname}_movie_fou_ctf.aph
      set unbent_image = frames/direct_sum_filt_upscale
      set unbent_FFT = frames/direct_sum_fft.mrc
      set algo = UMA
      #######################################
      # MovieA
      source ${proc_2dx}/2dx_applyCTF_sub.com
      #######################################
      echo "# IMAGE-IMPORTANT: ${CTF_infile} <MovieMode APH File before CTF correction [H,K,A,P,IQ,Back]>" >> LOGS/${scriptname}.results
      echo "# IMAGE-IMPORTANT: ${CTF_outfile} <MovieMode APH File after CTF correction [H,K,A,P(CTF phase flipped),IQ,Back,CTF]>" >> LOGS/${scriptname}.results
      if ( ${ctfcor_imode} == "0" || ${ctfcor_imode} == "1" || ${ctfcor_imode} == "2" || ${ctfcor_imode} == "3" ) then
        \mv -f CTFPLOT.PS PS/${iname}_movie_ctf.ps
        echo "# IMAGE-IMPORTANT: PS/${iname}_movie_ctf.ps <PS: MovieMode IQ Plot after CTF correction>" >> LOGS/${scriptname}.results
      endif
      \mv -f PS/2dx_plotreska_canonical.ps PS/2dx_plotreska_movie_canonical.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_movie_canonical.ps <PS: MovieMode Resolution Circle Plot from canonical lattice>" >> LOGS/${scriptname}.results
      \mv -f PS/2dx_plotreska_measured.ps PS/2dx_plotreska_movie_measured.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_movie_measured.ps <PS: MovieMode Resolution Circle Plot from measured lattice>" >> LOGS/${scriptname}.results
      \mv SCRATCH/POWERHISTO.txt SCRATCH/POWERHISTO_movie.txt
      echo "# IMAGE: SCRATCH/POWERHISTO_movie.txt <MovieMode Histogram of Power in PS>" >> LOGS/${scriptname}.results
    else
      ${proc_2dx}/linblock "ERROR: ${CTF_infile} not found."
    endif

    echo "<<@progress: 60>>"

    set CTF_infile = APH/${iname}_movieB_fou.aph
    if ( -e ${CTF_infile} ) then
      set frame_folder = framesB
      set CTF_outfile = APH/${iname}_movieB_fou_ctf.aph
      set unbent_image = ${frame_folder}/direct_sum_filt_upscale
      set unbent_FFT = ${frame_folder}/direct_sum_fft.mrc
      set algo = UMB
      #######################################
      # MovieB
      source ${proc_2dx}/2dx_applyCTF_sub.com
      #######################################
      echo "# IMAGE-IMPORTANT: ${CTF_infile} <MovieModeB APH File before CTF correction [H,K,A,P,IQ,Back]>" >> LOGS/${scriptname}.results
      echo "# IMAGE-IMPORTANT: ${CTF_outfile} <MovieModeB APH File after CTF correction [H,K,A,P(CTF phase flipped),IQ,Back,CTF]>" >> LOGS/${scriptname}.results
      if ( ${ctfcor_imode} == "0" || ${ctfcor_imode} == "1" || ${ctfcor_imode} == "2" || ${ctfcor_imode} == "3" ) then
        \mv -f CTFPLOT.PS PS/${iname}_movieB_ctf.ps
        echo "# IMAGE-IMPORTANT: PS/${iname}_movieB_ctf.ps <PS: MovieModeB IQ Plot after CTF correction>" >> LOGS/${scriptname}.results
      endif
      \mv -f PS/2dx_plotreska_canonical.ps PS/2dx_plotreska_movieB_canonical.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_movieB_canonical.ps <PS: MovieModeB Resolution Circle Plot from canonical lattice>" >> LOGS/${scriptname}.results
      \mv -f PS/2dx_plotreska_measured.ps PS/2dx_plotreska_movieB_measured.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_movieB_measured.ps <PS: MovieModeB Resolution Circle Plot from measured lattice>" >> LOGS/${scriptname}.results
      \mv SCRATCH/POWERHISTO.txt SCRATCH/POWERHISTO_movieB.txt
      echo "# IMAGE: SCRATCH/POWERHISTO_movieB.txt <MovieModeB Histogram of Power in PS>" >> LOGS/${scriptname}.results
    else
      ${proc_2dx}/linblock "ERROR: ${CTF_infile} not found."
    endif
  endif
  
  echo "<<@progress: 80>>"

  if ( ${SYN_Unbending} != "0" ) then
    set CTF_infile = APH/${iname}_syn.aph
    if ( -e ${CTF_infile} ) then
      set CTF_outfile = APH/${iname}_syn_ctf.aph
      #######################################
      # SynRef
      source ${proc_2dx}/2dx_applyCTF_sub.com
      #######################################
      echo "# IMAGE-IMPORTANT: ${CTF_infile} <SynRef APH File before CTF correction [H,K,A,P,IQ,Back]>" >> LOGS/${scriptname}.results
      echo "# IMAGE-IMPORTANT: ${CTF_outfile} <SynRef APH File after CTF correction [H,K,A,P(CTF phase flipped),IQ,Back,CTF]>" >> LOGS/${scriptname}.results
      \mv -f CTFPLOT.PS PS/${iname}_syn_ctf.ps
      echo "# IMAGE-IMPORTANT: PS/${iname}_syn_ctf.ps <PS: SynRef IQ Plot after CTF correction>" >> LOGS/${scriptname}.results
      \mv -f PS/2dx_plotreska_canonical.ps PS/2dx_plotreska_syn_canonical.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_syn_canonical.ps <PS: SynRef Resolution Circle Plot from canonical lattice>" >> LOGS/${scriptname}.results
      \mv -f PS/2dx_plotreska_measured.ps PS/2dx_plotreska_syn_measured.ps
      echo "# IMAGE-IMPORTANT: PS/2dx_plotreska_syn_measured.ps <PS: SynRef Resolution Circle Plot from measured lattice>" >> LOGS/${scriptname}.results
      \mv SCRATCH/POWERHISTO.txt SCRATCH/POWERHISTO_syn.txt
      echo "# IMAGE: SCRATCH/POWERHISTO_syn.txt <SynRef Histogram of Power in PS>" >> LOGS/${scriptname}.results
    else
      ${proc_2dx}/linblock "ERROR: ${CTF_infile} not found."
    endif
  endif
 
  echo ":: QVAL2, QVALMA, QVALMB, QVALS = "${QVAL2},${QVALMA},${QVALMB},${QVALS}

  if ( ${movie_enable} == "y" ) then
    set movie_better = `echo ${QVALMA} ${QVAL2} | awk '{ if ( $1 > $2 ) { s = 1 } else { s = 0 } } END { print s }'`
    if ( ${movie_better} == "1" ) then
      set movie_better = `echo ${QVALMA} ${QVALMB} | awk '{ if ( $1 > $2 ) { s = 1 } else { s = 0 } } END { print s }'`
      if ( ${movie_better} == "1" ) then
        ${proc_2dx}/linblock "Using MovieModeA unbent data, since these have the higher QVAL"
        set final_outfile = ${iname}_movie_fou_ctf.aph
      else
        ${proc_2dx}/linblock "Using MovieModeB unbent data, since these have the higher QVAL"
        set final_outfile = ${iname}_movieB_fou_ctf.aph
      endif
    else
      set movie_better = `echo ${QVALMB} ${QVAL2} | awk '{ if ( $1 > $2 ) { s = 1 } else { s = 0 } } END { print s }'`
      if ( ${movie_better} == "1" ) then
        ${proc_2dx}/linblock "Using MovieModeB unbent data, since these have the higher QVAL"
        set final_outfile = ${iname}_movieB_fou_ctf.aph
      else
        ${proc_2dx}/linblock "Using Unbend2 (not MovieMode) unbent data, since these have the higher QVAL"
        set final_outfile = ${iname}_fou_ctf.aph
      endif
    endif
  else
    ${proc_2dx}/linblock "Using Unbend2 unbent data"
    set final_outfile = ${iname}_fou_ctf.aph
  endif

  cd APH
  \rm -f ${iname}_ctf.aph
  \ln -s ${final_outfile} ${iname}_ctf.aph
  cd ..
  echo "# IMAGE-IMPORTANT: APH/${iname}_ctf.aph <Link to Final APH File [H,K,A,P(CTF Phase flipped),IQ,Back,CTF]>" >> LOGS/${scriptname}.results
  #
endif
#
#
echo "set CTF_done = y" >> LOGS/${scriptname}.results
#
echo "<<@progress: 100>>"
#
##########################################################################
${proc_2dx}/linblock "${scriptname} - normal end."
##########################################################################
#
#
#

