#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Unbend Movie B (Experimental)                                      #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 02/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# MANUAL: Movie mode unbending script
#
# MANUAL: Prerequisite I: Installed eman2/sparx package. Ensure that the eman2.bashrc is sourced (optimally in your bash.rc or .profile file) before starting 2dx. 
#
# MANUAL: Prerequisite II: Python-2.7 (or higher) including matplotlib and numpy. If you have installed eman2, this should be available on your system.
#
# MANUAL: Prerequisite III: PDFtk. You can get it from "https://www.pdflabs.com/tools/pdftk-server/".   Or, try on OSX:  port install pdftk
#
# MANUAL: Prerequisite IV: ps2pdf (Linux) or pstopdf (OSX). These should be already present.
#
# MANUAL: Prerequisite IV: pdf2ps. This is part of ghostscript. You can get it with:  port install <B>ghostscript</b>.
#
# MANUAL: Before using movie-mode unbending, switch movie-mode processing on and rerun "InitFilesAndParams" to preset the used batch size dependening on the number of available movie-frames.
#
# MANUAL: Using the movie-mode unbent APH-file requires selecting the movie-mode option in "Correct CTF" and rerunning of "Generate Map".
#
# MANUAL: Careful prevention of overfitting is crucial for successful movie-mode 3D reconstructions.
#
#
# SORTORDER: 54
#
# LABEL: Show raw frames?
# LEGEND: This switch decides, if this should be listed in the Images pane.
# EXAMPLE: show_frames = "y"
# HELP: http://2dx.org/documentation/2dx-software/parameters
# TYPE: Bool "y;n"
set show_frames = "n"
#
# LABEL: Show FFT of frames?
# LEGEND: This switch decides, if this should be listed in the Images pane.
# EXAMPLE: show_frame_FFT = "y"
# HELP: http://2dx.org/documentation/2dx-software/parameters
# TYPE: Bool "y;n"
set show_frame_FFT = "n"
#
# LABEL: Show CCmaps of frames?
# LEGEND: This switch decides, if this should be listed in the Images pane.
# EXAMPLE: show_frame_CCmap = "y"
# HELP: http://2dx.org/documentation/2dx-software/parameters
# TYPE: Bool "y;n"
set show_frame_CCmap = "n"
#
# LABEL: Mark CCmaps with found coordinates?
# LEGEND: This switch decides, if this should be listed in the Images pane.
# EXAMPLE: show_frame_CCmap_marked = "y"
# HELP: http://2dx.org/documentation/2dx-software/parameters
# TYPE: Bool "y;n"
set show_frame_CCmap_marked = "n"
#
# DISPLAY: imagename
# DISPLAY: imagesidelength 
# DISPLAY: SYN_Unbending
# DISPLAY: holeb
# DISPLAY: maskb01
# DISPLAY: maskb02
# DISPLAY: maskb03
# DISPLAY: maskb04
# DISPLAY: maskb05
# DISPLAY: boxb1
# DISPLAY: boxb2
# DISPLAY: quadpredb
# DISPLAY: RESMAX
# DISPLAY: RESMIN
# DISPLAY: ALAT
# DISPLAY: radlim
# DISPLAY: ctf_ttf
# DISPLAY: treatspotscan
# DISPLAY: ctfplotresmax
# DISPLAY: tempkeep
# DISPLAY: refori
# DISPLAY: ISTEP
# DISPLAY: ISTEP_h
# DISPLAY: IMAXCOR
# DISPLAY: comment
# DISPLAY: RMAG
# DISPLAY: LCOLOR
# DISPLAY: ccunbend_program
# DISPLAY: plotres_rings
# DISPLAY: movie_stackname
# DISPLAY: movie_enable
# DISPLAY: movie_imagenumber_total
# DISPLAY: movie_masking_mode
# DISPLAY: movie_refboxa
# DISPLAY: movie_refboxb
# DISPLAY: movie_quadrada
# DISPLAY: movie_quadradb
# DISPLAY: movie_facthreshb
# DISPLAY: movie_filter_type
# DISPLAY: movie_filter_param
# DISPLAY: movie_imagenumber_toave
# DISPLAY: Thread_Number
# DISPLAY: ctfcor_noise
# DISPLAY: ctfcor_inner_tile
# DISPLAY: ctfcor_outer_tile
# DISPLAY: ctfcor_taper
# DISPLAY: ctfcor_imode
# DISPLAY: ctfcor_debug
# DISPLAY: ctfcor_maxamp_factor
# DISPLAY: calculate_tiles
#
#$end_local_vars
#
#
set app_2dx_image = ""
set bin_2dx = ""
set proc_2dx = ""
#
set SYN_Unbending = ""
set PHASEORI_done = ""
set boxb1 = ""
set boxb2 = ""
set imagename = ""
set defocus = ""
set nonmaskimagename = ""
set imagenumber = ""
set realcell = ""
set lattice = ""
set holeb = ""
set maskb01 = ""
set maskb02 = ""
set maskb03 = ""
set maskb04 = ""
set maskb05 = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set ALAT = ""
set quadpredb = ""
set quadradb = ""
set radlim = ""
set realang = ""
set treatspotscan = ""
set facthresha = ""
set phacon = ""
set ctfplotresmax = ""
set stepdigitizer = ""
set CS = ""
set KV = ""
set domask = ""
set TLTAXIS = ""
set TLTANG = ""
set TANGL = ""
set det_tilt = ""
set ctf_ttf = ""
set refori = ""
set createmaskinfo = ""
set ISTEP = ""
set ISTEP_h = ""
set IMAXCOR = ""
set RMAG = ""
set LCOLOR = ""
set ccunbend_program = ""
set RB_1 = ""
set RB_2 = ""
set RB_3 = ""
set RB_4 = ""
set RB_5 = ""
set RB_6 = ""
set RP_1 = ""
set RP_2 = ""
set RP_3 = ""
set RP_4 = ""
set RP_5 = ""
set RP_6 = ""
set movie_stackname = ""
set movie_enable = ""
set movie_imagenumber_total = ""
set movie_imagenumber_touse = ""
set movie_filter_type = ""
set movie_filter_param = ""
set app_2dx_image = ""
set movie_masking_mode = ""
set movie_refboxa = ""
set movie_refboxb = ""
set movie_quadrada = ""
set movie_quadradb = ""
set movie_facthreshb = ""
set movie_imagenumber_toave = ""
set MASKING_done = ""
set QVALS = ""
set Thread_Number = ""
set ctfcor_noise = ""
set ctfcor_inner_tile = ""
set ctfcor_outer_tile = ""
set ctfcor_taper = ""
set ctfcor_imode = ""
set ctfcor_debug = ""
set ctfcor_maxamp_factor = ""
set calculate_tiles = ""
set use_masked_image = ""
#
#$end_vars
#
set scriptname = 2dx_unbend_movie2
\rm -f LOGS/${scriptname}.results
#
echo "<<@evaluate>>"
echo "<<@progress: 1>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set date = `date`
echo date = ${date}
#
#
set system = `uname -s`
echo system = ${system}
#
set frame_folder = "framesB"
#
##########################################
##########################################
if ( ${system} == "Darwin" ) then
  set S2 = "henning"
  set S3 = "sthennin"
  if (( "$USER" == "$S2" ) || ( "$USER" == "$S3" )) then
    set app_2dx_image = "~/2dx/bin/2dx_image"
  else
    set app_2dx_image = "${bin_2dx}/../../../bin/2dx_image"
  endif
  echo ":Testing, if gostscript is installed and ps2pdf exists"
  set ps2pdf_test = `which ps2pdf`x 
  if ( ${ps2pdf_test} == 'x' ) then
    set ps2pdf = pstopdf
    echo "::"
    echo "::ERROR: Install gostscript first."
    echo "::"
  else
    set ps2pdf = `which ps2pdf` 
    set pdf2ps = `which pdf2ps`
  endif
else
  set app_2dx_image = "2dx_image"
  set ps2pdf = ps2pdf
  set pdf2ps = pdf2ps
endif
echo ":pdf2ps is ${pdf2ps}"
echo ":ps2pdf is ${ps2pdf}"
if ( ${pdf2ps}x == 'x' ) then
  set pdf2ps = "echo ::ERROR: pdf2ps not found. Install gostscript."
  echo ::
  echo ::ERROR: pdf2ps not found. Install gostscript.
  echo ::
endif
##########################################
##########################################
#
if ( ${show_frames} == "y" || ${show_frame_FFT} == "y" || ${show_frame_CCmap} == "y" || ${show_frame_CCmap_marked} == "y") then
  set tempkeep = "y"
endif
#
\rm -f ${frame_folder}_unbending.pdf
\touch ${frame_folder}_unbending.pdf
#
set iname = image_ctfcor
#
set PROFDATA = ${iname}_profile.dat
if ( ! -e ${PROFDATA} ) then
  ${proc_2dx}/protest "ERROR: First run Unbend II."
endif
#
set cormap = ${iname}_CCmap_unbend2.mrc
#
if ( ! -e ${cormap} ) then
  ${proc_2dx}/protest "ERROR: First run Unbend-I and Unbend-II scripts. File missing: ${cormap}"
endif
#
echo  "# IMAGE-IMPORTANT: ${movie_stackname} <Raw image stack>" >> LOGS/${scriptname}.results
#
if ( ${movie_enable} == "n" ) then
  ${proc_2dx}/linblock "Skipping movie mode unbending."
  exit
endif
#
${proc_2dx}/linblock "Movie Mode."
if ( -e ${movie_stackname}.mrc ) then
  set movie_stackname = ${movie_stackname}.mrc
  echo "set movie_stackname = ${movie_stackname}"  >> LOGS/${scriptname}.results
endif
#
if ( ${MASKING_done} == "y" ) then
  if ( ${movie_masking_mode} == "0" ) then
    ${proc_2dx}/linblock "WARNING: Correcting Frame Masking Mode to 1=Masking based on UnbendII"
    set movie_masking_mode = 1
    echo "set movie_masking_mode = ${movie_masking_mode}" >> LOGS/${scriptname}.results
  endif
endif
# 
if ( ${use_masked_image} == "y" ) then
  if ( -e ${nonmaskimagename}_manualmask.mrc ) then
    set maskfile = ${nonmaskimagename}_manualmask
  else
    if ( -e ${nonmaskimagename}_automask.mrc ) then
      set maskfile = ${nonmaskimagename}_automask
    else
      if ( -e ${nonmaskimagename}_mask.mrc ) then
        \mv ${nonmaskimagename}_mask.mrc ${nonmaskimagename}_automask.mrc
        set maskfile = ${nonmaskimagename}_automask
      else
        ${proc_2dx}/linblock "No Masking Info file found.  Not masking image."
        set use_masked_image = "n"
        echo "set use_masked_image = ${use_masked_image}"  >> LOGS/${scriptname}.results
      endif 
    endif 
  endif 
endif
#
if ( ${movie_masking_mode} == '1' && ${use_masked_image} == "y" ) then 
  if ( ! -e ${maskfile}.mrc ) then
    ${proc_2dx}/protest "ERROR: ${maskfile}.mrc not found. First run UNBEND-II with masking option."
  endif 
  echo  "# IMAGE: ${maskfile}.mrc <Crystal Masking Pattern>" >> LOGS/${scriptname}.results
endif
#
#
if ( ! -e ${movie_stackname}) then
  ${proc_2dx}/protest "ERROR: ${movie_stackname} missing. Aborting."
else
  # Get the number of frames
  e2iminfo.py -H ${movie_stackname} > tmp_stack_header.txt
  set movie_imagenumber_total = `\grep "MRC.nz:" tmp_stack_header.txt | cut -d' ' -f 2`
  ${proc_2dx}/linblock "Stack contains ${movie_imagenumber_total} ${frame_folder}"
  echo "set movie_imagenumber_total = ${movie_imagenumber_total}"  >> LOGS/${scriptname}.results
  set movie_imagenumber_touse = `echo ${movie_imagenumber_total} ${movie_imagenumber_toave} | awk '{s = int($1/$2) } END { print s }'`
  echo "set movie_imagenumber_touse = ${movie_imagenumber_touse}"  >> LOGS/${scriptname}.results
  \rm tmp_stack_header.txt
endif
#
#python ${proc_2dx}/movie/extractAMP.py `ls ${frame_folder}/aph_*`
#python ${proc_2dx}/movie/plotAMP.py ${frame_folder}/AMPs.txt ${movie_imagenumber_toave}
#exit 
#
if ( ${movie_filter_type} == "0" ) then
  #
  # automatic calculation of A and B for exponential filter:  
  # filter type:   res = a * exp(b * N)  ; with N being the frame number, up to Nmax.
  # res should be between 0.0 and 0.5 (Nyquist)
  #
  # For first half of frames, resolution should be the full 0.5.
  # 0.50 = A * exp(B * Nmax/2)
  # At last frame, limit resolution to 0.25
  # 0.25 = A * exp(B * Nmax)
  # 
  # Second equation equals:  A = 0.25 / exp(B * Nmax)
  # Into first equation gives: 
  # 0.50 = 0.25 / exp(B * Nmax) * exp(B * Nmax/2)
  # or: 0.50 = 0.25 / exp(B * Nmax/2)
  # or: 0.5 = exp(B * Nmax/2) 
  # or: ln(0.5) = B * Nmax/2 
  # or: B = 2 * ln(0.5) / Nmax
  # or: B = -1.38629 / Nmax
  #
  # Insertion into first equation gives: 
  # A = 0.5 / exp(2*ln(0.5)/Nmax * Nmax/2)
  # A = 0.5 / exp(2*ln(0.5)/2)
  # A = 0.5 / 0.5 = 1.0
  #
  set filt_a = 1.0
  set filt_b = `echo ${movie_imagenumber_total} | awk '{ s =  -1.38629 / $1 } END { print s }'`
  echo ":Automatic filters: filt_a = ${filt_a},  filt_b = ${filt_b}"
  echo "set filt_a = ${filt_a}"  >> LOGS/${scriptname}.results
  echo "set filt_b = ${filt_b}"  >> LOGS/${scriptname}.results
endif
if ( ${movie_filter_type} == "1" ) then
  set filt_a = `echo ${movie_filter_param} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
  set filt_b = `echo ${movie_filter_param} | sed 's/,/ /g' | awk '{ s = $2 } END { print s }'`
endif
if ( ${movie_filter_type} == "2" ) then
  # This is also taken care of in getFilter.py
  set filt_a = 1.0
  set filt_b = 0.0
endif
#
set num_dia = 100
#
if ( 1 == 2 ) then
  set i = 0
  while ($i <= ${movie_imagenumber_touse})
    echo "# IMAGE: ${frame_folder}/CC-CE-frame_${i}.mrc <Frame ${i} CC CE>" >> LOGS/${scriptname}.results
    @ i += 1
  end
  set i = 0
  while ($i <= ${movie_imagenumber_touse})
    echo "# IMAGE: ${frame_folder}/CC-TL-frame_${i}.mrc <Frame ${i} CC TL>" >> LOGS/${scriptname}.results
    @ i += 1
  end
  set i = 0
  while ($i <= ${movie_imagenumber_touse})
    echo "# IMAGE: ${frame_folder}/CC-TR-frame_${i}.mrc <Frame ${i} CC TR>" >> LOGS/${scriptname}.results
    @ i += 1
  end
  set i = 0
  while ($i <= ${movie_imagenumber_touse})
    echo "# IMAGE: ${frame_folder}/CC-BR-frame_${i}.mrc <Frame ${i} CC BR>" >> LOGS/${scriptname}.results
    @ i += 1
  end
  set i = 0
  while ($i <= ${movie_imagenumber_touse})
    echo "# IMAGE: ${frame_folder}/CC-BL-frame_${i}.mrc <Frame ${i} CC BL>" >> LOGS/${scriptname}.results
    @ i += 1
  end
endif
#
set i = 0
while ($i <= ${movie_imagenumber_touse})
  if ( ${show_frames} == "y" ) then
    echo "# IMAGE: ${frame_folder}/frame_${i}/${nonmaskimagename}_${i}_raw.mrc <Frame ${i} raw>" >> LOGS/${scriptname}.results
    echo "# IMAGE: ${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc <Frame ${i}>" >> LOGS/${scriptname}.results
    echo "# IMAGE: ${frame_folder}/frame_${i}/${iname}_mask.mrc <Frame ${i}, masked>" >> LOGS/${scriptname}.results
  endif
  if ( ${show_frame_FFT} == "y" ) then
    echo "# IMAGE: ${frame_folder}/CCunbend_frame_${i}_fft.mrc <Frame ${i}, unbent (fft)>" >> LOGS/${scriptname}.results
    echo "# IMAGE-IMPORTANT: ${frame_folder}/frame_${i}/${iname}_mask_fft.mrc <Frame ${i}, masked (FFT)>" >> LOGS/${scriptname}.results
  endif
  if ( ${show_frame_CCmap} == "y" ) then
    echo "# IMAGE: ${frame_folder}/frame_${i}/SCRATCH/${nonmaskimagename}_CCmapMB.mrc <Frame ${i} CCMapMB>" >> LOGS/${scriptname}.results
    echo "# IMAGE: ${frame_folder}/frame_${i}/SCRATCH/${nonmaskimagename}_CCmapMBb.mrc <Frame ${i} CCMapMBb>" >> LOGS/${scriptname}.results
    echo "# IMAGE: ${frame_folder}/frame_${i}_CCmapMBb_unbent.mrc <Frame ${i} CCMapMB unbent>" >> LOGS/${scriptname}.results
  endif
  echo "# IMAGE: ${frame_folder}/frame_${i}/SCRATCH/TMP-quadserch3-autocor.mrc <Frame ${i} averaged central area>" >> LOGS/${scriptname}.results
  echo "# IMAGE-IMPORTANT: ${frame_folder}/frame_${i}/PS/${nonmaskimagename}_quadserch.ps <Frame ${i} PS QUADSERCH Plot>" >> LOGS/${scriptname}.results 
  echo "# IMAGE-IMPORTANT: ${frame_folder}/frame_${i}/PS/${nonmaskimagename}_ccunbend.ps <Frame ${i} PS CCUNBEND Plot>" >> LOGS/${scriptname}.results
  echo "# IMAGE: ${frame_folder}/frame_${i}/SCRATCH/corm${nonmaskimagename}_notap.mrc <Frame ${i} Unbent image>" >> LOGS/${scriptname}.results 
  #
  @ i += 1
end
#
echo "<<@evaluate>>"
#
# Generate subfolder for frame images
\rm -rf ${frame_folder}
if ( ! -d ${frame_folder} ) then
  \mkdir ${frame_folder}
  #
  echo "<<@progress: 10>>"
  #
  ###############################################################
  ${proc_2dx}/linblock "Splitting Stack into ${movie_imagenumber_touse} ${frame_folder}, merging ${movie_imagenumber_toave} movie images into each"
  ############################################################### 
  #
  python ${proc_2dx}/movie/movie_mode_split1.py ${movie_stackname} ${nonmaskimagename} ${movie_imagenumber_toave} ${frame_folder}
  #
  foreach f (`ls ${frame_folder}`)
    \cp 2dx_image.cfg ${frame_folder}/$f/
    python ${proc_2dx}/movie/disable_movie.py  ${frame_folder}/$f/
  end
endif
#
echo "<<@progress: 15>>"
#
setenv PROFILE  SCRATCH/${iname}_unbend2_fft_msk_fft_cro_aut_cro.mrc
setenv PROFDATA ${iname}_profile.dat
setenv ERRORS   SCRATCH/errout${iname}.dat
setenv ERROUT   SCRATCH/errout2${iname}.dat
#
set quadradbx = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set quadradby = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set movie_quadradax = `echo ${movie_quadrada} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set movie_quadraday = `echo ${movie_quadrada} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set movie_quadradbx = `echo ${movie_quadradb} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set movie_quadradby = `echo ${movie_quadradb} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set refposix = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $1 ) } END { print s }'`
set refposiy = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $2 ) } END { print s }'`
set valspotscan = '0'
set createmask = '0'
#
\rm -f SCRATCH/errout2${iname}.dat
\rm -f SPIDERCOORD.spi
#
# 
###############################################################
${proc_2dx}/linblock "QUADSERCH - Updating Initial Error Field" 
###############################################################
#
echo "<<@progress: 20>>"
#
echo "movie_imagenumber_touse = ${movie_imagenumber_touse}"
#
#
${bin_2dx}/2dx_quadserchk-2.exe << eot
3,${quadpredb}                     ! IPASS,NRANGE
${cormap}
${imagesidelength},${imagesidelength}     ! SIZE OF TRANSFORM (ISIZEX, ISIZEY)
${lattice},F                       ! Lattice vectors
-200,200,-200,200               ! NUMBER UNIT CELLS TO SEARCH
${quadradbx},${quadradby}           ! RADIUS OF CORR SEARCH
${refposix},${refposiy}           ! POSN OF START SEARCH ORIGIN  0,0 IS ORIGIN
N                               ! YES/NO FOR DETAILED PRINTOUT
${radlim}                       ! RADLIM IN PROFILE GRID UNITS
${valspotscan},${RMAG},${LCOLOR}          ! prohibit fractures in crystal (1=y,0=n),RMAG,LCOLOR
${createmask}                   ! dont create manual Masking information
0                               ! Mask the image directly
eot
  #
endif
#
###############################################################
${proc_2dx}/linblock "apply_filter.py - Applying pre-processing filters"
###############################################################
#
echo "<<@progress: 22>>"
#
set image_dir = `pwd`
# i counts the super-frames to process:
set i = 0
# n indicates the original frame position in the raw input movie stack: 
set n = 1
while ($i <= ${movie_imagenumber_touse})
  #########################################################################
  ${proc_2dx}/lin "Working on frame ${i}"
  #########################################################################

  if ( ! -e ${frame_folder}/2dx_master.cfg ) then
    cd ${frame_folder}
    \ln -s ../2dx_image.cfg 2dx_master.cfg  
    cd ..
  endif
  echo "set imagename = ${nonmaskimagename}_${i}" >> ${frame_folder}/frame_${i}/2dx_image.cfg
  echo "set nonmaskimagename = ${nonmaskimagename}_${i}" >> ${frame_folder}/frame_${i}/2dx_image.cfg

  ${app_2dx_image} ${image_dir}/${frame_folder}/frame_${i} "2dx_initialize"
  ${app_2dx_image} ${image_dir}/${frame_folder}/frame_${i} "2dx_initialize_files"
  \rm -f ${frame_folder}/2dx_master.cfg

  set filtervalue = `python ${proc_2dx}/movie/getFilter.py ${n} ${movie_filter_type} ${filt_a} ${filt_b}`
  echo ":  Filter frame average #${i} with radius ${filtervalue}"
  # echo "LP on: ${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc with filter radius ${filtervalue}"
  # echo "python ${proc_2dx}/movie/getFilter.py ${n} ${movie_filter_type} ${filt_a} ${filt_b}"
  #
  # echo "python ${proc_2dx}/movie/apply_filter.py ${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc ${filtervalue} ${i} ${imagesidelength} ${frame_folder}/weight.mrc"
  python ${proc_2dx}/movie/apply_filter.py ${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc ${filtervalue} ${i} ${imagesidelength} ${frame_folder}/weight.mrc
  #

  set ctfcor_tilefile = "${frame_folder}/frame_${i}/2dx_ctfcor_tile.mrc"
  set ctfcor_psfile = "${frame_folder}/frame_${i}/2dx_ctfcor_psfile.mrc"
  set ctfcor_ctffile = "${frame_folder}/frame_${i}/2dx_ctfcor_ctffile.mrc"
  \rm -f ${frame_folder}/frame_${i}/image_ctfcor.mrc
  \rm -f ${ctfcor_tilefile}
  \rm -f ${ctfcor_psfile}  
  \rm -f ${ctfcor_ctffile}  
  #
  #
  setenv NCPUS ${Thread_Number}
  #
  if ( ${ctfcor_imode}x == "0x" || ${ctfcor_imode}x == "4x" || ${ctfcor_imode}x == "5x" || ${ctfcor_imode}x == "6x" ) then
    ${proc_2dx}/lin "Not applying any CTF correction before unbending."
    cd ${frame_folder}/frame_${i}
    \rm -f image_ctfcor.mrc
    \ln -s ${nonmaskimagename}_${i}.mrc image_ctfcor.mrc
    cd ../..
  else
    if ( ${calculate_tiles} == "0" ) then
      ${bin_2dx}/2dx_ctfcor_stripes.exe << eot
${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc
${frame_folder}/frame_${i}/image_ctfcor.mrc
#
${TLTAXIS},${TLTANG}
${CS},${KV},${phacon},${magnification},${stepdigitizer}
${defocus}
${RESMAX}
${ctfcor_noise}
${ctfcor_imode}
${ctfcor_debug}
${ctfcor_maxamp_factor}
eot
      #
    else
      if ( ${calculate_tiles} == "1" ) then
        ${bin_2dx}/2dx_ctfcor_tiles.exe << eot
${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc
${frame_folder}/frame_${i}/image_ctfcor.mrc
#
#
#
${TLTAXIS},${TLTANG}
${CS},${KV},${phacon},${magnification},${stepdigitizer}
${defocus}
${ctfcor_noise}
${ctfcor_inner_tile}
${ctfcor_outer_tile}
${ctfcor_taper}
${ctfcor_imode}
${ctfcor_debug}
${ctfcor_maxamp_factor}
eot
        #
      else
        ${bin_2dx}/2dx_ctfcor_tiles.exe << eot
${frame_folder}/frame_${i}/${nonmaskimagename}_${i}.mrc
${frame_folder}/frame_${i}/image_ctfcor.mrc
${ctfcor_tilefile}
${ctfcor_psfile}
${ctfcor_ctffile}
${TLTAXIS},${TLTANG}
${CS},${KV},${phacon},${magnification},${stepdigitizer}
${defocus}
${ctfcor_noise}
${ctfcor_inner_tile}
${ctfcor_outer_tile}
${ctfcor_taper}
${ctfcor_imode}
${ctfcor_debug}
${ctfcor_maxamp_factor}
eot
        #
        echo "# IMAGE: ${ctfcor_tilefile} <Images of tiles>" >> LOGS/${scriptname}.results
        echo "# IMAGE: ${ctfcor_psfile} <PowerSpectra of tiles>" >> LOGS/${scriptname}.results
        #
        if ( ${ctfcor_imode} == "2" ) then
          echo "# IMAGE: ${ctfcor_ctffile} <Summed CTF**2 file>" >> LOGS/${scriptname}.results
        else
          echo "# IMAGE: ${ctfcor_ctffile} <Summed CTF file>" >> LOGS/${scriptname}.results
        endif
      endif
    endif
  endif
  echo "# IMAGE-IMPORTANT: ${frame_folder}/frame_${i}/image_ctfcor.mrc <Output Image Frame ${i} CTF corrected>" >> LOGS/${scriptname}.results

  #########################################################################
  ${proc_2dx}/lin "FFT of raw frame average, frame ${i}"
  #########################################################################
  setenv IN ${frame_folder}/frame_${i}/${iname}.mrc
  setenv OUT ${frame_folder}/frame_${i}/${iname}_fft.mrc
  ${bin_2dx}/2dx_fftrans.exe      

  #
  if ( ${i} > 0 ) then
    @ n += ${movie_imagenumber_toave}
  endif
  @ i += 1
end
#
echo "<<@progress: 25>>"
#
touch ${frame_folder}/peaks_dummy
\rm -f ${frame_folder}/peaks*
#
echo "<<@evaluate>>"
#




###############################################################
${proc_2dx}/linblock "FFTRANS - Calculate FFT of unbent image"
###############################################################
#
set unbent_fil = unbent.mrc
#
if ( ! -e ${unbent_fil} ) then
  ${proc_2dx}/protest "ERROR: File missing: ${unbent_fil}"
endif
# 
\rm -f SCRATCH/reference_flt_upscale.mrc
${bin_2dx}/labelh.exe << eot
${unbent_fil}
39
SCRATCH/reference_flt_upscale.mrc
eot
#
setenv IN  SCRATCH/reference_flt_upscale.mrc
setenv OUT SCRATCH/reference_flt_upscale_fft.mrc
\rm -f     SCRATCH/reference_flt_upscale_fft.mrc
${bin_2dx}/2dx_fftrans.exe
#
echo  "# IMAGE: SCRATCH/reference_flt_upscale_fft.mrc <Unbent image (FFT)>" >> LOGS/${scriptname}.results
#
echo "<<@progress: 15>>"
#
#
#########################################################################
${proc_2dx}/linblock "MASKTRAN - Lattice-mask FFT of unbent image, small holes"
#########################################################################
set maskb = ${maskb01}
set rmax = 11000
#
setenv IN  SCRATCH/reference_flt_upscale_fft.mrc
setenv OUT SCRATCH/reference_flt_upscale_fft_mask.mrc
\rm -f     SCRATCH/reference_flt_upscale_fft_mask.mrc
setenv SPOTS ${nonmaskimagename}.spt
${bin_2dx}/2dx_masktrana.exe << eot
1 F T F ! ISHAPE=1(CIRC),2(GAUSCIR),3(RECT)HOLE,IAMPLIMIT(T or F),ISPOT,IFIL
1 ! RADIUS OF HOLE IF CIRCULAR, X,Y HALF-EDGE-LENGTHS IF RECT.
${lattice},-50,50,-50,50,${rmax},1 ! A/BX/Y,IH/IKMN/MX,RMAX,ITYPE
eot
echo  "# IMAGE: SCRATCH/reference_flt_upscale_fft_mask.mrc <Unbent image, Fourier-filtered (1px) (FFT)>" >> LOGS/${scriptname}.results
#
if ( ${tempkeep} != "y" ) then
  \rm -f SCRATCH/reference_flt_upscale_fft.mrc
endif
#
#
###############################################################
${proc_2dx}/linblock "FFTRANS - Back to real space"
###############################################################
#
setenv IN  SCRATCH/reference_flt_upscale_fft_mask.mrc
setenv OUT SCRATCH/reference_flt_upscale_fft_mask_fft.mrc
\rm -f     SCRATCH/reference_flt_upscale_fft_mask_fft.mrc
${bin_2dx}/2dx_fftrans.exe
#
echo  "# IMAGE: SCRATCH/reference_flt_upscale_fft_mask_fft.mrc <Unbent image, Fourier-filtered>" >> LOGS/${scriptname}.results
#
if ( ${tempkeep} != "y" ) then
  \rm -f SCRATCH/reference_flt_upscale_fft_mask.mrc
endif
#
echo "<<@progress: 17>>"
#
#
###############################################################
${proc_2dx}/linblock "BOXIMAGE - Boxing reference: ${movie_refboxa}"
###############################################################
#
python ${proc_2dx}/movie/box_reference.py SCRATCH/reference_flt_upscale_fft_mask_fft.mrc SCRATCH/reference_flt_upscale_fft_mask_fft_box.mrc ${movie_refboxa}
#
if ( ${tempkeep} != "y" ) then
  \rm -f SCRATCH/reference_flt_upscale_fft_mask_fft.mrc
endif
#
\rm -f SCRATCH/reference_flt_upscale_fft_mask_fft_box_upscale.mrc
${bin_2dx}/labelh.exe << eot
SCRATCH/reference_flt_upscale_fft_mask_fft_box.mrc
39
SCRATCH/reference_flt_upscale_fft_mask_fft_box_upscale.mrc
eot
echo  "# IMAGE-IMPORTANT: SCRATCH/reference_flt_upscale_fft_mask_fft_box_upscale.mrc <Reference (${movie_refboxa}px)>" >> LOGS/${scriptname}.results
#
#
###############################################################
${proc_2dx}/linblock "FFTRANS - Producing reference in Fourier space"
###############################################################
#
setenv IN  SCRATCH/reference_flt_upscale_fft_mask_fft_box_upscale.mrc
setenv OUT SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft.mrc
\rm -f     SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft.mrc
${bin_2dx}/2dx_fftrans.exe
#
echo  "# IMAGE: SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft.mrc <Reference (FFT)>" >> LOGS/${scriptname}.results
#
#
#########################################################################
${proc_2dx}/linblock "MASKTRAN - Masked FFT of boxed reference"
#########################################################################
set maskb = ${maskb01}
set rmax = 11000
#
setenv IN  SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft.mrc
setenv OUT SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft_mask.mrc
\rm -f     SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft_mask.mrc
setenv SPOTS ${nonmaskimagename}.spt
${bin_2dx}/2dx_masktrana.exe << eot
1 F T F ! ISHAPE=1(CIRC),2(GAUSCIR),3(RECT)HOLE,IAMPLIMIT(T or F),ISPOT,IFIL
${maskb} ! RADIUS OF HOLE IF CIRCULAR, X,Y HALF-EDGE-LENGTHS IF RECT.
${lattice},-50,50,-50,50,${rmax},1 ! A/BX/Y,IH/IKMN/MX,RMAX,ITYPE
eot
echo  "# IMAGE: SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft_mask.mrc <Reference, Fourier-filtered (${maskb}px) (FFT)>" >> LOGS/${scriptname}.results
#
echo "<<@progress: 20>>"
#
if ( ${tempkeep} != "y" ) then
  \rm -f SCRATCH/reference_flt_upscale_fft_mask_fft_box_fft.mrc
endif
#
#






#
# the variable ${prog_num} controls the progress bar in the subscript 2dx_unbend_movie_sub.com:
set prog_num = 30
echo "<<@progress: ${prog_num}>>"
#
# First calculate unbending pattern for high-contrast frame_0 (0.0 to 0.25, middle is 0.125):
# i counts the super-frames to process:
set irunner = 0
set iforward = 1
set i = 0
#============================================
source ${proc_2dx}/2dx_unbend_movie_sub.com
#============================================
#
\cp -f SCRATCH/errout2${iname}.dat SCRATCH/errout_keyframe${iname}.dat
set irunner = 1

# Run from key frame downwards to 1:
set iforward = 0
set i = `echo ${movie_imagenumber_touse} | awk '{ s = int( $1 * 0.125 ) } END { print s }'`
while ($i >= 1)
        #============================================
        source ${proc_2dx}/2dx_unbend_movie_sub.com
        #============================================
        @ i -= 1
	@ irunner += 1
end

\cp -f SCRATCH/errout_keyframe${iname}.dat SCRATCH/errout2${iname}.dat

# Run from key frame upwards to end:
set iforward = 1
set i = `echo ${movie_imagenumber_touse} | awk '{ s = int( $1 * 0.125 ) + 1 } END { print s }'`
while ($i <= ${movie_imagenumber_touse})
        #============================================
        source ${proc_2dx}/2dx_unbend_movie_sub.com
        #============================================
        @ i += 1
	@ irunner += 1
end

echo "<<@progress: 80>>"




###########################################################################
${proc_2dx}/linblock "Averaging unbent images from frames 1 to ${movie_imagenumber_touse}" 
###########################################################################
python ${proc_2dx}/movie/direct_sum.py ${movie_imagenumber_touse} ${nonmaskimagename} ${frame_folder}
echo "# IMAGE: ${frame_folder}/direct_sum.mrc <Sum unbent images>" >> LOGS/${scriptname}.results 


###########################################################################
${proc_2dx}/linblock "Filtering by resolution weights"
###########################################################################
python ${proc_2dx}/movie/apply_filter_sum.py ${frame_folder}/direct_sum.mrc ${frame_folder}/direct_sum_filt.mrc 0.033 ${frame_folder}/weight.mrc
echo "# IMAGE: ${frame_folder}/direct_sum_filt.mrc <Sum unbent images, filtered>" >> LOGS/${scriptname}.results 
echo "# IMAGE: weight.mrc <Weight function for adding frames in Fourier space>" >> LOGS/${scriptname}.results

if ( ${ctfcor_imode} == "1" || ${ctfcor_imode} == "2" ) then
  \rm -f ${frame_folder}/direct_sum_filt_ctf.mrc
  python ${proc_2dx}/movie/apply_filter_fourier.py ${frame_folder}/direct_sum_filt.mrc SCRATCH/2dx_ctfcor_ctffile.mrc ${frame_folder}/direct_sum_filt_ctf.mrc ${ctfcor_noise}

  if ( ${ctfcor_imode} == "2" ) then
    echo "# IMAGE: SCRATCH/2dx_ctfcor_ctffile.mrc <Summed-CTF**2 (Noise=${ctfcor_noise})>" >> LOGS/${scriptname}.results 
  else
    echo "# IMAGE: SCRATCH/2dx_ctfcor_ctffile.mrc <Summed-CTF (Noise=${ctfcor_noise})>" >> LOGS/${scriptname}.results 
  endif

  echo "# IMAGE: ${frame_folder}/direct_sum_filt_ctf.mrc <Sum unbent images, filtered, CTF-corrected>" >> LOGS/${scriptname}.results 
else
  \rm -f ${frame_folder}/direct_sum_filt_ctf.mrc
  \cp -f ${frame_folder}/direct_sum_filt.mrc ${frame_folder}/direct_sum_filt_ctf.mrc
endif



###########################################################################
${proc_2dx}/linblock "LABELH - Normalizing image to AVG=0, STDEV=100"
###########################################################################

\rm -f ${frame_folder}/direct_sum_filt_upscale.mrc
${bin_2dx}/labelh.exe << eot
${frame_folder}/direct_sum_filt.mrc
39
${frame_folder}/direct_sum_filt_upscale.mrc
eot
# echo  "# IMAGE: ${frame_folder}/direct_sum_filt.mrc <Sum unbent images, filtered>" >> LOGS/${scriptname}.results
# echo  "# IMAGE: ${frame_folder}/direct_sum_filt_upscale.mrc <Sum unbent images, filtered, upscaled>" >> LOGS/${scriptname}.results

\rm -f ${frame_folder}/direct_sum_filt_ctf_upscale.mrc
${bin_2dx}/labelh.exe << eot
${frame_folder}/direct_sum_filt_ctf.mrc
39
${frame_folder}/direct_sum_filt_ctf_upscale.mrc
eot
# echo  "# IMAGE: ${frame_folder}/direct_sum_filt_ctf.mrc <Sum unbent images, filtered, CTFcor>" >> LOGS/${scriptname}.results
# echo  "# IMAGE: ${frame_folder}/direct_sum_filt_ctf_upscale.mrc <Sum unbent images, filtered, CTFcor, upscaled>" >> LOGS/${scriptname}.results

###########################################################################
${proc_2dx}/linblock "TAPEREDGE - Tapering edge of summed frames"
###########################################################################

setenv IN  ${frame_folder}/direct_sum_filt_upscale.mrc
setenv OUT ${frame_folder}/direct_sum_filt_taper.mrc
\rm -f     ${frame_folder}/direct_sum_filt_taper.mrc
${bin_2dx}/2dx_taperedgek.exe << eot
30,30,100,30       ! IAVER,ISMOOTH,ITAPER
eot
echo "# IMAGE: ${frame_folder}/direct_sum_filt_taper.mrc <Sum unbent images, edge-tapered>" >> LOGS/${scriptname}.results 

setenv IN  ${frame_folder}/direct_sum_filt_ctf_upscale.mrc
setenv OUT ${frame_folder}/direct_sum_filt_ctf_taper.mrc
\rm -f     ${frame_folder}/direct_sum_filt_ctf_taper.mrc
${bin_2dx}/2dx_taperedgek.exe << eot
30,30,100,30       ! IAVER,ISMOOTH,ITAPER
eot
echo "# IMAGE: ${frame_folder}/direct_sum_filt_ctf_taper.mrc <Sum unbent images, CTFcor, edge-tapered>" >> LOGS/${scriptname}.results 

###########################################################################
${proc_2dx}/linblock "FFTRANS - Producing final FFT"
###########################################################################

setenv IN ${frame_folder}/direct_sum_filt_taper.mrc
setenv OUT ${frame_folder}/direct_sum_fft.mrc
\rm -f     ${frame_folder}/direct_sum_fft.mrc
${bin_2dx}/2dx_fftrans.exe
echo "# IMAGE: ${frame_folder}/direct_sum_fft.mrc <Final FFT>" >> LOGS/${scriptname}.results

setenv IN ${frame_folder}/direct_sum_filt_ctf_taper.mrc
setenv OUT ${frame_folder}/direct_sum_ctf_fft.mrc
\rm -f     ${frame_folder}/direct_sum_ctf_fft.mrc
${bin_2dx}/2dx_fftrans.exe
echo "# IMAGE: ${frame_folder}/direct_sum_ctf_fft.mrc <Final FFT (CTF cor)>" >> LOGS/${scriptname}.results


###########################################################################
${proc_2dx}/linblock "MMBOX - Evaluating APH values"
###########################################################################

\rm -f SCRATCH/TMP9873.dat
\rm -f dummy.aph

${bin_2dx}/2dx_mmboxa.exe << eot
${frame_folder}/direct_sum_fft.mrc
${imagenumber} ${nonmaskimagename}, Unbend2, ${date}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2,2,0,50,50,19,19               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
dummy.aph
SCRATCH/TMP9873.dat
UMB
${refposix},${refposiy}           ! XORIG,YORIG
200.0,1.5,1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot

\rm -f dummy.aph

source SCRATCH/TMP9873.dat

###########################################################################
${proc_2dx}/linblock "Generate IQ-stat output"
###########################################################################

echo "set QVAL = ${QVAL_local}" >> LOGS/${scriptname}.results
echo "set QVALMB = ${QVAL_local}" >> LOGS/${scriptname}.results

echo "set UMB_IQ1 = ${UMB_IQ1}" >> LOGS/${scriptname}.results
echo "set UMB_IQ2 = ${UMB_IQ2}" >> LOGS/${scriptname}.results
echo "set UMB_IQ3 = ${UMB_IQ3}" >> LOGS/${scriptname}.results
echo "set UMB_IQ4 = ${UMB_IQ4}" >> LOGS/${scriptname}.results
echo "set UMB_IQ5 = ${UMB_IQ5}" >> LOGS/${scriptname}.results
echo "set UMB_IQ6 = ${UMB_IQ6}" >> LOGS/${scriptname}.results
echo "set UMB_IQ7 = ${UMB_IQ7}" >> LOGS/${scriptname}.results
echo "set UMB_IQ8 = ${UMB_IQ8}" >> LOGS/${scriptname}.results
echo "set UMB_IQ9 = ${UMB_IQ9}" >> LOGS/${scriptname}.results

set RP_6 = ${PSMAX}
echo "set RP_1 = ${RP_1}" >> LOGS/${scriptname}.results
echo "set RP_2 = ${RP_2}" >> LOGS/${scriptname}.results
echo "set RP_3 = ${RP_3}" >> LOGS/${scriptname}.results
echo "set RP_4 = ${RP_4}" >> LOGS/${scriptname}.results
echo "set RP_5 = ${RP_5}" >> LOGS/${scriptname}.results
echo "set RP_6 = ${RP_6}" >> LOGS/${scriptname}.results

echo "<<@evaluate>>"

set IQS = `echo ${UMB_IQ1} ${UMB_IQ2} ${UMB_IQ3} ${UMB_IQ4} ${UMB_IQ5} ${UMB_IQ6} ${UMB_IQ7} ${UMB_IQ8} ${UMB_IQ9}`
echo ":++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "::maskb=${maskb}, movie_refboxa=${movie_refboxa}: QValMB= ${QVAL_local} ... IQ stat = ${IQS}"
echo ":++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

echo " " >> History.dat
echo ":Date: ${date}" >> History.dat
echo "::Unbend MovieB: maskb=${maskb}, movie_refboxa=${movie_refboxa}: QVal= ${QVAL_local} ... IQ stat = ${IQS}" >> History.dat
#


###########################################################################
${proc_2dx}/linblock "MMBOX - Evaluating APH values (CTF cor)"
###########################################################################

\rm -f SCRATCH/TMP9873.dat
\rm -f APH/${imagename}_movieB_fou.aph

${bin_2dx}/2dx_mmboxa.exe << eot
${frame_folder}/direct_sum_ctf_fft.mrc
${imagenumber} ${nonmaskimagename}, Unbend2, ${date}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2,2,0,50,50,19,19               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
APH/${imagename}_movieB_fou.aph
SCRATCH/TMP9873.dat
UMB
${refposix},${refposiy}           ! XORIG,YORIG
200.0,1.5,1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot


# Variation plot generation (no longer used)
#python ${proc_2dx}/movie/calculate_distance.py 1 ${movie_imagenumber_touse} ${nonmaskimagename}
#pdf2ps ${frame_folder}/sd.pdf ${frame_folder}/sd.ps
#convert ${frame_folder}/sd.ps ${frame_folder}/sd.jpg
#echo "# IMAGE: ${frame_folder}/sd.ps <Variations>" >> LOGS/${scriptname}.results

echo "<<@progress: 90>>"
if ( ${movie_filter_type} == '2' ) then
        ${proc_2dx}/linblock "Plotting AMP-Decay"
        python ${proc_2dx}/movie/extractAMP.py `ls ${frame_folder}/aph_*`
        python ${proc_2dx}/movie/plotAMP.py ${frame_folder}/AMPs.txt ${movie_imagenumber_toave}
        ${pdf2ps} ${frame_folder}/AMPs.pdf ${frame_folder}/AMPs.ps 
        echo  "# IMAGE: ${frame_folder}/AMPs.ps <PS: AMP Decay>" >> LOGS/${scriptname}.results
endif

if ( ${tempkeep} != "y" ) then
  ###########################################################################
  ${proc_2dx}/linblock "Deleting frame averages temporay files"
  ###########################################################################
  cd ${frame_folder}
  \rm -rf frame*
  cd ..
endif

# Prevent the "${frame_folder}" directory from showing up in 2dx_merge:
\rm -f ${frame_folder}/2dx_master.cfg

${proc_2dx}/linblock "Plotting local drift"
python ${proc_2dx}/movie/plotLocalDrift.py ${frame_folder} ${frame_folder}/drifts.pdf ${num_dia}

${proc_2dx}/linblock "Finalizing output"
${pdf2ps} ${frame_folder}/drifts.pdf ${frame_folder}/drifts.ps
echo  "# IMAGE: ${frame_folder}/drifts.ps <PS: Local drifts>" >> LOGS/${scriptname}.results

\rm -f ${frame_folder}_quadserch.ps
${pdf2ps} ${frame_folder}_quadserch.pdf ${frame_folder}_quadserch.ps
echo "# IMAGE-IMPORTANT: ${frame_folder}_quadserch.ps <PS: Profiles QUADSERCH>" >> LOGS/${scriptname}.results

\rm -f ${frame_folder}_unbending.ps
${pdf2ps} ${frame_folder}_unbending.pdf ${frame_folder}_unbending.ps
echo "# IMAGE-IMPORTANT: ${frame_folder}_unbending.ps <PS: Profiles CCUNBEND>" >> LOGS/${scriptname}.results


echo "# IMAGE-IMPORTANT: APH/${imagename}_movieB_fou.aph <APH: APH file after movie-mode B unbending>" >> LOGS/${scriptname}.results


###########################################################################
${proc_2dx}/linblock "Script finished correctly."
###########################################################################
echo "<<@progress: 100>>"
echo "<<@evaluate>>"
#
exit
#
# To make sure these show up in the GUI:
python ${proc_2dx}/movie/getFilter.py
python ${proc_2dx}/movie/deleteZeros.py
python ${proc_2dx}/movie/getClosestPeaks.py
source ${proc_2dx}/../2dx_image/scripts-standard/2dx_initialize.script
source ${proc_2dx}/../2dx_image/scripts-standard/2dx_initialize_files.script
source ${proc_2dx}/2dx_initialize_make_image_square_sub.com


