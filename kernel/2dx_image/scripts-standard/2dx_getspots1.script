#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Get SpotList for Unbend I                                          #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 02/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 35
#
# MANUAL: This script establishes a rough spotlist, using a simple <B>mmbox</B> evaluation of the original FFT of the unprocessed image. This spotlist will not be perfect, but may get you to a first approximation of the structure. You can later refine the spotlist with the specific script <I>Refine Spotlist</I>, or refine the spotlist manually in the full-screen browser, when displaying a FFT of the original or unbent image.
#
#
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: spotlist_RESMAX
# DISPLAY: lattice
# DISPLAY: secondlattice
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: IQMAX1
# DISPLAY: IQMAX
# DISPLAY: spot_source
# DISPLAY: spot_filter
# DISPLAY: spot_exclusion_radius
# DISPLAY: ProtSpotList
# DISPLAY: spotrefine_IHKmax
# DISPLAY: refori
# DISPLAY: comment
# DISPLAY: TLTAXIS
# DISPLAY: TLTANG
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
set SCRATCH_DISK = ""
#
set SYN_Unbending = ""
set PHASEORI_done = ""
#
set imagename = ""
set nonmaskimagename = ""
set imagenumber = ""
set realcell = ""
set lattice = ""
set secondlattice = ""
set TLTAXIS = ""
set TLTANG = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set revhk = ""
set realang = ""
set RESMIN = ""
set RESMAX = ""
set spotlist_RESMAX = ""
set ALAT = "" 
set lattice = ""
set IQMAX1 = ""
set IQMAX = ""
set spot_source = ""
set spot_filter = ""
set spot_exclusion_radius = ""
set ProtSpotList = ""
set spotrefine_IHKmax = ""
set refori = ""
#
#$end_vars
#
set scriptname = 2dx_getspots1
#
\rm -f LOGS/${scriptname}.results
#
echo "<<@evaluate>>"
#
source ${proc_2dx}/initialize
#
if ( (${SYN_Unbending} != "0") && (${PHASEORI_done} == "y") ) then
  ${proc_2dx}/linblock "Skipping. Synthetical Reference is used."
  ${proc_2dx}/linblock "Spotlist should be determined already."
  #
  echo "# IMAGE-IMPORTANT: FFTIR/${imagename}_fft.mrc <FFT of Image>" >> LOGS/${scriptname}.results
  echo "# IMAGE-IMPORTANT: FFTIR/${imagename}_red_fft.mrc <FFT of Downsampled Image>" >> LOGS/${scriptname}.results
  #
  exit
endif
#
set date = `date`
echo date = ${date}
#
set refposix = `echo ${refori} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
set refposiy = `echo ${refori} | sed 's/,/ /g' | awk '{ s = $2 } END { print s }'`
echo refposix = ${refposix}
echo refposiy = ${refposiy}
#
source ${proc_2dx}/2dx_makedirs
#
echo "<<@progress: 1>>"
#
#################################################################################
${proc_2dx}/linblock "Verifying some parameters"
#################################################################################
#
set outputfile = findspots.tmp
\rm -f ${outputfile}
#
${bin_2dx}/2dx_calcmag.exe << eot
${realcell}
${realang}
${TLTAXIS}
${TLTANG}
${lattice}
${imagesidelength}
${magnification}
${stepdigitizer}
${outputfile}
eot
#
if ( ! -e ${outputfile} ) then
  ${proc_2dx}/protest "ERROR in 2dx_calcmag.exe"
endif
#
#
set theormag = `cat ${outputfile} | head -n 1`
\rm -f ${outputfile}
#
${proc_2dx}/linblock "Theoretical magnification is ${theormag}, given magnification is ${magnification}"
#
echo "set CALCULATEDMAG = ${theormag}" >> LOGS/${scriptname}.results
#
echo "<<@progress: 5>>"
#
if ( ! -e ${nonmaskimagename}.spt ) then
  set ProtSpotList = "n"
  echo "::SpotList will not be protected... because it does not yet exist."
endif
#
if ( ${ProtSpotList} != "y" ) then
  if ( ${ProtSpotList} != "n" ) then
    # Sometimes, ProtSpotList is not defined, and is simply empty:
    set ProtSpotList = "n"
    echo "set ProtSpotList = n" >> LOGS/${scriptname}.results
  endif
endif
#
if ( ${ProtSpotList} == "n" ) then
  set spotname = ${nonmaskimagename}.spt
else
  set spotname = TMPspotlist.spt
endif
#
echo "<<@progress: 20>>"
#
# Cutoff radius is:
#
#                       Size * stepsize * 10000
# Cutoff radius = ---------------------------------
#                 Resolution[A] * Magnification
#
#
# Example:
#
#    1024 * 17.0 * 10000
#  --------------------- = 241
#   16 * 45000
#
#
set tmp_RESMAX = `echo ${spotlist_RESMAX} | awk '{ if ( $1 < 7.0 ) { s = 7.0 } else { s = $1 } } END { print s }'`
set local_RESMAX = `echo ${tmp_RESMAX} ${RESMAX} | awk '{ if ( $1 < $2 ) { s = $2 } else { s = $1 } } END { print s }'`
${proc_2dx}/linblock "Using resolution limit of ${local_RESMAX} Angstroems"
#
set RINNER = 1
set ROUTER = `echo ${imagesidelength} ${stepdigitizer} ${magnification} ${local_RESMAX} | awk '{ s = ( $1 * $2 *10000 ) / ( $3 * $4 ) } END { print s }'`
${proc_2dx}/linblock "Outer radius = ${ROUTER}"
#
set spot_source_begin = `echo ${spot_source} | cut -c1-3`
if ( ( ${spot_source_begin} == "FFT" ) || ( ! -e ${nonmaskimagename}.spt )) then
  #############################################################################
  ${proc_2dx}/linblock "2dx_mmboxa: To get the spot list from the FFT of the image."
  #############################################################################
  #
  if ( ! -e FFTIR/${imagename}_fft.mrc ) then
    ${proc_2dx}/linblock "ERROR: FFTIR/${imagename}_fft.mrc does not exist."
    ${proc_2dx}/protest "First run Calculate FFT."
  endif 
  #
  \rm -f ${spotname}
  ${bin_2dx}/2dx_mmboxa.exe << eot
FFTIR/${imagename}_fft.mrc
${imagenumber}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2 3 0 50 50 12 12               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
${spotname}
${IQMAX1}                              ! IQMAX
${refposix} ${refposiy}         ! XORIG,YORIG
${RINNER} ${ROUTER} 0 ${realcell} ${ALAT} ${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot
  #
endif
#
echo "<<@progress: 40>>"
#
if ( ${spot_source_begin} == "Gen" ) then
  #############################################################################
  ${proc_2dx}/linblock "2dx_spotgenerator: To create a synthetic full spot list."
  #############################################################################
  #
  \rm -f ${spotname}
  ${bin_2dx}/2dx_mmboxa.exe << eot
FFTIR/${imagename}_fft.mrc
${imagenumber}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2 3 0 50 50 12 12               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
${spotname}
9                              ! IQMAX
${refposix} ${refposiy}         ! XORIG,YORIG
${RINNER} ${ROUTER} 0 ${realcell} ${ALAT} ${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot
  #
endif
#
echo "<<@progress: 60>>"
#
if ( ${spot_filter} == 'y' ) then
  #
  set spotnum = `cat ${spotname} | wc -l`
  ${proc_2dx}/linblock "So far, found ${spotnum} spots."
  #
  #############################################################################
  ${proc_2dx}/linblock "2dx_spotfilter: To weed out the spots on second lattice."
  #############################################################################
  #
  \rm -f SCRATCH/GOODSPOT.spt
  \rm -f SCRATCH/BADSPOT.spt
  \rm -f SCRATCH/COUNTSPOT.tmp
  \rm -f SCRATCH/CORRECTEDSPOT.spt
  #
  set imodspot = 1
  #
  ${bin_2dx}/2dx_spotfilter.exe << eot
${lattice}
${secondlattice}
${spotrefine_IHKmax}
${spot_exclusion_radius}
${imodspot}
${spotname}
SCRATCH/GOODSPOT.spt
SCRATCH/BADSPOT.spt
SCRATCH/COUNTSPOT.tmp
SCRATCH/CORRECTEDSPOT.spt
eot
  #
  if ( ! -e SCRATCH/COUNTSPOT.tmp ) then
    ${proc_2dx}/protest "ERROR in 2dx_spotfilter"
  endif
  set igood = `head -1 SCRATCH/COUNTSPOT.tmp`
  set ibad  = `head -2 SCRATCH/COUNTSPOT.tmp | tail -1`
  set ispt  = `head -3 SCRATCH/COUNTSPOT.tmp | tail -1`
  set irest = `head -4 SCRATCH/COUNTSPOT.tmp | tail -1`
  echo "::`echo 2dx_spotfilter: Generated ${igood} good and ${ibad} bad spots.`"
  echo :From ${ispt} spots in ${spotname} survived ${irest} spots.
  echo :Survived spots are copied onto ${spotname}
  \rm -f ${spotname}
  \mv SCRATCH/CORRECTEDSPOT.spt ${spotname}
  echo :Good spots are in SCRATCH/GOODSPOT.spt
  \rm -f SCRATCH/COUNTSPOT.tmp
  #
  set spotnum = `cat ${spotname} | wc -l`
  ${proc_2dx}/linblock "Now you have ${spotnum} spots."
  #
else
  #
  set spotnum = `cat ${spotname} | wc -l`
  ${proc_2dx}/linblock "You have ${spotnum} spots."
  #
endif
#
echo " " >> History.dat
echo ":Get Spotlist: You have ${spotnum} spots." >> History.dat
#
echo "<<@progress: 80>>"
#
echo "# IMAGE-IMPORTANT: ${spotname} <SPT: Fourier Spot List>" >> LOGS/${scriptname}.results
#
echo "# IMAGE-IMPORTANT: FFTIR/${imagename}_fft.mrc <FFT of Image>" >> LOGS/${scriptname}.results
echo "# IMAGE-IMPORTANT: FFTIR/${imagename}_red_fft.mrc <FFT of Downsampled Image>" >> LOGS/${scriptname}.results
#
cp ${spotname} ${spotname}.bak
if ( ${ProtSpotList} == "y" ) then
  ${proc_2dx}/linblock "Spotlist left untouched, since it is protected."
  \rm -f TMPspotlist.spt
endif
#
echo "set SPOTS_done = y" >> LOGS/${scriptname}.results
echo "set UNBENDING_done = n" >> LOGS/${scriptname}.results
echo "set ML_done = n" >> LOGS/${scriptname}.results
echo "set CTF_done = n" >> LOGS/${scriptname}.results
echo "set MERGING_done = n" >> LOGS/${scriptname}.results
#
##########################################################################
${proc_2dx}/linblock "${scriptname} - normal end."
##########################################################################
#
echo "<<@progress: 100>>"
#
