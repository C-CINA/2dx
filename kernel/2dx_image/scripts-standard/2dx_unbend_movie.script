#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Unbend Movie Mode                                                  #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 02/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# MANUAL: Movie mode unbending script
#
# MANUAL: 
#
# SORTORDER: 52
#
# DISPLAY: imagename
# DISPLAY: imagesidelength 
# DISPLAY: SYN_Unbending
# DISPLAY: holeb
# DISPLAY: maskb01
# DISPLAY: maskb02
# DISPLAY: maskb03
# DISPLAY: maskb04
# DISPLAY: maskb05
# DISPLAY: boxb1
# DISPLAY: boxb2
# DISPLAY: quadradb
# DISPLAY: facthreshb
# DISPLAY: quadpredb
# DISPLAY: RESMAX
# DISPLAY: RESMIN
# DISPLAY: ALAT
# DISPLAY: radlim
# DISPLAY: domask
# DISPLAY: ctf_ttf
# DISPLAY: treatspotscan
# DISPLAY: ctfplotresmax
# DISPLAY: tempkeep
# DISPLAY: refori
# DISPLAY: createmaskinfo
# DISPLAY: ISTEP
# DISPLAY: ISTEP_h
# DISPLAY: IMAXCOR
# DISPLAY: comment
# DISPLAY: RMAG
# DISPLAY: LCOLOR
# DISPLAY: ccunbend_program
# DISPLAY: plotres_rings
# DISPLAY: movie_stackname
# DISPLAY: movie_enable
# DISPLAY: movie_imagenumber_total
# DISPLAY: movie_imagenumber_touse

# DISPLAY: zwinlocal
# DISPLAY: sgnxch
# DISPLAY: SCL
# DISPLAY: rot180
# DISPLAY: revhk
# DISPLAY: ctfrev
# DISPLAY: rot90
# DISPLAY: revhnd
# DISPLAY: revxsgn
# DISPLAY: MergeIQMAX
# DISPLAY: ampweight
# DISPLAY: TAXA
# DISPLAY: TANGL
# DISPLAY: phastep
# DISPLAY: phaori
# DISPLAY: tempfac
#
#$end_local_vars
#
#
set bin_2dx = ""
set proc_2dx = ""
#
set SYN_Unbending = ""
set PHASEORI_done = ""
set boxb1 = ""
set boxb2 = ""
set quadradb = ""
set imagename = ""
set defocus = ""
set nonmaskimagename = ""
set imagenumber = ""
set realcell = ""
set lattice = ""
set holeb = ""
set maskb01 = ""
set maskb02 = ""
set maskb03 = ""
set maskb04 = ""
set maskb05 = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set ALAT = ""
set quadpredb = ""
set radlim = ""
set realang = ""
set treatspotscan = ""
set facthresha = ""
set phacon = ""
set ctfplotresmax = ""
set stepdigitizer = ""
set CS = ""
set KV = ""
set domask = ""
set TLTAXIS = ""
set TLTANG = ""
set TANGL = ""
set det_tilt = ""
set ctf_ttf = ""
set refori = ""
set createmaskinfo = ""
set ISTEP = ""
set ISTEP_h = ""
set IMAXCOR = ""
set RMAG = ""
set LCOLOR = ""
set ccunbend_program = ""
set RB_1 = ""
set RB_2 = ""
set RB_3 = ""
set RB_4 = ""
set RB_5 = ""
set RB_6 = ""
set RP_1 = ""
set RP_2 = ""
set RP_3 = ""
set RP_4 = ""
set RP_5 = ""
set RP_6 = ""
set movie_stackname = ""
set movie_enable = ""
set movie_imagenumber_total = ""
set movie_imagenumber_touse = ""
set app_2dx_image = ""
set beamtilt = ""
set plotres_rings = ""
set tempfac = ""


set phaori = "" 
set sgnxch = ""
set rot180 = ""
set revhk = ""
set ctfrev = ""
set rot90 = ""
set revhnd = ""
set revxsgn = ""
set MergeIQMAX = ""
set ampweight = ""
set TAXA = ""
set TANGL = ""
#
#$end_vars
#


set spcgrp_first = 1
set IAQP2 = 0
set IVERBOSE = 1
set LOGOUTPUT = F
set LPROTFOUFIL = T
set phastepnum = 1
set phastep = 0.1

if ( ${rot90} == 'y' ) then
  set rot90val = '1'
else
  set rot90val = '0'
endif



set ttfcorfirst = "n"

set scriptname = 2dx_unbend_movie
\rm -f LOGS/${scriptname}.results
#
echo "<<@evaluate>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set date = `date`
echo date = ${date}
#

if ( ${movie_enable} == "n" ) then
  ${proc_2dx}/linblock "Skipping movie mode unbending."
  exit
endif

# Generate subfolder for frame images
set frame_folder = "frames"
if ( -e ${frame_folder}) then
	\rm -rf ${frame_folder}
endif
\mkdir ${frame_folder}
	
python ${bin_2dx}/movie_mode_py/movie_mode_split.py ${movie_stackname} ${nonmaskimagename}

foreach f  (`ls frames`)
	\cp 2dx_image.cfg frames/$f/
	python ${bin_2dx}/movie_mode_py/disable_movie.py  frames/$f/
end

\rm -f frame_unbending.pdf
\touch frame_unbending.pdf

\rm -f frame_ctf.pdf
\touch frame_ctf.pdf


@ i = 1
while ($i <= 20)
	
	${app_2dx_image} frames/frame_${i} "2dx_initialize"
	${app_2dx_image} frames/frame_${i} "2dx_initialize_files"
	${app_2dx_image} frames/frame_${i} "2dx_fftrans"

	echo frames/frame_${i}/FFTIR/${nonmaskimagename}_${i}.fft.mrc
	
	setenv IN  frames/frame_${i}/FFTIR/${nonmaskimagename}_${i}.fft.mrc
	setenv OUT frames/frame_${i}/SCRATCH/${nonmaskimagename}.fft.msk.mrc
	setenv SPOTS ${imagename}.spt

	set maskb = ${maskb02}
	set rmax = 11000
    ${bin_2dx}/2dx_masktrana.exe << eot
	1 T T F	! ISHAPE=1(CIRC),2(GAUSCIR),3(RECT)HOLE,IAMPLIMIT(T or F),ISPOT,IFIL
	${maskb} ! RADIUS OF HOLE IF CIRCULAR, X,Y HALF-EDGE-LENGTHS IF RECT.
	${lattice},-30,30,-30,30,${rmax},1 ! A/BX/Y,IH/IKMN/MX,RMAX,ITYPE
eot

	set refposix = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $1 ) } END { print s }'`
	set refposiy = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $2 ) } END { print s }'`
	\rm -f frames/frame_${i}/SCRATCH/corel1${nonmaskimagename}.fft.mrc
	setenv IN1 frames/frame_${i}/SCRATCH/${nonmaskimagename}.fft.msk.mrc
	setenv IN2 SCRATCH/ref1${imagename}.fft.unbend2.mrc
	setenv OUT frames/frame_${i}/SCRATCH/corel1${nonmaskimagename}.fft.mrc
	${bin_2dx}/twofile.exe << eot
		2 ! ICOMB = 2
		2 0 0 ${refposix} ${refposiy} ! IORIGIN,OXA,OYA,OXB,OYB  Origin shifts to FFTs
eot
	
	/bin/rm -f frames/frame_${i}/SCRATCH/cor1${nonmaskimagename}.cor.mrc
	setenv IN frames/frame_${i}/SCRATCH/corel1${nonmaskimagename}.fft.mrc
	setenv OUT frames/frame_${i}/SCRATCH/cor1${nonmaskimagename}.cor.mrc
	${bin_2dx}/2dx_fftrans.exe
	
	\rm -f frames/frame_${i}/SCRATCH/prof${nonmaskimagename}.dat
	\rm -f SPIDERCOORD.spi
    setenv PROFILE  SCRATCH/auto${imagename}.map.mrc
    setenv PROFDATA frames/frame_${i}/SCRATCH/prof${nonmaskimagename}.dat
    setenv ERRORS   SCRATCH/errout${imagename}.dat

	set quadradbx = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
	set quadradby = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
	set valspotscan = '0'
	set createmask = '0'
	${bin_2dx}/2dx_quadserchk-2.exe << eot
2,${quadpredb}                     ! IPASS,NRANGE
frames/frame_${i}/SCRATCH/cor1${nonmaskimagename}.cor.mrc
${imagesidelength},${imagesidelength}     ! SIZE OF TRANSFORM (ISIZEX, ISIZEY)
${lattice},F                       ! Lattice vectors
-200,200,-200,200               ! NUMBER UNIT CELLS TO SEARCH
${quadradbx},${quadradby}           ! RADIUS OF CORR SEARCH
${refposix} ${refposiy}           ! POSN OF START SEARCH ORIGIN  0,0 IS ORIGIN
N                               ! YES/NO FOR DETAILED PRINTOUT
${radlim}                       ! RADLIM IN PROFILE GRID UNITS
${valspotscan},${RMAG},${LCOLOR}          ! prohibit fractures in crystal (1=y,0=n),RMAG,LCOLOR
${createmask}                   ! create manual Masking information (0=n,1=y)
0                               ! Dont mask the image directly
eot

	setenv CCORDATA frames/frame_${i}/SCRATCH/prof${nonmaskimagename}.dat
	setenv TABLEOUT frames/frame_${i}/SCRATCH/ccunbend-table-${nonmaskimagename}.dat
	set ITYPE = 0
	set ROFFSET = 50.0
	set NNUM = 6
	${bin_2dx}/2dx_ccunbendk.exe << eot
frames/frame_${i}/${nonmaskimagename}_${i}.mrc
${ITYPE},1,${IMAXCOR},${ISTEP},F,40,T       !ITYPE,IOUT,IMAXCOR,ISTEP,LTAPER,RTAPER,LTABOUT
30,52,0.001,${facthresha},${TLTAXIS},${RMAG},${LCOLOR}     !IKX,IKY,EPS,FACTOR,TLTAXIS,RMAG,LCOLOR
${imagename}, UNBEND2, ${date}
frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.notap.mrc
UNBENT,PASS,2,${date}
eot

	if ( ${i} == '1' ) then
		ps2pdf CCPLOT.PS frame_unbending.pdf
		pdftk A=frame_unbending.pdf cat A2 output out.pdf
		mv out.pdf frame_unbending.pdf
	else
		ps2pdf CCPLOT.PS ccplot.pdf
		pdftk A=frame_unbending.pdf B=ccplot.pdf cat A1-end B2 output out.pdf
		mv out.pdf frame_unbending.pdf
	endif
	
	setenv IN  frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.notap.mrc
	setenv OUT frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.mrc
	${bin_2dx}/2dx_taperedgek.exe << eot
		30,30,100,30       ! IAVER,ISMOOTH,ITAPER
eot

	setenv IN  frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.mrc
	setenv OUT frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.fft.mrc
	${bin_2dx}/2dx_fftrans.exe
	
	${bin_2dx}/2dx_mmboxa.exe << eot
frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.fft.mrc
${imagenumber} ${nonmaskimagename}_${i}, Unbend2, ${date}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2,2,0,50,50,19,19               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
frames/frame_${i}/APH/${nonmaskimagename}.fou.nolimit.aph
frames/frame_${i}/SCRATCH/TMP9873.dat
U2
${refposix},${refposiy}           ! XORIG,YORIG
200.0,1.5,1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot

	${bin_2dx}/2dx_mmboxa.exe << eot
frames/frame_${i}/SCRATCH/cor${nonmaskimagename}.fft.mrc
${imagenumber} ${nonmaskimagename}_${i}, Unbend2, ${date}
Y				! Use grid units?
Y				! Generate grid from lattice?
N				! Generate points from lattice?
2,2,0,50,50,19,19		! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
frames/frame_${i}/APH/${nonmaskimagename}.fou.limit.aph
frames/frame_${i}/SCRATCH/TMP9882.dat
U2
${refposix},${refposiy}		! XORIG,YORIG
${RESMIN},${RESMAX},1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}				! Lattice vectors
eot

	#set RESPLOTMAX = `echo ${ctfplotresmax} | awk '{ if ( $1 > 0.1 ) { s = 1.0 / $1 } else { s = 0.3 } } END { print s }'`
	set RESPLOTMAX = 0.3

	setenv IN  frames/frame_${i}/APH/${nonmaskimagename}.fou.nolimit.aph
	setenv OUT frames/frame_${i}/APH/${nonmaskimagename}.fou.ctf.nolimit.aph
	${bin_2dx}/2dx_ctfapplyk.exe << eot
${lattice},${imagesidelength},${stepdigitizer},${magnification} ! AX,AY,BX,BY,ISIZE,DSTEP,XMAG
${defocus},${CS},${KV},${RESPLOTMAX} ! DFMID1,DFMID2,ANGAST,CS,KV,RESMAX
${imagenumber} ${nonmaskimagename}_${i}, ${date}
${phacon}
${RESMIN},1.0
eot

	setenv IN  frames/frame_${i}/APH/${nonmaskimagename}.fou.limit.aph
	setenv OUT frames/frame_${i}/APH/${nonmaskimagename}.fou.ctf.limit.aph
	${bin_2dx}/2dx_ctfapplyk.exe << eot
${lattice},${imagesidelength},${stepdigitizer},${magnification} ! AX,AY,BX,BY,ISIZE,DSTEP,XMAG
${defocus},${CS},${KV},${RESPLOTMAX} ! DFMID1,DFMID2,ANGAST,CS,KV,RESMAX
${imagenumber} ${nonmaskimagename}_${i}, ${date}
${phacon}
${RESMIN},${RESMAX}
eot
	
	if ( ${i} == '1' ) then
		ps2pdf CTFPLOT.PS frame_ctf.pdf
		pdftk A=frame_ctf.pdf cat A1 output out.pdf
		mv out.pdf frame_ctf.pdf
	else
		ps2pdf CTFPLOT.PS ctfplot.pdf
		pdftk A=frame_ctf.pdf B=ctfplot.pdf cat A1-end B1 output out.pdf
		mv out.pdf frame_ctf.pdf
	endif
	
	if ( ${rot180} == 'y' ) then
		set rot180val = '1'
	else
		set rot180val = '0'
	endif

	if ( ${rot90} == 'y' ) then
		set rot90val = '1'
	else
		set rot90val = '0'
	endif

	if ( ${revhk} == 'y' ) then
		set revhkval = '1'
	else
		set revhkval = '0'
	endif

	if ( ${revhnd} == 'y' ) then
		set revhndval = '1'
	else
		set revhndval = '0'
	endif

	if ( ${ctfrev} == 'y' ) then
		set ctfrevval = '1'
	else
		set ctfrevval = '0'
	endif

	echo sgnxch = ${sgnxch}
	if ( ${sgnxch} == "y" ) then
		set sgnxchval = 1
		set phaorix = `echo ${phaori_local} | cut -d\, -f1 `
		set phaoriy = `echo ${phaori_local} | cut -d\, -f2 | awk '{ s = -$1 } END { print s }'`
		set phaori_local = `echo ${phaorix},${phaoriy}`
	else
		set sgnxchval = 0
	endif

	echo revxsgn = ${revxsgn}
	if ( ${revxsgn} == "y" ) then
		set revxsgnval = 1
		set phaorix = `echo ${phaori_local} | cut -d\, -f1 | awk '{ s = -$1 } END { print s }'`
		set phaoriy = `echo ${phaori_local} | cut -d\, -f2 `
		set phaori_local = `echo ${phaorix},${phaoriy}`
	else
		set revxsgnval = 0
	endif

	set SCL = 1
	echo "SCL = ${SCL}"
	set phastep = 0.1
	set scl = 1
	set zwinlocal = 0.5
	set phaori_local = ${phaori}

	set ampweight = 0.5
	set aphdummy = ${proc_2dx}/dummy.aph
	
	set aphdummy = ${proc_2dx}/dummy.aph
	set aphfile = frames/frame_${i}/APH/${nonmaskimagename}.fou.ctf.limit.aph
	
	\rm -f frames/frame_${i}/SCRATCH/2dx_origtilt-LOG1.dat
	\rm -f 2dx_origtiltk-console.log
	
	${bin_2dx}/2dx_origtiltk.exe << eot
frames/frame_${i}/SCRATCH/2dx_origtilt-LOG1.dat
${spcgrp_first},0,F,F,1,${realcell},${ALAT},${realang},0,15,${IAQP2},${IVERBOSE},${LOGOUTPUT}
10,0.7,10,0.5
${imagenumber},0,30,${MergeIQMAX},${phastepnum},F,F,${ampweight}
0000000100 DUMMY
${aphdummy}
${imagenumber}, ${nonmaskimagename}_${i}, ${date}
${aphfile}
F
${TAXA},${TANGL},0                                                  ! TAXA,TANGL,IORIGT
${lattice} 					! Reciprocal lattice
${phaori_local},${phastep},${zwinlocal},${sgnxchval},${SCL},${rot180val},${revhkval},${ctfrevval},${rot90val},${revhndval},${revxsgnval},${LPROTFOUFIL} ! OH,OK,STEP,WIN,SGNXCH,SCL,ROT,REV,CTFREV,ROT90,REVHND,REVXSGN,LPROTFOUFIL
${CS},${KV},${beamtilt}                                                ! cs,kv,tx,ty
${RESMIN},${RESMAX}                                                 ! resolution limits
-1
eot

	cp fort.3  frames/frame_${i}/APH/

	\cp -f fort.3 fort.1
	\rm -f fort.2
	\rm -f fort.3
	\rm -f fort.4
	\rm -f TMP444888.tmp
		
	set zminmax = "-0.5,0.5"
	${bin_2dx}/avrgamphs.exe << eot
T
${imagenumber},${zminmax}
8
${realcell} ${realang}
eot

	set prefix = ""

	\rm -f fort.1
	\mv -f fort.2 ${prefix}avrg.hkl
	\mv -f fort.3 ${prefix}avrg.hk
	\mv -f fort.4 APH/${prefix}ctfmerge.nolimit.aph
	\rm -f TMP444888.tmp
	
	
	set SYM_sub = 'p1'
	
	\rm -f ${prefix}centric.hkl
	\rm -f ${prefix}centric.hk
	\rm -f ${prefix}centric_phase_zero.hkl
	
	${bin_2dx}/2dx_centric3.exe << eot
${prefix}avrg.hkl
${prefix}centric.hkl
${prefix}centric.hk
${prefix}centric_phase_zero.hkl
${realcell},${realang}
${RESMIN},${RESMAX}
${SYM_sub}
eot

	set CCP4_SYM = "1"
	set prename = ""
	set infile = ${prefix}centric_phase_zero.hkl
	${bin_ccp4}/f2mtz hklin ${infile} hklout ${prefix}${imagename}.mtz << eof
TITLE  Map, Symmetry=${CCP4_SYM}, ${prename}${imagename}, ${date}
CELL ${realcell} ${ALAT} 90.0 90.0 ${realang}
SYMMETRY ${CCP4_SYM}
LABOUT H K L F PHI FOM
CTYPOUT H H H F P W
FILE ${infile}
SKIP 1
END
eof

	${bin_ccp4}/f2mtz hklin ${infile} hklout ${prefix}${imagename}_phase_zero.mtz << eof
TITLE  Map, Symmetry=${CCP4_SYM}, ${prename}${imagename}_phase_zero, ${date}
CELL ${realcell} ${ALAT} 90.0 90.0 ${realang}
SYMMETRY ${CCP4_SYM}
LABOUT H K L F PHI FOM
CTYPOUT H H H F P W
FILE ${infile}
SKIP 1
END
eof


	${bin_ccp4}/mtzdump hklin ${prefix}${imagename}.mtz << eot > mtzdump.txt
NREF 100
END
eot

	set AXIS = "X,Y,Z"
	set scale = 1
    ${bin_ccp4}/fft hklin ${prefix}${imagename}_phase_zero.mtz mapout SCRATCH/scratch1_phase_zero.map  << eot
LABIN F1=F PHI=PHI ##
PROJECTION
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE Sym=${SYM_sub}, ${imagename}, ${date}, res=${RESMAX}, T=${tempfac}
GRID 200 200 20
XYZLIM 0 199 0 199 0 0
RHOLIM 250.0
HKLMAX 50 50 50
END
eot

	${bin_ccp4}/fft hklin ${prefix}${imagename}.mtz mapout SCRATCH/scratch1.map  << eot
LABIN F1=F PHI=PHI ##
PROJECTION
AXIS ${AXIS}
SCALE F1 ${scale} ${tempfac}
RESOLUTION ${RESMIN} ${RESMAX}
TITLE Sym=${SYM_sub}, ${imagename}, ${date}, res=${RESMAX}, T=${tempfac}
GRID 200 200 20
XYZLIM 0 199 0 199 0 0
RHOLIM 250.0
HKLMAX 50 50 50
END
eot


	${bin_ccp4}/mapmask mapin SCRATCH/scratch1_phase_zero.map mapout SCRATCH/${prefix}${imagename}_phase_zero-${SYM_sub}.map << eof
MODE mapin
XYZLIM -0.3 0.3 -0.3 0.3 -0.0 0.0
END
eof


	${bin_ccp4}/mapmask mapin SCRATCH/scratch1.map mapout SCRATCH/${prefix}${imagename}-${SYM_sub}.map << eof
XYZLIM 0 399 0 399 0 0
END
eof

	${bin_2dx}/labelh.exe << eot
SCRATCH/${prefix}${imagename}_phase_zero-${SYM_sub}.map 
2
${prefix}${imagename}_phase_zero-${SYM_sub}.mrc
1,0
0
eot


	${bin_2dx}/labelh.exe << eot
SCRATCH/${prefix}${imagename}-${SYM_sub}.map 
2
${prefix}${imagename}-${SYM_sub}.mrc
1,0
0
eot

	 \cp -f final_map.mrc frames/frame_${i}/final_map_FouFilter.mrc

	
#	python ${bin_2dx}/movie_mode_py/enable_masking.py  frames/$f/
#	${app_2dx_image} frames/$f/ "2dx_unbend2"
#	python ${bin_2dx}/movie_mode_py/disable_masking.py  frames/$f/
	
	@ i += 1
end


@ i = 1
foreach f  (`ls frames`)
	echo "# IMAGE: frames/frame_${i}/final_map_FouFilter.mrc <Map #${i}>" >> LOGS/${scriptname}.results
	@ i += 1
end

set qvalfile = "movie_qvals.txt"
if ( -e ${qvalfile}) then
	\rm -f ${qvalfile}
endif

@ i = 1
foreach f  (`ls frames`)
	python ${bin_2dx}/movie_mode_py/writeQVal2.py  ${i}
	@ i += 1
end

python ${bin_2dx}/movie_mode_py/plotQVal2.py ${qvalfile} "qvals.pdf"
echo "# IMAGE: qvals.pdf <QVal per frame number>" >> LOGS/${scriptname}.results
