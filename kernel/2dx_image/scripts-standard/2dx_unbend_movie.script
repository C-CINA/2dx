#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Unbend Drift Correction (Experimental)                             #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 02/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# MANUAL: Movie mode unbending script
#
# MANUAL: Prerequisite I: Installed eman2/sparx package. Ensure that the eman2.bashrc is sourced (optimally in your bash.rc or .profile file) before starting 2dx. 
#
# MANUAL: Prerequisite II: Python-2.7 (or higher) including matplotlib and numpy. If you have installed eman2, this should be available on your system.
#
# MANUAL: Prerequisite III: PDFtk. You can get it from "https://www.pdflabs.com/tools/pdftk-server/".   Or, try on OSX:  port install pdftk
#
# MANUAL: Prerequisite IV: ps2pdf (Linux) or pstopdf (OSX). These should be already present.
#
# MANUAL: Prerequisite IV: pdf2ps. This is part of ghostscript. You can get it with:  port install <B>ghostscript</b>.
#
# MANUAL: Before using movie-mode unbending, switch movie-mode processing on and rerun "InitFilesAndParams" to preset the used batch size dependening on the number of available movie-frames.
#
# MANUAL: Using the movie-mode unbent APH-file requires selecting the movie-mode option in "Correct CTF" and rerunning of "Generate Map".
#
# MANUAL: Careful prevention of overfitting is crucial for successful movie-mode 3D reconstructions.
#
#
# SORTORDER: 52
#
# DISPLAY: imagename
# DISPLAY: imagesidelength 
# DISPLAY: SYN_Unbending
# DISPLAY: holeb
# DISPLAY: maskb01
# DISPLAY: maskb02
# DISPLAY: maskb03
# DISPLAY: maskb04
# DISPLAY: maskb05
# DISPLAY: boxb1
# DISPLAY: boxb2
# DISPLAY: quadpredb
# DISPLAY: RESMAX
# DISPLAY: RESMIN
# DISPLAY: ALAT
# DISPLAY: radlim
# DISPLAY: ctf_ttf
# DISPLAY: treatspotscan
# DISPLAY: ctfplotresmax
# DISPLAY: tempkeep
# DISPLAY: refori
# DISPLAY: ISTEP
# DISPLAY: ISTEP_h
# DISPLAY: IMAXCOR
# DISPLAY: comment
# DISPLAY: RMAG
# DISPLAY: LCOLOR
# DISPLAY: ccunbend_program
# DISPLAY: plotres_rings
# DISPLAY: movie_stackname
# DISPLAY: movie_enable
# DISPLAY: movie_imagenumber_total
# DISPLAY: movie_masking_mode
# DISPLAY: movie_refboxa
# DISPLAY: movie_refboxb
# DISPLAY: movie_quadrada
# DISPLAY: movie_quadradb
# DISPLAY: movie_facthreshb
# DISPLAY: movie_filter_type
# DISPLAY: movie_filter_param
# DISPLAY: Thread_Number
#
#$end_local_vars
#
#
set app_2dx_image = ""
set bin_2dx = ""
set proc_2dx = ""
#
set SYN_Unbending = ""
set PHASEORI_done = ""
set boxb1 = ""
set boxb2 = ""
set imagename = ""
set defocus = ""
set nonmaskimagename = ""
set imagenumber = ""
set realcell = ""
set lattice = ""
set holeb = ""
set maskb01 = ""
set maskb02 = ""
set maskb03 = ""
set maskb04 = ""
set maskb05 = ""
set imagesidelength = ""
set magnification = ""
set stepdigitizer = ""
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set ALAT = ""
set quadpredb = ""
set quadradb = ""
set radlim = ""
set realang = ""
set treatspotscan = ""
set facthresha = ""
set phacon = ""
set ctfplotresmax = ""
set stepdigitizer = ""
set CS = ""
set KV = ""
set domask = ""
set TLTAXIS = ""
set TLTANG = ""
set TANGL = ""
set det_tilt = ""
set ctf_ttf = ""
set refori = ""
set createmaskinfo = ""
set ISTEP = ""
set ISTEP_h = ""
set IMAXCOR = ""
set RMAG = ""
set LCOLOR = ""
set ccunbend_program = ""
set crop = ""
set RB_1 = ""
set RB_2 = ""
set RB_3 = ""
set RB_4 = ""
set RB_5 = ""
set RB_6 = ""
set RP_1 = ""
set RP_2 = ""
set RP_3 = ""
set RP_4 = ""
set RP_5 = ""
set RP_6 = ""
set movie_stackname = ""
set movie_enable = ""
set movie_imagenumber_total = ""
set movie_imagenumber_touse = ""
set movie_filter_type = ""
set movie_filter_param = ""
set app_2dx_image = ""
set movie_masking_mode = ""
set movie_refboxa = ""
set movie_refboxb = ""
set movie_quadrada = ""
set movie_quadradb = ""
set movie_facthreshb = ""
set MASKING_done = ""
set QVALS = ""
set Thread_Number = ""
#
#$end_vars
#
set scriptname = 2dx_unbend_movie
\rm -f LOGS/${scriptname}.results
#
echo "<<@evaluate>>"
echo "<<@progress: 1>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set date = `date`
echo date = ${date}
#
set system = `uname -s`
echo system = ${system}
#
set movie_imagenumber_toave = 1
#
##########################################
##########################################
if ( ${system} == "Darwin" ) then
  set S2 = "henning"
  set S3 = "sthennin"
  if (( "$USER" == "$S2" ) || ( "$USER" == "$S3" )) then
    set app_2dx_image = "~/2dx/bin/2dx_image"
  else
    set app_2dx_image = "${bin_2dx}/../../../bin/2dx_image"
  endif
  echo ":Testing, if gostscript is installed and ps2pdf exists"
  set ps2pdf_test = `which ps2pdf`x 
  if ( ${ps2pdf_test} == 'x' ) then
    set ps2pdf = pstopdf
    echo "::"
    echo "::ERROR: Install gostscript first."
    echo "::"
  else
    set ps2pdf = `which ps2pdf` 
    set pdf2ps = `which pdf2ps`
  endif
else
  set app_2dx_image = "2dx_image"
  set ps2pdf = ps2pdf
  set pdf2ps = pdf2ps
endif
echo ":pdf2ps is ${pdf2ps}"
echo ":ps2pdf is ${ps2pdf}"
if ( ${pdf2ps}x == 'x' ) then
  set pdf2ps = "echo ::ERROR: pdf2ps not found. Install gostscript."
  echo ::
  echo ::ERROR: pdf2ps not found. Install gostscript.
  echo ::
endif
##########################################
##########################################
#
echo  "# IMAGE-IMPORTANT: ${movie_stackname} <Raw image stack>" >> LOGS/${scriptname}.results
#
if ( ${movie_enable} == "n" ) then
  ${proc_2dx}/linblock "Skipping movie mode unbending."
  exit
endif
#
${proc_2dx}/linblock "Movie Mode."
if ( -e ${movie_stackname}.mrc ) then
  set movie_stackname = ${movie_stackname}.mrc
  echo "set movie_stackname = ${movie_stackname}"  >> LOGS/${scriptname}.results
endif
#
if ( ${MASKING_done} == "y" ) then
  if ( ${movie_masking_mode} == "0" ) then
    ${proc_2dx}/linblock "WARNING: Correcting Frame Masking Mode to 1=Masking based on UnbendII"
    set movie_masking_mode = 1
    echo "set movie_masking_mode = ${movie_masking_mode}" >> LOGS/${scriptname}.results
  endif
endif
# 
if ( ! -e ${movie_stackname}) then
  ${proc_2dx}/protest "ERROR: ${movie_stackname} missing. Aborting."
else
  # Get the number of frames
  e2iminfo.py -H ${movie_stackname} > tmp_stack_header.txt
  set movie_imagenumber_total = `\grep "MRC.nz:" tmp_stack_header.txt | cut -d' ' -f 2`
  ${proc_2dx}/linblock "Stack contains ${movie_imagenumber_total} frames"
  echo "set movie_imagenumber_total = ${movie_imagenumber_total}"  >> LOGS/${scriptname}.results
  set movie_imagenumber_touse = `echo ${movie_imagenumber_total} ${movie_imagenumber_toave} | awk '{s = int($1/$2) } END { print s }'`
  echo "set movie_imagenumber_touse = ${movie_imagenumber_touse}"  >> LOGS/${scriptname}.results
  \rm tmp_stack_header.txt
endif
#
if ( ${movie_filter_type} == "0" ) then
  #
  # automatic calculation of A and B for exponential filter:  
  # filter type:   res = a * exp(b * N)  ; with N being the frame number, up to Nmax.
  # res should be between 0.0 and 0.5 (Nyquist)
  #
  # For first half of frames, resolution should be the full 0.5.
  # 0.50 = A * exp(B * Nmax/2)
  # At last frame, limit resolution to 0.25
  # 0.25 = A * exp(B * Nmax)
  # 
  # Second equation equals:  A = 0.25 / exp(B * Nmax)
  # Into first equation gives: 
  # 0.50 = 0.25 / exp(B * Nmax) * exp(B * Nmax/2)
  # or: 0.50 = 0.25 / exp(B * Nmax/2)
  # or: 0.5 = exp(B * Nmax/2) 
  # or: ln(0.5) = B * Nmax/2 
  # or: B = 2 * ln(0.5) / Nmax
  # or: B = -1.38629 / Nmax
  #
  # Insertion into first equation gives: 
  # A = 0.5 / exp(2*ln(0.5)/Nmax * Nmax/2)
  # A = 0.5 / exp(2*ln(0.5)/2)
  # A = 0.5 / 0.5 = 1.0
  #
  set filt_a = 1.0
  set filt_b = `echo ${movie_imagenumber_total} | awk '{ s =  -1.38629 / $1 } END { print s }'`
  echo ":Automatic filters: filt_a = ${filt_a},  filt_b = ${filt_b}"
  echo "set filt_a = ${filt_a}"  >> LOGS/${scriptname}.results
  echo "set filt_b = ${filt_b}"  >> LOGS/${scriptname}.results
else
  set filt_a = `echo ${movie_filter_param} | sed 's/,/ /g' | awk '{ s = $1 } END { print s }'`
  set filt_b = `echo ${movie_filter_param} | sed 's/,/ /g' | awk '{ s = $2 } END { print s }'`
endif
#
set num_dia = 100
#
# Generate subfolder for frame images
\rm -rf frames
if ( ! -d frames ) then
  \mkdir frames
  cd frames
  if ( ! -d PS ) then
    \mkdir PS
  endif
  cd ..
  #
  echo "<<@progress: 10>>"
  #
  ###############################################################
  ${proc_2dx}/linblock "Splitting Stack into ${movie_imagenumber_touse} frames"
  ############################################################### 
  #
  python ${proc_2dx}/movie/movie_mode_split.py ${movie_stackname} ${nonmaskimagename}
  #
endif
#
echo "<<@progress: 15>>"
#
\rm -f frame_unbending.pdf
\touch frame_unbending.pdf
#
if ( ! -e SCRATCH/errout_unbend2_${imagename}.dat ) then
  ${proc_2dx}/protest "ERROR: First run Unbend II."
endif
#
\cp -f SCRATCH/errout_unbend2_${imagename}.dat SCRATCH/errout${imagename}.dat
#
setenv PROFILE  SCRATCH/auto${imagename}.map.mrc
setenv PROFDATA SCRATCH/prof${imagename}.dat
setenv ERRORS   SCRATCH/errout${imagename}.dat
setenv ERROUT   SCRATCH/errout2${imagename}.dat
#
set quadradbx = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set quadradby = `echo ${quadradb} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set movie_quadradax = `echo ${movie_quadrada} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set movie_quadraday = `echo ${movie_quadrada} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set movie_quadradbx = `echo ${movie_quadradb} | sed 's/,/ /g' | awk '{ s = int( $1 ) } END { print s }'`
set movie_quadradby = `echo ${movie_quadradb} | sed 's/,/ /g' | awk '{ s = int( $2 ) } END { print s }'`
set refposix = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $1 ) } END { print s }'`
set refposiy = `echo ${refori} | sed 's/,/ /g' | awk '{ s = int ( $2 ) } END { print s }'`
set valspotscan = '0'
set createmask = '0'
set cormap = SCRATCH/cor1${imagename}.cor.unbend2.mrc
#
\rm -f SCRATCH/errout2${imagename}.dat
\rm -f SPIDERCOORD.spi
#
if ( ! -e ${cormap} ) then
  ${proc_2dx}/protest "ERROR: First run Unbend-I and Unbend-II scripts. File missing: ${cormap}"
endif
# 
###############################################################
${proc_2dx}/linblock "QUADSERCH - Updating Initial Error Field" 
###############################################################
#
echo "<<@progress: 20>>"
#
echo "movie_imagenumber_touse = ${movie_imagenumber_touse}"
#
${bin_2dx}/2dx_quadserchk-2.exe << eot
3,${quadpredb}                     ! IPASS,NRANGE
${cormap}
${imagesidelength},${imagesidelength}     ! SIZE OF TRANSFORM (ISIZEX, ISIZEY)
${lattice},F                       ! Lattice vectors
-200,200,-200,200               ! NUMBER UNIT CELLS TO SEARCH
${quadradbx},${quadradby}           ! RADIUS OF CORR SEARCH
${refposix},${refposiy}           ! POSN OF START SEARCH ORIGIN  0,0 IS ORIGIN
N                               ! YES/NO FOR DETAILED PRINTOUT
${radlim}                       ! RADLIM IN PROFILE GRID UNITS
${valspotscan},${RMAG},${LCOLOR}          ! prohibit fractures in crystal (1=y,0=n),RMAG,LCOLOR
${createmask}                   ! dont create manual Masking information
0                               ! Mask the image directly
eot
#
#
###############################################################
${proc_2dx}/linblock "apply_filter.py - Applying pre-processing filters"
###############################################################
#
set prog_num = 22
echo "<<@progress: ${prog_num}>>"       
#
# i counts the super-frames to process:
set i = 1
while ($i <= ${movie_imagenumber_touse})
  #
  ${proc_2dx}/lin "Adapting size and limiting resolution for frame ${i}"
  set new_mrc_created = y
  set loc_imagename = frames/frame_${i}
  source ${proc_2dx}/2dx_initialize_make_image_square_sub.com
  #
  set filtervalue = `python ${proc_2dx}/movie/getFilter.py ${i} ${movie_filter_type} ${filt_a} ${filt_b}`
  echo ":  Filter frame average #${i} with radius ${filtervalue}"
  echo "LP on: frames/frame_${i}.mrc with filter radius ${filtervalue}"
  echo "python ${proc_2dx}/movie/getFilter.py ${i} ${movie_filter_type} ${filt_a} ${filt_b}"
  #
  python ${proc_2dx}/movie/apply_filter.py frames/frame_${i}.mrc ${filtervalue} ${i} ${imagesidelength}
  #
  ## This is to make sure the script shows up in the GUI:
  if ( 1 == 2 ) then
    python ${proc_2dx}/movie/getFilter.py ${i} ${movie_filter_type} ${filt_a} ${filt_b}
  endif
  #
  echo "# IMAGE: frames/frame_${i}.mrc <Frame ${i}>" >> LOGS/${scriptname}.results
  #
  set prog_num = `echo ${i} ${movie_imagenumber_touse} | awk '{ s = 22 + int( 20 * $1 / $2 ) } END { print s }'` 
  echo "<<@progress: ${prog_num}>>"       

  @ i += 1
end
#
#
echo "<<@progress: 42>>"
#
touch frames/peaks_dummy
\rm -f frames/peaks*
#
###############################################################
${proc_2dx}/linblock "BOXIMAGE - Boxing reference: ${movie_refboxa}"
###############################################################
#
set unbent_fil = SCRATCH/${imagename}.unbent-filtered.mrc
#
if ( ! -e ${unbent_fil} ) then
  ${proc_2dx}/protest "ERROR: File missing: ${unbent_fil}"
endif
# 
\rm -f SCRATCH/refam${imagename}.flt.mrc
setenv IN  ${unbent_fil}
setenv OUT SCRATCH/refam${imagename}.flt.mrc
${bin_2dx}/2dx_boximage.exe << eot
-1 0                        ! NOVERT, VERTEX COORDS GIVEN IN GRID UNITS RELATIVE TO (0,0) ORIGIN.
0 0                         ! ORIGIN FOR LATER USE (E.G. IN FOURIER TRANSFORM)
${refposix} ${refposiy}     ! VERTEX COORDINATES IN GRID STEPS WRT CORNER (0,0)
${movie_refboxa}
eot
#
echo  "# IMAGE: SCRATCH/refam${imagename}.flt.mrc <Movie Mode Reference A>" >> LOGS/${scriptname}.results
#
###############################################################
${proc_2dx}/linblock "FFTRANS - Producing references in Fourier space"
###############################################################
#
\rm -f SCRATCH/refam${imagename}.flt.upscale.mrc
${bin_2dx}/labelh.exe << eot
SCRATCH/refam${imagename}.flt.mrc
19
SCRATCH/refam${imagename}.flt.upscale.mrc
eot
#
\rm -f SCRATCH/refam${imagename}.fft.mrc
setenv IN  SCRATCH/refam${imagename}.flt.upscale.mrc
setenv OUT SCRATCH/refam${imagename}.fft.mrc
${bin_2dx}/2dx_fftrans.exe
#
echo  "# IMAGE: SCRATCH/refam${imagename}.fft.mrc <Movie Mode Ref A (FFT)>" >> LOGS/${scriptname}.results
#
if ( ${movie_masking_mode} == '1' ) then 
  if ( ! -e ${nonmaskimagename}-masking-final.mrc ) then
    ${proc_2dx}/linblock "ERROR: ${nonmaskimagename}-masking-final.mrc not found. First run UNBEND-II with masking option."
    ${proc_2dx}/linblock "WARNING: Continuing withoug masking."
    set movie_masking_mode = 0
    echo "set movie_masking_mode = ${movie_masking_mode}" >> LOGS/${scriptname}.results
  endif 
  echo  "# IMAGE: ${nonmaskimagename}-masking-final.mrc <Movie Mode Masking Info>" >> LOGS/${scriptname}.results
endif
#
#########################################################################
${proc_2dx}/lin "MASKTRAN - Masked FFT of boxed reference"
#########################################################################
set maskb = ${maskb01}
set rmax = 11000
#
\rm -f SCRATCH/refam1${imagename}.fft.msk.mrc
setenv IN  SCRATCH/refam${imagename}.fft.mrc
setenv OUT SCRATCH/refam1${imagename}.fft.msk.mrc
setenv SPOTS ${imagename}.spt
${bin_2dx}/2dx_masktrana.exe << eot
1 F T F ! ISHAPE=1(CIRC),2(GAUSCIR),3(RECT)HOLE,IAMPLIMIT(T or F),ISPOT,IFIL
${maskb} ! RADIUS OF HOLE IF CIRCULAR, X,Y HALF-EDGE-LENGTHS IF RECT.
${lattice},-50,50,-50,50,${rmax},1 ! A/BX/Y,IH/IKMN/MX,RMAX,ITYPE
eot
echo  "# IMAGE: SCRATCH/refam1${imagename}.fft.msk.mrc <Masked boxed reference A>" >> LOGS/${scriptname}.results
#
# the variable ${prog_num} controls the progress bar in the subscript 2dx_unbend_movie_sub.com:
set prog_num = 50
echo "<<@progress: ${prog_num}>>"
#
# Calculate cross-correlation maps between frames and reference:
#
set i = 1
while ($i <= ${movie_imagenumber_touse})
        #########################################################################
        ${proc_2dx}/lin "FFT of frame ${i}"
        #########################################################################
        setenv IN frames/frame_${i}.mrc
        setenv OUT frames/frame_${i}.fft.mrc
        ${bin_2dx}/2dx_fftrans.exe
        echo  "# IMAGE: frames/frame_${i}.fft.mrc <FFT Frame ${i}>" >> LOGS/${scriptname}.results
        
        
        #########################################################################
        ${proc_2dx}/lin "TWOFILE - Cross-correlate frame ${i} and reference"
        #########################################################################
        \rm -f frames/frame_${i}/SCRATCH/corel_a_${nonmaskimagename}.fft.mrc
        setenv IN1 frames/frame_${i}.fft.mrc
        setenv IN2 SCRATCH/refam1${imagename}.fft.msk.mrc
        setenv OUT frames/frame_${i}_corel.fft.mrc
        ${bin_2dx}/twofile.exe << eot
        2 ! ICOMB = 2
        2 0 0 ${refposix} ${refposiy} ! IORIGIN,OXA,OYA,OXB,OYB  Origin shifts to FFTs
eot
        # echo  "# IMAGE: frames/frame_${i}_corel.fft.mrc <FFT CCmap Frame ${i}>" >> LOGS/${scriptname}.results

        #########################################################################
        ${proc_2dx}/lin "FFTRANS - Inverse FFT to obtain cross-correlation map"
        #########################################################################
        /bin/rm -f frames/CCmap_${i}.mrc
        setenv IN frames/frame_${i}_corel.fft.mrc
        setenv OUT frames/CCmap_${i}.mrc
        ${bin_2dx}/2dx_fftrans.exe
        echo  "# IMAGE: frames/CCmap_${i}.mrc <CCmap Frame ${i}>" >> LOGS/${scriptname}.results

        set prog_num = `echo ${i} ${movie_imagenumber_touse} | awk '{ s = 50 + int( 20 * $1 / $2 ) } END { print s }'` 
        echo "<<@progress: ${prog_num}>>"
         
        @ i += 1
end
#

###########################################################################
${proc_2dx}/linblock "Refining dose-dependent drift of lattice positions" 
###########################################################################
#
setenv NCPUS ${Thread_Number}
#
${bin_2dx}/2dx_movie_refine.exe << eot
frames/CCmap
${movie_imagenumber_touse}
SCRATCH/prof${imagename}.dat
eot
#
echo "<<@progress: 70>>"

echo ":: "
echo ":: Now plot the file 2dx_movie_refine.dat "
echo ":: "
echo  "# IMAGE-IMPORTANT: 2dx_movie_refine.dat <2dx_movie_refine.dat>" >> LOGS/${scriptname}.results

###########################################################################
${proc_2dx}/linblock "Unbending all frames" 
###########################################################################
#
set i = 1
while ($i <= ${movie_imagenumber_touse})
       ###########################################################################
       ${proc_2dx}/lin "CCUNBEND - Unbend frame ${i}"
       ###########################################################################
       setenv CCORDATA frames/PROFDATA_${i}.dat
       setenv TABLEOUT frames/CCUNBEND_Table_${i}.dat
       set ITYPE = 0
       set ROFFSET = 50.0
       set NNUM = 6
       rm -f CCPLOT.PS

       ${bin_2dx}/2dx_ccunbendk.exe << eot
frames/frame_${i}.mrc
${ITYPE},1,${IMAXCOR},${ISTEP},F,40,T       !ITYPE,IOUT,IMAXCOR,ISTEP,LTAPER,RTAPER,LTABOUT
30,52,0.001,${movie_facthreshb},${TLTAXIS},${RMAG},${LCOLOR}     !IKX,IKY,EPS,FACTOR,TLTAXIS,RMAG,LCOLOR
${imagename}, Movie-Mode UNBEND, ${date}
frames/CCUNBEND_frame_${i}.notap.mrc
CCUNBEND, frame_${i}.mrc, ${date}
eot

       ###########################################################################
       ${proc_2dx}/lin "Store distortion-vector-field for visual inspection"
       ###########################################################################
       if ( ! -e CCPLOT.PS ) then
          ${proc_2dx}/protest "ERROR: CCPLOT.PS missing"
       endif
       #
       \cp -f CCPLOT.PS frames/PS/CCUNBEND_${i}.ps

       if ( ${i} == '1' ) then
          if ( ${ps2pdf} == "pstopdf" ) then
             ${ps2pdf} CCPLOT.PS  
             \mv -f CCPLOT.pdf frame_unbending.pdf
          else
             ${ps2pdf} CCPLOT.PS frame_unbending.pdf 
          endif
          pdftk A=frame_unbending.pdf cat A1 output out.pdf 
          \mv -f out.pdf frame_unbending.pdf
       else
          if ( ${ps2pdf} == "pstopdf" ) then
             ${ps2pdf} CCPLOT.PS 
          else
             ${ps2pdf} CCPLOT.PS CCPLOT.pdf 
          endif
          pdftk A=frame_unbending.pdf B=CCPLOT.pdf cat A1-end B1 output out.pdf 
          \mv -f out.pdf frame_unbending.pdf
       endif

       ###########################################################################
       ${proc_2dx}/lin "TAPEREDGE - correct unbent frame ${i} for taper edges"
       ###########################################################################
       \rm -f frames/CCUNBEND_frame_${i}.mrc
       setenv IN  frames/CCUNBEND_frame_${i}.notap.mrc
       setenv OUT frames/CCUNBEND_frame_${i}.mrc
       ${bin_2dx}/2dx_taperedgek.exe << eot
       30,30,100,30       ! IAVER,ISMOOTH,ITAPER
eot

       ###########################################################################
       ${proc_2dx}/lin "FFTRANS - Obtain Fourier-transform of unbent and masked frame ${i}"
       ###########################################################################
       \rm -f frames/CCUNBEND_frame_${i}.fft.mrc
       setenv IN  frames/CCUNBEND_frame_${i}.mrc
       setenv OUT frames/CCUNBEND_frame_${i}.fft.mrc
       ${bin_2dx}/2dx_fftrans.exe
     
       set prog_num = `echo ${i} ${movie_imagenumber_touse} | awk '{ s = 70 + int( 10 * $1 / $2 ) } END { print s }'` 
       echo "<<@progress: ${prog_num}>>"
         
       @ i += 1
end
#

echo "<<@progress: 80>>"

###########################################################################
${proc_2dx}/linblock "Averaging unbent images from frames 1 to ${movie_imagenumber_touse}" 
###########################################################################
python ${proc_2dx}/movie/direct_sum.py ${movie_imagenumber_touse} ${nonmaskimagename}
echo "# IMAGE: frames/direct_sum.mrc <Sum unbent images>" >> LOGS/${scriptname}.results 


###########################################################################
${proc_2dx}/linblock "Filtering by resolution weights"
###########################################################################
python ${proc_2dx}/movie/apply_filter_sum.py frames/direct_sum.mrc frames/direct_sum_filt.mrc
echo "# IMAGE: frames/direct_sum_filt.mrc <Sum unbent images, filtered>" >> LOGS/${scriptname}.results 
echo "# IMAGE: weight.mrc <Weight function for adding frames in Fourier space>" >> LOGS/${scriptname}.results

###########################################################################
${proc_2dx}/linblock "TAPEREDGE - Tapering edge of summed frames"
###########################################################################

setenv IN  frames/direct_sum.mrc
setenv OUT frames/direct_sum_fixed.mrc
${bin_2dx}/2dx_taperedgek.exe << eot
30,30,100,30       ! IAVER,ISMOOTH,ITAPER
eot
echo "# IMAGE: frames/direct_sum_fixed.mrc <Sum unbent images, edge-tapered>" >> LOGS/${scriptname}.results 

###########################################################################
${proc_2dx}/linblock "FFTRANS - Producing final FFT"
###########################################################################

setenv IN "frames/direct_sum_fixed.mrc"
setenv OUT "frames/direct_sum.fft.mrc"
${bin_2dx}/2dx_fftrans.exe
echo "# IMAGE: frames/direct_sum.fft.mrc <Final FFT>" >> LOGS/${scriptname}.results


###########################################################################
${proc_2dx}/linblock "MMBOX - Evaluating APH values, without resolution limit"
###########################################################################

${bin_2dx}/2dx_mmboxa.exe << eot
frames/direct_sum.fft.mrc
${imagenumber} ${nonmaskimagename}, Unbend2, ${date}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2,2,0,50,50,19,19               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
APH/${imagename}.fou.movie.nolimit.aph
SCRATCH/TMP9873.dat
U2
${refposix},${refposiy}           ! XORIG,YORIG
200.0,1.5,1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                         ! Lattice vectors
eot

\rm -f SCRATCH/TMP9882.dat

echo "<<@progress: 85>>"

###########################################################################
${proc_2dx}/linblock "MMBOX - Evaluating APH values, with resolution limit"
###########################################################################

${bin_2dx}/2dx_mmboxa.exe << eot
frames/direct_sum.fft.mrc
${imagenumber} ${nonmaskimagename}, Unbend2, ${date}
Y                               ! Use grid units?
Y                               ! Generate grid from lattice?
N                               ! Generate points from lattice?
2,2,0,50,50,19,19               ! IPIXEL,IOUT,NUMSPOT,NOH,NOK,NHOR,NVERT
APH/${imagename}.fou.movie.limit.aph
SCRATCH/TMP9882.dat
U2
${refposix},${refposiy}         ! XORIG,YORIG
${RESMIN},${RESMAX},1,${realcell},${ALAT},${realang} ! RINNER,ROUTER,IRAD,A,B,W,ABANG
${lattice}                              ! Lattice vectors
eot

source SCRATCH/TMP9882.dat

###########################################################################
${proc_2dx}/linblock "Generate IQ-stat output"
###########################################################################

echo "set QVAL = ${QVAL_local}" >> LOGS/${scriptname}.results
echo "set QVALS = ${QVAL_local}" >> LOGS/${scriptname}.results

echo "set US_IQ1 = ${U2_IQ1}" >> LOGS/${scriptname}.results
echo "set US_IQ2 = ${U2_IQ2}" >> LOGS/${scriptname}.results
echo "set US_IQ3 = ${U2_IQ3}" >> LOGS/${scriptname}.results
echo "set US_IQ4 = ${U2_IQ4}" >> LOGS/${scriptname}.results
echo "set US_IQ5 = ${U2_IQ5}" >> LOGS/${scriptname}.results
echo "set US_IQ6 = ${U2_IQ6}" >> LOGS/${scriptname}.results
echo "set US_IQ7 = ${U2_IQ7}" >> LOGS/${scriptname}.results
echo "set US_IQ8 = ${U2_IQ8}" >> LOGS/${scriptname}.results
echo "set US_IQ9 = ${U2_IQ9}" >> LOGS/${scriptname}.results

set RP_6 = ${PSMAX}
echo "set RP_1 = ${RP_1}" >> LOGS/${scriptname}.results
echo "set RP_2 = ${RP_2}" >> LOGS/${scriptname}.results
echo "set RP_3 = ${RP_3}" >> LOGS/${scriptname}.results
echo "set RP_4 = ${RP_4}" >> LOGS/${scriptname}.results
echo "set RP_5 = ${RP_5}" >> LOGS/${scriptname}.results
echo "set RP_6 = ${RP_6}" >> LOGS/${scriptname}.results

echo "<<@evaluate>>"

# Variation plot generation (no longer used)
#python ${proc_2dx}/movie/calculate_distance.py 1 ${movie_imagenumber_touse} ${nonmaskimagename}
#pdf2ps frames/sd.pdf frames/sd.ps
#convert frames/sd.ps frames/sd.jpg
#echo "# IMAGE: frames/sd.ps <Variations>" >> LOGS/${scriptname}.results

echo "<<@progress: 90>>"
if ( ${movie_filter_type} == '2' ) then
        ${proc_2dx}/linblock "Plotting AMP-Decay"
        python ${proc_2dx}/movie/extractAMP.py `ls frames/aph_*`
        python ${proc_2dx}/movie/plotAMP.py frames/AMPs.txt ${movie_imagenumber_toave}
        ${pdf2ps} frames/AMPs.pdf frames/AMPs.ps 
        echo  "# IMAGE: frames/AMPs.ps <PS: AMP Decay>" >> LOGS/${scriptname}.results
endif

\rm -f frame_unbending.ps
${pdf2ps} frame_unbending.pdf frame_unbending.ps
echo "# IMAGE-IMPORTANT: frame_unbending.ps <PS: Profiles CCUNBEND>" >> LOGS/${scriptname}.results

echo "# IMAGE-IMPORTANT: APH/${imagename}.fou.movie.limit.aph <APH: APH file after movie-mode unbending with resolution limit>" >> LOGS/${scriptname}.results
echo "# IMAGE-IMPORTANT: APH/${imagename}.fou.movie.nolimit.aph <APH: APH file after movie-mode unbending, no limit>" >> LOGS/${scriptname}.results

if ( ${tempkeep} != "y" ) then
  ###########################################################################
  ${proc_2dx}/linblock "Deleting frame averages temporay files"
  ###########################################################################
  cd frames
  \rm -rf frame*
  cd ..
endif


###########################################################################
${proc_2dx}/linblock "Script finished correctly."
###########################################################################
echo "<<@progress: 100>>"
echo "<<@evaluate>>"
#
exit
#
