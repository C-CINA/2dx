#!/bin/csh -ef
#############################################################################
#                                                                           #
# Title: Export particle stack                                				#
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 29/07/2016                                             #
# Last Modification: 29/07/2016                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 2
#
#
# MANUAL: This script extracts particles from the 2D crystal images to be refined in single-particle fashion. Currently supports only FREALIGN.
#
# DISPLAY: Thread_Number
# DISPLAY: SPR_DIR
# DISPLAY: use_masked_image
# DISPLAY: SPR_boxsize
# DISPLAY: SPR_PhaseShift
# DISPLAY: SPR_SIGCC
# DISPLAY: SPR_InvertContrast
# DISPLAY: SPR_NormalizeBox
# DISPLAY: SPR_SigmaNorm
# DISPLAY: SPR_WhichCTF
# DISPLAY: SPR_CalculateDefocusTilted
# DISPLAY: SPR_SavePhaseFlipped
# DISPLAY: SPR_SaveWienerFiltered
# DISPLAY: SPR_WhichTiltGeometry
# DISPLAY: CS
# DISPLAY: KV
# DISPLAY: sample_pixel
# DISPLAY: phacon
# DISPLAY: magnification
# DISPLAY: SPR_SYM
# DISPLAY: SPR_SavePickFig
#
#$end_local_vars
#

echo "<<@progress: 0>>"

set Thread_Number = ""
set bin_2dx = ""
set proc_2dx = ""
set app_python = ""

set scriptname = ExportParticleStack

#
set SPR_RESMIN = ""
set SPR_RESMAX = ""
set SPR_PhaseShift = ""
set SPR_boxsize = ""
set SPR_SIGCC = ""
set SPR_InvertContrast = ""
set SPR_NormalizeBox = ""
set SPR_CalculateDefocusTilted = ""
set SPR_SavePhaseFlipped = ""
set SPR_SaveWienerFiltered = ""
set SPR_SigmaNorm = ""
set SPR_WhichTiltGeometry = ""
set SPR_WhichCTF = ""
set SPR_SavePickFig = ""
set CS = ""
set KV = ""
set sample_pixel = ""
set phacon = ""
set magnification = ""
set use_masked_image = ""
#
set SPR_DIR = ""
set SPR_IMGS_DIR = ../
set SPR_MERGEFILE = 2dx_merge_dirfile.dat
set SPR_STACKS_DIR = ${SPR_DIR}/stacks/
set SPR_PICKING_DIR = ${SPR_DIR}/picking/
set SPR_STACK_ROOTNAME = 'particles'

#$end_vars

set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
if ( -e LOGS/${scriptname}.results ) then
	mv LOGS/${scriptname}.results LOGS/${scriptname}.results.old
endif

# Start script commands:
mkdir -p ${SPR_STACKS_DIR}

if ( ${SPR_SavePickFig} == "y" ) then
	mkdir -p ${SPR_PICKING_DIR}
endif

if ( ${SPR_WhichCTF} == "Micrograph" ) then
	set SPR_SaveWienerFiltered = "n"
	set SPR_SavePhaseFlipped = "n"
endif

# Let's make sure we don't use more threads than there are images to pick particles from:
set n_img = `cat ${SPR_MERGEFILE} | wc -l`
if ( ${n_img} < ${Thread_Number} ) then
	set Thread_Number = ${n_img}
endif

set t = 1
set pids = ""
while ( $t <= ${Thread_Number} )
	${app_python} ${proc_2dx}/SPR_ExtractParticles.py ${SPR_IMGS_DIR} ${SPR_MERGEFILE} ${SPR_PICKING_DIR} ${SPR_STACKS_DIR} ${SPR_STACK_ROOTNAME} ${SPR_boxsize} ${SPR_PhaseShift} ${sample_pixel} ${KV} ${CS} ${phacon} ${magnification} ${SPR_SIGCC} ${SPR_InvertContrast} ${SPR_NormalizeBox} ${SPR_CalculateDefocusTilted} ${SPR_SavePhaseFlipped} ${SPR_SaveWienerFiltered} ${SPR_SigmaNorm} ${SPR_WhichTiltGeometry} ${SPR_WhichCTF} ${SPR_SavePickFig} ${use_masked_image} ${Thread_Number} ${t} &
	set pids = "$pids $!"
	@ t++
end

# Wait for all jobs to finish
while ( `ps -p ${pids} | wc -l` > 1 )
	wait
end

### BELOW IS A SERIOUS KLUDGE BECAUSE EMAN2/SPARX DO NOT SUPPORT WRITING TO MRC STACKS BIGGER THAN 65535 IMAGES DIRECTLY ###
# We specify each possible stack explicitly to avoid processing other that may exist in the folder:
echo "::Now organizing and converting stack(s) to .mrcs format..."

set stacks = ""
if ( ${SPR_WhichCTF} == "Micrograph" ) then
	set stacks = "$stacks _ctfcor"
else
	set stacks = "$stacks raw"
	if ( ${SPR_SaveWienerFiltered} == "y" ) then
		set stacks = "$stacks _wiener-filtered"
	endif
	if ( ${SPR_SavePhaseFlipped} == "y" ) then
		set stacks = "$stacks _phase-flipped"
	endif
endif

# foreach s ( raw _ctfcor _phase-flipped _wiener-filtered )
foreach s ( ${stacks} )

	# echo ${s}

	if  ( ${s} == "raw" ) then
		set i = ""
	else
		set i = ${s}
	endif

	# echo ${i}

	if ( -e ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1.par ) then
		echo "::There is already a ${SPR_STACK_ROOTNAME}${i}_1_r1.par file in ${SPR_STACKS_DIR}! Will back it up."
		mv ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1.par ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1.par.bkp
	endif

	if ( -e ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs ) then
		echo "::There is already a ${SPR_STACK_ROOTNAME}${i}.mrcs file in ${SPR_STACKS_DIR}! Will back it up."
		mv ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs.bkp
	endif

	if ( -e ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}-0001.hdf ) then

		set t = 1

		# echo "::Creating single ${SPR_STACK_ROOTNAME}${i}.hdf stack..."
		while ( $t <= ${Thread_Number} )

			set num = `printf "%.4d" $t`
			# Append to HDF stack first... the kludge...
			# e2proc2d.py ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}-${num}.hdf ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.hdf
			# rm ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}-${num}.hdf

			# Append partial .par file to the main one...
			if  ( ${s} == "raw" || ${s} == "_ctfcor" ) then
				cat ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1-${num}.par >> ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1.par
				rm ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1-${num}.par
			endif

			@ t++

		end
		echo "::Done!"

		# Correct the particle numbers in the .par file:
		if  ( ${s} == "raw" || ${s} == "_ctfcor" ) then
			${app_python} ${proc_2dx}/SPR_ReIndexParFile.py ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}_1_r1.par
		endif

		# echo "::Converting ${SPR_STACK_ROOTNAME}${i}.hdf to ${SPR_STACK_ROOTNAME}${i}.mrcs..."
		cho "::Converting partial HDF stacks to single ${SPR_STACK_ROOTNAME}${i}.mrcs..."
		# e2proc2d.py ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.hdf ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrc --twod2threed
		# mv ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrc ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs
		# rm ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.hdf
		${dir_imod}/bin/newstack -mode 2 `ls ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}-*.hdf | sort` ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs

		rm ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}-*.hdf

	endif

	echo "# IMAGE-IMPORTANT MRCS: ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}${i}.mrcs <STACK: ${SPR_STACK_ROOTNAME}${i}.mrcs>" >> LOGS/${scriptname}.results

	echo "<<@progress: +5>>"

end

# if ( -e ${SPR_STACKS_DIR}/particles.hdf ) then
# 	e2proc2d.py ${SPR_STACKS_DIR}/particles.hdf ${SPR_STACKS_DIR}/particles.mrc --twod2threed
# 	rm ${SPR_STACKS_DIR}/particles.hdf
# endif

# if ( -e ${SPR_STACKS_DIR}/particles_phase-flipped.hdf ) then
# 	e2proc2d.py ${SPR_STACKS_DIR}/particles_phase-flipped.hdf ${SPR_STACKS_DIR}/particles_phase-flipped.mrc --twod2threed
# 	rm ${SPR_STACKS_DIR}/particles_phase-flipped.hdf
# endif

# if ( -e ${SPR_STACKS_DIR}/particles_wiener-filtered.hdf ) then
# 	e2proc2d.py ${SPR_STACKS_DIR}/particles_wiener-filtered.hdf ${SPR_STACKS_DIR}/particles_wiener-filtered.mrc --twod2threed
# 	rm ${SPR_STACKS_DIR}/particles_wiener-filtered.hdf
# endif

# if ( -e ${SPR_STACKS_DIR}/particles_ctfcor.hdf ) then
# 	e2proc2d.py ${SPR_STACKS_DIR}/particles_ctfcor.hdf ${SPR_STACKS_DIR}/particles_ctfcor.mrc --twod2threed
# 	rm ${SPR_STACKS_DIR}/particles_ctfcor.hdf
# endif

# foreach i ( ${SPR_STACKS_DIR}/*.hdf )
# 	e2proc2d.py $i $i.mrc --twod2threed
# 	rm $i
# end
# rename .hdf.mrc .mrcs ${SPR_STACKS_DIR}/*

# foreach i (${SPR_STACKS_DIR}/*.mrcs)
# 	echo "# IMAGE-IMPORTANT MRCS: $i <STACK: `basename $i`>" >> LOGS/${scriptname}.results
# end

# Let's make copies of the base .par file for each type of stack we may have:
if ( ${SPR_SavePhaseFlipped} == "y" && ${SPR_WhichCTF} != "Micrograph" ) then
	cp ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}_1_r1.par ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}_phase-flipped_1_r1.par
endif

if ( ${SPR_SaveWienerFiltered} == "y" && ${SPR_WhichCTF} != "Micrograph" ) then
	cp ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}_1_r1.par ${SPR_STACKS_DIR}/${SPR_STACK_ROOTNAME}_wiener-filtered_1_r1.par
endif

if ( ${SPR_SavePickFig} == "y" ) then

	foreach i (${SPR_PICKING_DIR}/*.png)
		echo "# IMAGE PNG: $i <PNG: `basename $i`>" >> LOGS/${scriptname}.results
	end
	
endif

echo "<<@progress: 100>>"

echo ":: "
echo ":: Done!"
echo ":: "
