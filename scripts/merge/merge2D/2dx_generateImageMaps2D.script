#!/bin/csh -ef
####
#
#############################################################################
#                                                                           #
# Title: Generate Image Maps                                                #
#                                                                           #
# 2dx.org, GNU Plublic License.                                             #
#                                                                           #
# Created..........: 02/20/2006                                             #
# Last Modification: 09/20/2006                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 97
#
# MANUAL: This script makes use of MRC and CCP4 commands to generate the projection maps of all selected images, using the latest phase origin settings.
#
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: SYM
# DISPLAY: ALAT
# DISPLAY: tempfac
# DISPLAY: MergeIQMAX
# DISPLAY: realang
# DISPLAY: realcell
# DISPLAY: merge_ref_num
# DISPLAY: create_PS
# DISPLAY: merge_data_type
# DISPLAY: merge_res_limit
# DISPLAY: tempfac
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set tempkeep = ""
set RESMIN = ""
set RESMAX = ""
set ALAT = ""
set realang = ""
set realcell = ""
set MergeIQMAX = ""
set tempfac = ""
set SYM = ""
set make_reference = ""
set merge_ref_num = ""
set realang = ""
set zstarwin = ""
set MergeHKMAX = ""
set merge_res_limit = ""
set create_PS = ""
set merge_data_type = ""
set merge_reference = ""
set RFACAMP = ""
set Thread_Number = ""
set tempfac = ""
set zstarrange = ""
set npo_line1 = ""
set npo_line2 = ""
#
#$end_vars
#
echo "<<@progress: 1>>"
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
echo tempkeep = ${tempkeep}
echo RESMIN = ${RESMIN}
echo RESMAX = ${RESMAX}
echo ALAT = ${ALAT}
echo realang = ${realang}
echo realcell = ${realcell}
echo tempfac = ${tempfac}
echo MergeHKMAX = ${MergeHKMAX}
echo SYM = ${SYM}
#
set imagenumber = 1001
set imagename = "merge"
#
set scriptname = "2dx_generateImageMaps2D"
set merge_modus="2D"
set make_reference="n"
#
source ${proc_2dx}/2dx_merge_makedirs 
#
\rm -f LOGS/${scriptname}.results
#
set RESULTSPS = "n"
set RESULTSMRC = "n"
\rm -rf RESULTS-MRC
\rm -rf RESULTS-TIFF
\rm -rf RESULTS-PS
\mkdir RESULTS-MRC
\mkdir RESULTS-TIFF
echo 1000001 > RESULTS-TIFF/filenum.tmp
\mkdir RESULTS-PS
#
set date = `date`
echo date = ${date}
#
set olddir = $PWD
cd ..
set basedir = $PWD
cd ${olddir}
####
set split = ($realcell:as/,/ /)
set cellx = $split[1]
set celly = $split[2]
####
#
if ( ${ALAT} == "0" || ${ALAT} == "0.0" ) then
  ${proc_2dx}/protest "ALAT is not defined."
endif
set ALATnew = `echo ${ALAT} | awk '{ if ( $1 < 0 ) { s = -$1 } else { s = $1 }} END { print s }'`
if ( ${ALAT} != ${ALATnew} ) then
  set ALAT = ${ALATnew}
  echo "set ALAT = ${ALAT}" >> LOGS/${scriptname}.results
endif
#
set zwin = `echo ${ALAT} | awk '{ s = 1.0 / ( 2.0 * $1 ) } END { print s }'`
echo zwin = $zwin
#
set ILIST_VAL = 0
#
#???? Check this ???
set SCL = 1
echo "SCL = ${SCL}"
#
# contrast for grey plot
set scale = 1
echo "scale = ${scale}"
#
# The following is to make sure that for the next "Import Images", the default is correctly initialized.
set initialization_reset = "y"
set initialization_executable = "y"
echo "set initialization_reset = ${initialization_reset}" >> LOGS/${scriptname}.results
echo "set initialization_executable = ${initialization_executable}" >> LOGS/${scriptname}.results
#
#############################################################################
${proc_2dx}/linblock "sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
############################################################################# 
${proc_2dx}/lin "2dx_merge_makedirs - to create all required subdirectories"
#############################################################################
#
${proc_2dx}/2dx_merge_makedirs
#
echo "<<@progress: 40>"
#
#############################################################################
${proc_2dx}/linblock "Compile script to re-generate maps"
#############################################################################
#
set dirfile = "2dx_merge_dirfile.dat"
set scriptMfile = "2dx_merge_scriptM"
#
echo "dummy" > SCRATCH/job_00_${scriptMfile}.com
\rm -f SCRATCH/job_*_${scriptMfile}.com
#
echo "dummy" > SCRATCH/job_00_${scriptMfile}.log
\rm -f SCRATCH/job_*_${scriptMfile}.log

\rm -f ${scriptMfile}
#
${bin_2dx}/2dx_merge_compileM.exe << eot
${basedir}
${dirfile}
${scriptMfile}
${realcell}
${realang}
${tempfac}
${zstarrange}
${npo_line1}
${npo_line2}
${ALAT}
${Thread_Number}
${merge_data_type}
eot
#
echo "<<@progress: 50>>"
#
#############################################################################
${proc_2dx}/linblock "Launching scripts"
#############################################################################
#
echo "<<@progress: 20>>"
#
set maxthread_gt_9 = `echo ${Thread_Number} | awk '{ if ( $1 > 9 ) { s = 1 } else { s = 0 } } END { print s }'`
if ( ${maxthread_gt_9} == '1' ) then
  set maxthread_with_zero = ${Thread_Number}
else
  set maxthread_with_zero = "0"${Thread_Number}
endif
if ( ${Thread_Number} == "1" ) then
  echo "# IMAGE: SCRATCH/job_01_${scriptMfile}.com <CSH: Script>" >> LOGS/${scriptname}.results
  echo "# IMAGE: SCRATCH/job_01_${scriptMfile}.com.log <LOG: Script output>" >> LOGS/${scriptname}.results
else
  echo "# IMAGE: SCRATCH/job_01_${scriptMfile}.com <CSH: First (01) script>" >> LOGS/${scriptname}.results
  echo "# IMAGE: SCRATCH/job_01_${scriptMfile}.com.log <LOG: First (01) script output>" >> LOGS/${scriptname}.results
  echo "# IMAGE: SCRATCH/job_${maxthread_with_zero}_${scriptMfile}.com <CSH: Last (${maxthread_with_zero}) script>" >> LOGS/${scriptname}.results
  echo "# IMAGE: SCRATCH/job_${maxthread_with_zero}_2dx_${scriptMfile}.com.log <LOG: Last (${maxthread_with_zero}) script output>" >> LOGS/${scriptname}.results
endif
#
foreach scriptM ( SCRATCH/job_*_${scriptMfile}.com )
  chmod +x ${scriptM}
  if ( ${scriptM} != SCRATCH/job_${maxthread_with_zero}_${scriptMfile}.com ) then
    echo Background nohup ${scriptM} \> ${scriptM}.log \&
    nohup ${scriptM} ${proc_2dx} ${bin_2dx} ${MergeIQMAX} ${RFACAMP} ${RESMIN} ${RESMAX} ${CCP4_SYM} ${zwin} ${make_reference} ${create_PS} ${scriptname} > ${scriptM}.log &
  else
    echo Forground ${scriptM} \> ${scriptM}.log
    ${scriptM} ${proc_2dx} ${bin_2dx} ${MergeIQMAX} ${RFACAMP} ${RESMIN} ${RESMAX} ${CCP4_SYM} ${zwin} ${make_reference} ${create_PS} ${scriptname} > ${scriptM}.log
  endif
end
#
#
echo "################################################"
echo "################################################"
echo "output in file SCRATCH/job_XX_${scriptMfile}.com.log"
echo "################################################"
echo "################################################"
#
echo "Refinement jobs produced the following output files:"
touch SCRATCH/job_01_${scriptMfile}.com
\ls -l SCRATCH/job_*_${scriptMfile}.com
touch SCRATCH/job_01_${scriptMfile}.com.log
\ls -l SCRATCH/job_*_${scriptMfile}.com.log
#
sleep 1
#
\rm -f SCRATCH/${scriptMfile}.console
echo "# IMAGE: SCRATCH/${scriptMfile}.console <LOG: Console output from merging>" >> LOGS/${scriptname}.results
foreach scriptMconsole ( SCRATCH/job_*_${scriptMfile}.com.log ) 
  cat ${scriptMconsole} >> SCRATCH/${scriptMfile}.console
  \rm -f ${scriptMconsole}
end
##
echo "<<@progress: 100>>"
#
#
#############################################################################
#                                                                           #
echo "::"
${proc_2dx}/linblock "Done."
#                                                                           #
#############################################################################
#
exit
#
# Only to display this script in 2dx_merge:
source ${proc_2dx}/2dx_merge_redoMap_sub.com
#
